/*! normalize.css v3.0.3 | MIT License | github.com/necolas/normalize.css */
/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS and IE text size adjust after device orientation change,
 *    without disabling user zoom.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/**
 * Remove default margin.
 */
body {
  margin: 0; }

/* HTML5 display definitions
   ========================================================================== */
/**
 * Correct `block` display not defined for any HTML5 element in IE 8/9.
 * Correct `block` display not defined for `details` or `summary` in IE 10/11
 * and Firefox.
 * Correct `block` display not defined for `main` in IE 11.
 */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
menu,
nav,
section,
summary {
  display: block; }

/**
 * 1. Correct `inline-block` display not defined in IE 8/9.
 * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
 */
audio,
canvas,
progress,
video {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */ }

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0; }

/**
 * Address `[hidden]` styling not present in IE 8/9/10.
 * Hide the `template` element in IE 8/9/10/11, Safari, and Firefox < 22.
 */
[hidden],
template {
  display: none; }

/* Links
   ========================================================================== */
/**
 * Remove the gray background color from active links in IE 10.
 */
a {
  background-color: transparent; }

/**
 * Improve readability of focused elements when they are also in an
 * active/hover state.
 */
a:active,
a:hover {
  outline: 0; }

/* Text-level semantics
   ========================================================================== */
/**
 * Address styling not present in IE 8/9/10/11, Safari, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted; }

/**
 * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.
 */
b,
strong {
  font-weight: bold; }

/**
 * Address styling not present in Safari and Chrome.
 */
dfn {
  font-style: italic; }

/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari, and Chrome.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0; }

/**
 * Address styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000; }

/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%; }

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sup {
  top: -0.5em; }

sub {
  bottom: -0.25em; }

/* Embedded content
   ========================================================================== */
/**
 * Remove border when inside `a` element in IE 8/9/10.
 */
img {
  border: 0; }

/**
 * Correct overflow not hidden in IE 9/10/11.
 */
svg:not(:root) {
  overflow: hidden; }

/* Grouping content
   ========================================================================== */
/**
 * Address margin not present in IE 8/9 and Safari.
 */
figure {
  margin: 1em 40px; }

/**
 * Address differences between Firefox and other browsers.
 */
hr {
  box-sizing: content-box;
  height: 0; }

/**
 * Contain overflow in all browsers.
 */
pre {
  overflow: auto; }

/**
 * Address odd `em`-unit font size rendering in all browsers.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  font-size: 1em; }

/* Forms
   ========================================================================== */
/**
 * Known limitation: by default, Chrome and Safari on OS X allow very limited
 * styling of `select`, unless a `border` property is set.
 */
/**
 * 1. Correct color not being inherited.
 *    Known issue: affects color of disabled elements.
 * 2. Correct font properties not being inherited.
 * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.
 */
button,
input,
optgroup,
select,
textarea {
  color: inherit;
  /* 1 */
  font: inherit;
  /* 2 */
  margin: 0;
  /* 3 */ }

/**
 * Address `overflow` set to `hidden` in IE 8/9/10/11.
 */
button {
  overflow: visible; }

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.
 * Correct `select` style inheritance in Firefox.
 */
button,
select {
  text-transform: none; }

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */
button,
html input[type="button"], input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */ }

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled],
html input[disabled] {
  cursor: default; }

/**
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0; }

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
input {
  line-height: normal; }

/**
 * It's recommended that you don't attempt to style these elements.
 * Firefox's implementation doesn't respect box-sizing, padding, or width.
 *
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 */
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Fix the cursor style for Chrome's increment/decrement buttons. For certain
 * `font-size` values of the `input`, it causes the cursor style of the
 * decrement button to change from `default` to `text`.
 */
input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
 * 1. Address `appearance` set to `searchfield` in Safari and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari and Chrome.
 */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  box-sizing: content-box;
  /* 2 */ }

/**
 * Remove inner padding and search cancel button in Safari and Chrome on OS X.
 * Safari (but not Chrome) clips the cancel button when the search input has
 * padding (and `textfield` appearance).
 */
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em; }

/**
 * 1. Correct `color` not being inherited in IE 8/9/10/11.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Remove default vertical scrollbar in IE 8/9/10/11.
 */
textarea {
  overflow: auto; }

/**
 * Don't inherit the `font-weight` (applied by a rule above).
 * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
 */
optgroup {
  font-weight: bold; }

/* Tables
   ========================================================================== */
/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0; }

td,
th {
  padding: 0; }

html {
  box-sizing: border-box; }

*,
*:after,
*:before {
  box-sizing: inherit; }

/*$background-color: rgb(231, 231, 226);*/
/**
 * Set up a decent box model on the root element
 */
html {
  box-sizing: border-box; }

/**
 * Make all elements from the DOM inherit from the parent box-sizing
 * Since `*` has a specificity of 0, it does not override the `html` value
 * making all elements inheriting from the root box-sizing value
 * See: https://css-tricks.com/inheriting-box-sizing-probably-slightly-better-best-practice/
 */
*, *:before, *:after {
  box-sizing: inherit; }

/**
 * Basic styles for links
 */
a {
  color: #E50050;
  text-decoration: none; }
  a:hover,
  a:active,
  a:focus {
    color: #222;
    text-decoration: underline; }

html {
  color: #222;
  font-size: 1em;
  line-height: 1.4; }

::-moz-selection {
  background: #b3d4fc;
  text-shadow: none; }

::selection {
  background: #b3d4fc;
  text-shadow: none; }

hr {
  display: block;
  height: 1px;
  border: 0;
  border-top: 1px solid #ccc;
  margin: 1em 0;
  padding: 0; }

audio,
canvas,
iframe,
img,
svg,
video {
  vertical-align: middle; }

fieldset {
  border: 0;
  margin: 0;
  padding: 0; }

textarea {
  resize: vertical; }

@font-face {
  font-family: Beaver;
  src: url("fonts/beaver.ttf"); }

/**
 * Basic typography style for copy text
 */
body {
  color: #222;
  font: normal 125%/1.4 "Open Sans", "Helvetica Neue Light", "Helvetica Neue", "Helvetica", "Arial", sans-serif; }

/**
 * Clear inner floats
 */
.clearfix:after {
  clear: both;
  content: '';
  display: table; }

.clearfix:before,
.clearfix:after {
  content: " ";
  display: table; }

.clearfix:after {
  clear: both; }

.clearfix {
  *zoom: 1; }

/**
 * Main content containers
 * 1. Make the container full-width with a maximum width
 * 2. Center it in the viewport
 * 3. Leave some space on the edges, especially valuable on small screens
 */
.container {
  max-width: 960px;
  /* 1 */
  margin-left: auto;
  /* 2 */
  margin-right: auto;
  /* 2 */
  padding-left: 20px;
  /* 3 */
  padding-right: 20px;
  /* 3 */
  width: 100%;
  /* 1 */ }

/**
 * Hide text while making it readable for screen readers
 * 1. Needed in WebKit-based browsers because of an implementation bug;
 *    See: https://code.google.com/p/chromium/issues/detail?id=457146
 */
.hide-text {
  overflow: hidden;
  padding: 0;
  /* 1 */
  text-indent: 101%;
  white-space: nowrap; }

/**
 * Hide element while making it readable for screen readers
 * Shamelessly borrowed from HTML5Boilerplate:
 * https://github.com/h5bp/html5-boilerplate/blob/master/src/css/main.css#L119-L133
 */
.visually-hidden {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px; }

.hidden {
  display: none !important;
  visibility: hidden; }

.visuallyhidden {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px; }

.visuallyhidden.focusable:active,
.visuallyhidden.focusable:focus {
  clip: auto;
  height: auto;
  margin: 0;
  overflow: visible;
  position: static;
  width: auto; }

.invisible {
  visibility: hidden; }

@media print {
  *,
  *:before,
  *:after {
    background: transparent !important;
    color: #000 !important;
    box-shadow: none !important;
    text-shadow: none !important; }
  a,
  a:visited {
    text-decoration: underline; }
  a[href]:after {
    content: " (" attr(href) ")"; }
  abbr[title]:after {
    content: " (" attr(title) ")"; }
  a[href^="#"]:after,
  a[href^="javascript:"]:after {
    content: ""; }
  pre,
  blockquote {
    border: 1px solid #999;
    page-break-inside: avoid; }
  thead {
    display: table-header-group; }
  tr,
  img {
    page-break-inside: avoid; }
  img {
    max-width: 100% !important; }
  p,
  h2,
  h3 {
    orphans: 3;
    widows: 3; }
  h2,
  h3 {
    page-break-after: avoid; } }

#header-container {
  max-width: 960px;
  margin-left: auto;
  margin-right: auto; }
  #header-container:after {
    clear: both;
    content: "";
    display: table; }

#logo-container {
  background-color: #FFFFFF;
  width: auto;
  height: auto;
  /*position: absolute; left: 20px; top: 0px;*/
  font-family: Beaver;
  opacity: 0.9;
  float: left;
  display: block;
  margin-right: 2.35765%;
  width: 23.23176%; }
  #logo-container img {
    margin: 0;
    padding: 0; }
  #logo-container h1 {
    font-size: 32.4px;
    padding: 0;
    margin: 0 0px; }
  #logo-container p {
    padding: 0;
    margin: 0 2px; }
  #logo-container:last-child {
    margin-right: 0; }

#header-banner {
  background: url(img/kashana.png);
  height: 270px; }

body footer {
  background: linear-gradient(to bottom, #181818 0%, #343434 100%);
  /* W3C */
  color: white;
  padding: 20px 0;
  text-align: center; }

.nav-container {
  max-width: 960px;
  margin-left: auto;
  margin-right: auto; }
  .nav-container:after {
    clear: both;
    content: "";
    display: table; }

header nav {
  background: linear-gradient(to bottom, #7d7e7d 0%, #0e0e0e 100%);
  /* W3C */
  width: 100%;
  display: inline-block; }
  header nav a {
    display: block;
    color: white;
    font-weight: bold; }
    header nav a:hover {
      text-decoration: underline; }
    header nav a:hover, header nav a:visited {
      color: white; }
  header nav ul {
    list-style-type: none;
    display: inline-block;
    margin: 0;
    padding: 0; }
  header nav li {
    float: left;
    padding: 0.3em 0.6em;
    color: white;
    border-left: 1px solid #676060;
    border-right: 1px solid #231E1E;
    font-family: arial;
    font-weight: bold;
    font-size: 1.1em; }
    header nav li:first-child {
      border-left: none; }
    header nav li:last-child {
      border-right: none; }

footer nav {
  display: inline-block; }
  footer nav a {
    color: white; }
    footer nav a:hover {
      text-decoration: underline; }
    footer nav a:hover, footer nav a:visited {
      color: white; }
  footer nav ul {
    list-style-type: none;
    margin: 0;
    padding: 0; }
  footer nav li {
    float: left;
    padding: 0.3em 0.6em;
    color: white;
    font-family: arial; }

form {
  width: 100%; }

#search input[type="text"] {
  border-radius: 0.5ex 0 0 0.5ex;
  border: 0;
  margin: 0;
  -moz-box-shadow: inset -5px -5px 5px 5px #aaa;
  -webkit-box-shadow: inset -5px -5px 5px 5px #aaa;
  box-shadow: inset 0.5ex 0.5ex 0.25ex 0ex #aaa;
  float: left;
  padding: 10px; }

#search input[type="submit"] {
  border-radius: 0 0.5ex 0.5ex 0;
  background-color: #AD1E1E;
  color: white;
  border: 0;
  float: left;
  padding: 10px; }

main aside {
  float: left;
  display: block;
  margin-right: 2.35765%;
  width: 31.76157%;
  margin-left: 8.5298%; }
  main aside:last-child {
    margin-right: 0; }

/*html {*/
/*background-color: #F6F6F7;*/
/*}*/
body {
  background-color: white;
  box-shadow: 0 0 10px rgba(76, 76, 76, 0.7); }

body main {
  max-width: 960px;
  margin-left: auto;
  margin-right: auto;
  margin-top: 1px; }
  body main:after {
    clear: both;
    content: "";
    display: table; }

#ads img {
  float: left;
  display: block;
  margin-right: 2.35765%;
  width: 31.76157%; }
  #ads img:last-child {
    margin-right: 0; }

#news {
  float: left;
  display: block;
  margin-right: 2.35765%;
  width: 100%; }
  #news:last-child {
    margin-right: 0; }
  #news ul {
    list-style: none;
    padding: 0; }
  #news li {
    float: left;
    display: block;
    margin-right: 2.35765%;
    width: 31.76157%;
    margin-top: 30px; }
    #news li:last-child {
      margin-right: 0; }
  #news li:nth-child(3n) {
    margin-right: 0; }
  #news article {
    position: relative;
    max-height: 400px;
    overflow: hidden;
    text-overflow: ellipsis; }
    #news article img {
      width: 100%; }
  #news header {
    height: 200px; }
  #news section:after {
    content: "";
    height: 200px;
    width: 100%;
    position: absolute;
    left: 0;
    bottom: 0;
    background: linear-gradient(transparent 50%, white); }
  #news a {
    color: black; }

.news {
  float: left;
  display: block;
  margin-right: 2.35765%;
  width: 100%; }
  .news:last-child {
    margin-right: 0; }
  .news ul {
    list-style: none;
    padding: 0; }
  .news li {
    float: left;
    display: block;
    margin-right: 2.35765%;
    width: 31.76157%;
    margin-top: 30px; }
    .news li:last-child {
      margin-right: 0; }
  .news li:nth-child(3n) {
    margin-right: 0; }
  .news article {
    position: relative;
    max-height: 400px;
    overflow: hidden;
    text-overflow: ellipsis; }
    .news article img {
      width: 100%; }
  .news header {
    height: 200px; }
  .news section:after {
    content: "";
    height: 200px;
    width: 100%;
    position: absolute;
    left: 0;
    bottom: 0;
    background: linear-gradient(transparent 50%, white); }
  .news a {
    color: black; }

.browserupgrade {
  margin: 0.2em 0;
  background: #ccc;
  color: #000;
  padding: 0.2em 0; }

ol > li {
  background-color: F4F5F7;
  background-image: -webkit-linear-gradient( right , #FFF, #F4F5F7);
  background-image: linear-gradient(to left, #FFF, #F4F5F7);
  float: left;
  font-family: "Lucida Grande", "Tahoma", "Verdana", "Arial", sans-serif;
  position: relative;
  -webkit-transition: all 0.8s;
  -moz-transition: all 0.8s;
  transition: all 0.8s; }
  ol > li:after {
    content: " ";
    height: 23px;
    position: absolute;
    top: 10px;
    right: -13px;
    bottom: 0;
    left: 0;
    -webkit-transform: rotate(45deg) skew(20deg, 30deg);
    -moz-transform: rotate(45deg) skew(20deg, 30deg);
    -ms-transform: rotate(45deg) skew(20deg, 30deg);
    -o-transform: rotate(45deg) skew(20deg, 30deg);
    transform: rotate(45deg) skew(20deg, 30deg);
    width: 23px; }

.parent {
  -webkit-box-align: stretch;
  -moz-box-align: stretch;
  box-align: stretch;
  -webkit-align-items: stretch;
  -moz-align-items: stretch;
  -ms-align-items: stretch;
  -o-align-items: stretch;
  align-items: stretch;
  -ms-flex-align: stretch;
  display: -webkit-box;
  display: -moz-box;
  display: box;
  display: -webkit-flex;
  display: -moz-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: horizontal;
  -moz-box-orient: horizontal;
  box-orient: horizontal;
  -webkit-box-direction: normal;
  -moz-box-direction: normal;
  box-direction: normal;
  -webkit-flex-direction: row;
  -moz-flex-direction: row;
  flex-direction: row;
  -ms-flex-direction: row;
  -webkit-box-pack: start;
  -moz-box-pack: start;
  box-pack: start;
  -webkit-justify-content: flex-start;
  -moz-justify-content: flex-start;
  -ms-justify-content: flex-start;
  -o-justify-content: flex-start;
  justify-content: flex-start;
  -ms-flex-pack: start; }

.parent > .child {
  -webkit-box-flex: 1;
  -moz-box-flex: 1;
  box-flex: 1;
  -webkit-flex: 1;
  -moz-flex: 1;
  -ms-flex: 1;
  flex: 1; }

#main-news article {
  font-family: Adelle, Georgia, serif;
  padding: 10px;
  font-size: 20px;
  position: relative;
  float: left;
  display: block;
  margin-right: 2.35765%;
  width: 48.82117%;
  margin-right: 0;
  width: 50%;
  height: 270px;
  /* 16:9 ratio */
  background: linear-gradient(135deg, rgba(65, 119, 17, 0.7), rgba(220, 66, 37, 0.7));
  color: white; }
  #main-news article:last-child {
    margin-right: 0; }
  #main-news article header {
    position: absolute;
    top: 0; }
  #main-news article section {
    position: absolute;
    bottom: 0; }
  #main-news article img {
    z-index: -1;
    left: 0;
    top: 0;
    position: absolute;
    /*margin: auto;*/
    height: 100%;
    /*max-height: 100%;*/
    width: 100%;
    /*max-width: 100%;*/ }

#shows {
  float: left;
  display: block;
  margin-right: 2.35765%;
  width: 74.41059%; }
  #shows:last-child {
    margin-right: 0; }
  #shows ul {
    list-style: none;
    padding: 0; }
  #shows li {
    float: left;
    display: block;
    margin-right: 3.16844%;
    width: 31.22104%;
    margin-top: 30px; }
    #shows li:last-child {
      margin-right: 0; }
  #shows li:nth-child(3n) {
    margin-right: 0; }
  #shows article {
    position: relative;
    max-height: 400px;
    overflow: hidden;
    text-overflow: ellipsis; }
    #shows article img {
      width: 100%; }
  #shows header {
    height: 200px; }
  #shows section:after {
    content: "";
    height: 200px;
    width: 100%;
    position: absolute;
    left: 0;
    bottom: 0;
    background: linear-gradient(transparent 50%, white); }
  #shows a {
    color: black; }

#shows {
  margin: 0;
  padding: 0; }

#shows ul {
  list-style: none;
  margin: 0;
  padding: 0;
  text-align: center; }

#shows li {
  overflow: hidden;
  margin-right: 10px;
  margin-top: 0;
  margin-bottom: 10px;
  padding: 0; }

#shows li h3 {
  border-radius: 0px 0px 5px 5px;
  margin: 0;
  text-align: center;
  height: 15%; }

#mejibo {
  background-color: #CD20BE; }

#santa-rocksalia {
  background-color: #F9A433; }

#titulares-sport {
  background-color: #78C82C;
  font-size: 1em; }

#sonico-jardin {
  background-color: #389BC9;
  font-size: 0.8em; }

#sonando-diario {
  background-color: #BC3017; }

#ustream {
  float: left;
  display: block;
  margin-right: 2.35765%;
  width: 23.23176%; }
  #ustream:last-child {
    margin-right: 0; }

.old-news .views-field-title, #shows .text-container {
  background: #251e1c;
  background: rgba(37, 30, 28, 0.9);
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr=rgba(229, 37, 30, 0.1098), endColorstr=rgba(229, 37, 30, 0.1098));
  -ms-filter: "progid:DXImageTransform.Microsoft.gradient(startColorstr=rgba(229, 37, 30, 0.1098), endColorstr=rgba(229, 37, 30, 0.1098))"; }

.ie6-8 .old-news .views-field-title, .ie6-8 #shows .text-container {
  background: transparent; }

.ie6 .old-news .views-field-field-image {
  float: left; }

#shows .outer-container {
  border-radius: 5px;
  border: 1px solid black;
  box-shadow: 0px 10px 10px #ccc; }

#shows .container {
  text-align: center;
  position: relative; }

#shows .text-container {
  position: absolute;
  bottom: 0;
  left: 0;
  color: white;
  width: 100%;
  font-size: 1em; }

#shows .field-content {
  -webkit-font-smoothing: antialiased;
  border-collapse: collapse;
  color: white;
  display: block;
  font-family: 'Trebuchet MS', 'Helvetica Neue', Arial, Helvetica, sans-serif;
  font-size: 13.008px;
  font-weight: bold;
  line-height: 19.512px;
  text-align: center;
  zoom: 1; }

#shows p {
  /*margin-top: 0em;*/
  /*margin-bottom: 0em;*/
  -webkit-font-smoothing: antialiased;
  border-collapse: collapse;
  color: white;
  display: block;
  font-family: 'Trebuchet MS', 'Helvetica Neue', Arial, Helvetica, sans-serif;
  font-size: 13.008px;
  height: 19px;
  line-height: 19.512px;
  margin-bottom: 0px;
  margin-top: 0px;
  padding-bottom: 0px;
  padding-left: 0px;
  padding-right: 0px;
  padding-top: 0px;
  text-align: center;
  width: 161px;
  zoom: 1; }

#shows .views-field-field-schedule {
  font-weight: bold; }

#shows .views-field-field-days {
  font-weight: bold; }

#shows img {
  display: block; }

#shows .views-field-title, #shows .views-field-title a {
  text-align: center;
  font-size: 1.2em;
  color: black;
  text-shadow: rgba(255, 255, 255, 0.9) 0px 3px 3px;
  font-weight: bolder;
  text-decoration: none;
  -webkit-font-smoothing: antialiased;
  border-collapse: collapse;
  color: black;
  display: block;
  font-family: 'Trebuchet MS', 'Helvetica Neue', Arial, Helvetica, sans-serif;
  font-size: 15.6096px;
  font-weight: bold;
  height: 23.4062px;
  line-height: 23.4144px;
  text-align: center;
  text-decoration: none;
  text-shadow: rgba(255, 255, 255, 0.901961) 0px 3px 3px;
  zoom: 1; }

#shows .views-field-title {
  height: 1.5em; }

#sonando-diario {
  background-color: #BE3117; }

#santa-rocksalia {
  background-color: #F9A433; }

#sound-garden {
  background-color: #389BCA;
  font-size: 0.9em; }

#titulares-sport {
  background-color: #78C82C;
  font-size: 1.1em; }

#mejibo {
  background-color: #CE21BF; }

#sidebar {
  float: left;
  display: block;
  margin-right: 2.35765%;
  width: 23.23176%; }
  #sidebar:last-child {
    margin-right: 0; }

body {
  font: 16px/26px Helvetica, Helvetica Neue, Arial; }
/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3ZlbmRvci9ub3JtYWxpemUiLCJtYWluLmNzcyIsIi4uL2dyaWQvYm94LXNpemluZyIsIi4uL3V0aWxzL3ZhcmlhYmxlcyIsIi4uL2Jhc2UvYmFzZSIsIi4uL3V0aWxzL21peGlucyIsIi4uL2Jhc2UvZm9udHMiLCIuLi9iYXNlL3R5cG9ncmFwaHkiLCIuLi9iYXNlL2hlbHBlcnMiLCIuLi9iYXNlL3ByaW50IiwiLi4vbGF5b3V0L2hlYWRlciIsIi4uL2dyaWQvb3V0ZXItY29udGFpbmVyIiwiLi4vYWRkb25zL2NsZWFyZml4IiwiLi4vZ3JpZC9zcGFuLWNvbHVtbnMiLCIuLi9ncmlkL3ByaXZhdGUiLCIuLi9sYXlvdXQvZm9vdGVyIiwiLi4vbGF5b3V0L25hdmlnYXRpb24iLCIuLi9sYXlvdXQvZm9ybXMiLCIuLi9sYXlvdXQvc2lkZWJhciIsIi4uL2dyaWQvc2hpZnQiLCIuLi9sYXlvdXQvcGFnZSIsIi4uL2NvbXBvbmVudHMvdXBncmFkZSIsIi4uL3BhZ2VzL2hvbWUiLCIuLi9jc3MzL2JhY2tncm91bmQtaW1hZ2UiLCIuLi9oZWxwZXJzL2xpbmVhci1zaWRlLWNvcm5lci1wYXJzZXIiLCIuLi9oZWxwZXJzL2xpbmVhci1ncmFkaWVudC1wYXJzZXIiLCIuLi9hZGRvbnMvZm9udC1zdGFja3MiLCIuLi9hZGRvbnMvcHJlZml4ZXIiLCIuLi9hZGRvbnMvcG9zaXRpb24iLCIuLi9jc3MzL2ZsZXgtYm94IiwiLi4vdGhlbWVzL2RlZmF1bHQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsNEVBQTRFO0FBRTVFOzs7O0dBSUc7QUFFSDtFQUNFLHdCQUF3QjtFQUFFLE9BQU87RUFDakMsMkJBQTJCO0VBQUUsT0FBTztFQUNwQywrQkFBK0I7RUFBRSxPQUFPLEVBSHBDOztBQU1OOztHQUVHO0FBRUg7RUFDRSxVQUFVLEVBRE47O0FBSU47Z0ZBQ2dGO0FBRWhGOzs7OztHQUtHO0FBY0g7Ozs7Ozs7Ozs7Ozs7RUFDRSxlQUFlLEVBRFI7O0FBSVQ7OztHQUdHO0FBS0g7Ozs7RUFDRSxzQkFBc0I7RUFBRSxPQUFPO0VBQy9CLHlCQUF5QjtFQUFFLE9BQU8sRUFGN0I7O0FBS1A7OztHQUdHO0FBRWlCO0VBQ2xCLGNBQWM7RUFDZCxVQUFVLEVBRlc7O0FBS3ZCOzs7R0FHRztBQ05IOztFRFVFLGNBQWMsRUFETjs7QUFJVjtnRkFDZ0Y7QUFFaEY7O0dBRUc7QUFFSDtFQUNFLDhCQUE4QixFQUQ3Qjs7QUFJSDs7O0dBR0c7QUFHRjs7RUFDQyxXQUFXLEVBREo7O0FBSVQ7Z0ZBQ2dGO0FBRWhGOztHQUVHO0FBRU87RUFDUiwwQkFBMEIsRUFEZjs7QUFJYjs7R0FFRztBQUdIOztFQUNFLGtCQUFrQixFQURaOztBQUlSOztHQUVHO0FBRUg7RUFDRSxtQkFBbUIsRUFEaEI7O0FBSUw7OztHQUdHO0FBRUg7RUFDRSxlQUFlO0VBQ2YsaUJBQWlCLEVBRmY7O0FBS0o7O0dBRUc7QUFFSDtFQUNFLGlCQUFpQjtFQUNqQixZQUFZLEVBRlI7O0FBS047O0dBRUc7QUFFSDtFQUNFLGVBQWUsRUFEVjs7QUFJUDs7R0FFRztBQUdIOztFQUNFLGVBQWU7RUFDZixlQUFlO0VBQ2YsbUJBQW1CO0VBQ25CLHlCQUF5QixFQUp0Qjs7QUFPTDtFQUNFLFlBQVksRUFEVDs7QUFJTDtFQUNFLGdCQUFnQixFQURiOztBQUlMO2dGQUNnRjtBQUVoRjs7R0FFRztBQUVIO0VBQ0UsVUFBVSxFQURQOztBQUlMOztHQUVHO0FBRVU7RUFDWCxpQkFBaUIsRUFESDs7QUFJaEI7Z0ZBQ2dGO0FBRWhGOztHQUVHO0FBRUg7RUFDRSxpQkFBZ0IsRUFEVjs7QUFJUjs7R0FFRztBQUVIO0VBQ0Usd0JBQXdCO0VBQ3hCLFVBQVUsRUFGUjs7QUFLSjs7R0FFRztBQUVIO0VBQ0UsZUFBZSxFQURaOztBQUlMOztHQUVHO0FBS0g7Ozs7RUFDRSxrQ0FBa0M7RUFDbEMsZUFBZSxFQUZYOztBQUtOO2dGQUNnRjtBQUVoRjs7O0dBR0c7QUFFSDs7Ozs7R0FLRztBQU1IOzs7OztFQUNFLGVBQWU7RUFBRSxPQUFPO0VBQ3hCLGNBQWM7RUFBRSxPQUFPO0VBQ3ZCLFVBQVU7RUFBRSxPQUFPLEVBSFg7O0FBTVY7O0dBRUc7QUFFSDtFQUNFLGtCQUFrQixFQURaOztBQUlSOzs7OztHQUtHO0FBR0g7O0VBQ0UscUJBQXFCLEVBRGY7O0FBSVI7Ozs7OztHQU1HO0FBS2dCOzs7RUFDakIsMkJBQTJCO0VBQUUsT0FBTztFQUNwQyxnQkFBZ0I7RUFBRSxPQUFPLEVBRkw7O0FBS3RCOztHQUVHO0FBR2dCOztFQUNqQixnQkFBZ0IsRUFESTs7QUFJdEI7O0dBRUc7QUFHRTs7RUFDSCxVQUFVO0VBQ1YsV0FBVyxFQUZZOztBQUt6Qjs7O0dBR0c7QUFFSDtFQUNFLG9CQUFvQixFQURmOztBQUlQOzs7Ozs7R0FNRztBQUdlOztFQUNoQix1QkFBdUI7RUFBRSxPQUFPO0VBQ2hDLFdBQVc7RUFBRSxPQUFPLEVBRkQ7O0FBS3JCOzs7O0dBSUc7QUFHaUI7O0VBQ2xCLGFBQWEsRUFEa0M7O0FBSWpEOzs7R0FHRztBQUVnQjtFQUNqQiw4QkFBOEI7RUFBRSxPQUFPO0VBQ3ZDLHdCQUF3QjtFQUFFLE9BQU8sRUFGYjs7QUFLdEI7Ozs7R0FJRztBQUdpQjs7RUFDbEIseUJBQXlCLEVBRHNCOztBQUlqRDs7R0FFRztBQUVIO0VBQ0UsMEJBQTBCO0VBQzFCLGNBQWE7RUFDYiwrQkFBOEIsRUFIdEI7O0FBTVY7OztHQUdHO0FBRUg7RUFDRSxVQUFVO0VBQUUsT0FBTztFQUNuQixXQUFXO0VBQUUsT0FBTyxFQUZkOztBQUtSOztHQUVHO0FBRUg7RUFDRSxlQUFlLEVBRFA7O0FBSVY7OztHQUdHO0FBRUg7RUFDRSxrQkFBa0IsRUFEVjs7QUFJVjtnRkFDZ0Y7QUFFaEY7O0dBRUc7QUFFSDtFQUNFLDBCQUEwQjtFQUMxQixrQkFBa0IsRUFGYjs7QUFNUDs7RUFDRSxXQUFXLEVBRFQ7O0FFbGFGO0VBQ0UsdUJBQXVCLEVBRG5COztBQU9IOzs7RUFDQyxvQkFBb0IsRUFEWDs7QUNnRWYsMENBQTBDO0FDdEUxQzs7R0FFRztBQUNIO0VBQ0UsdUJBQXVCLEVBRG5COztBQUlOOzs7OztHQUtHO0FBQ1k7RUFDYixvQkFBb0IsRUFERTs7QUFJeEI7O0dBRUc7QUFDSDtFQUNFLGVEQ21CO0VDQW5CLHNCQUFzQixFQUZyQjtFQ0xFOzs7SURVRCxZRFBhO0lDUWIsMkJBQTJCLEVDWGxCOztBRGViO0VBQ0ksWUFBWTtFQUNaLGVBQWU7RUFDZixpQkFBaUIsRUFIZjs7QUFNTjtFQUNJLG9CQUFvQjtFQUNwQixrQkFBa0IsRUFGSjs7QUFLbEI7RUFDSSxvQkFBb0I7RUFDcEIsa0JBQWtCLEVBRlQ7O0FBS2I7RUFDSSxlQUFlO0VBQ2YsWUFBWTtFQUNaLFVBQVU7RUFDViwyQkFBMkI7RUFDM0IsY0FBYztFQUNkLFdBQVcsRUFOWDs7QUFjSjs7Ozs7O0VBQ0ksdUJBQXVCLEVBRHBCOztBQUlQO0VBQ0ksVUFBVTtFQUNWLFVBQVU7RUFDVixXQUFXLEVBSEw7O0FBTVY7RUFDSSxpQkFBaUIsRUFEWDs7QUV2RVY7RUFBYSxvQkFBb0I7RUFBRSw2QkFBUSxFQUFBOztBQ0gzQzs7R0FFRztBQUNIO0VBQ0UsWUprQmU7RUlqQmYsOEdKS3VHLEVJUG5HOztBQ0NOOztHQUVHO0FBQ007RUFDUCxZQUFZO0VBQ1osWUFBWTtFQUNaLGVBQWUsRUFIQzs7QUFPVDs7RUFDTCxhQUFhO0VBQ2IsZUFBZSxFQUZGOztBQUtSO0VBQ0wsWUFBWSxFQURDOztBQUlqQjtHQUNJLFFBQVMsRUFERjs7QUFJWDs7Ozs7R0FLRztBQUNIO0VBQ0UsaUJMYWU7RUtiUSxPQUFPO0VBQzlCLGtCQUFrQjtFQUFFLE9BQU87RUFDM0IsbUJBQW1CO0VBQUUsT0FBTztFQUM1QixtQkFBbUI7RUFBRSxPQUFPO0VBQzVCLG9CQUFvQjtFQUFFLE9BQU87RUFDN0IsWUFBWTtFQUFFLE9BQU8sRUFOWDs7QUFTWjs7OztHQUlHO0FBQ0g7RUFDRSxpQkFBaUI7RUFDakIsV0FBVztFQUFFLE9BQU87RUFDcEIsa0JBQWtCO0VBQ2xCLG9CQUFvQixFQUpWOztBQU9aOzs7O0dBSUc7QUFDSDtFQUNFLFVBQVU7RUFDVixvQkFBVTtFQUNWLFlBQVk7RUFDWixhQUFhO0VBQ2IsaUJBQWlCO0VBQ2pCLFdBQVc7RUFDWCxtQkFBbUI7RUFDbkIsV0FBVyxFQVJLOztBQVdsQjtFQUNJLHlCQUF5QjtFQUN6QixtQkFBbUIsRUFGZDs7QUFLVDtFQUNJLFVBQVU7RUFDVixvQkFBVTtFQUNWLFlBQVk7RUFDWixhQUFhO0VBQ2IsaUJBQWlCO0VBQ2pCLFdBQVc7RUFDWCxtQkFBbUI7RUFDbkIsV0FBVyxFQVJFOztBQVlROztFQUNyQixXQUFXO0VBQ1gsYUFBYTtFQUNiLFVBQVU7RUFDVixrQkFBa0I7RUFDbEIsaUJBQWlCO0VBQ2pCLFlBQVksRUFOaUI7O0FBU2pDO0VBQ0ksbUJBQW1CLEVBRFg7O0FDaEdaO0VBR0s7OztJQUNHLG1DQUFtQztJQUNuQyx1QkFBdUI7SUFDdkIsNEJBQTRCO0lBQzVCLDZCQUE2QixFQUp4QjtFQVFSOztJQUNHLDJCQUEyQixFQURwQjtFQUlKO0lBQ0gsNkJBQTRCLEVBRGpCO0VBSUo7SUFDUCw4QkFBNkIsRUFEZDtFQUtHOztJQUNsQixZQUFZLEVBRGM7RUFLOUI7O0lBQ0ksdUJBQXVCO0lBQ3ZCLHlCQUF5QixFQUZqQjtFQUtaO0lBQ0ksNEJBQTRCLEVBRHpCO0VBS1A7O0lBQ0kseUJBQXlCLEVBRHhCO0VBSUw7SUFDSSwyQkFBMkIsRUFEMUI7RUFNTDs7O0lBQ0ksV0FBVztJQUNYLFVBQVUsRUFGVjtFQU1KOztJQUNJLHdCQUF3QixFQUR4QixFQUFBOztBQ25EUjtFQzRCRSxpQlJlZTtFUWRmLGtCQUNhO0VBRGIsbUJBRWMsRUQ5QmY7RUVjRTtJQUNDLFlBQVk7SUFDWixZQUFZO0lBQ1osZUFBZSxFQUhQOztBRlZaO0VBRUMsMEJBQTBCO0VBQUUsWUFBWTtFQUFFLGFBQWE7RUFDdkQsNkNBQTZDO0VBQzdDLG9CQUFvQjtFQUNwQixhQUFhO0VHcURWLFlBQU07RUFHSixlQUFlO0VBZWYsdUJDdEVjO0VEdUVkLGlCQzVFYyxFSkFuQjtFQUtBO0lBQ0MsVUFBVTtJQUNWLFdBQVcsRUFGUDtFQUlMO0lBQ0Msa0JBQWtCO0lBQ2xCLFdBQVc7SUFDWCxjQUFhLEVBSFY7RUFLSjtJQUNDLFdBQVc7SUFDWCxjQUFhLEVBRlg7RUdnRUc7SUFDQyxnQkFBd0IsRUFEWjs7QUgxRHBCO0VBRUMsaUNBQWU7RUFDZixjQUFjLEVBRmQ7O0FLM0JJO0VBQ0osaUVBQTJCO0VBQXVDLFNBQVM7RUFDM0UsYUFBYTtFQUNiLGdCQUFnQjtFQUNoQixtQkFBbUIsRUFKUDs7QUNKYjtFTGdDRSxpQlJlZTtFUWRmLGtCQUNhO0VBRGIsbUJBRWMsRUtuQ0E7RUptQmI7SUFDQyxZQUFZO0lBQ1osWUFBWTtJQUNaLGVBQWUsRUFIUDs7QUlmTDtFQUNOLGlFQUEyQjtFQUFzQyxTQUFTO0VBQzFFLFlBQVk7RUFDWixzQkFBc0IsRUFIWDtFQUlYO0lBQ0MsZUFBYztJQUNkLGFBQVk7SUFDWixrQkFBaUIsRUFIZjtJQUlEO01BQ0EsMkJBQTJCLEVBRG5CO0lBR0M7TUFDVCxhQUFZLEVBRE87RUFJckI7SUFDQyxzQkFBc0I7SUFDdEIsc0JBQXNCO0lBQ3RCLFVBQVU7SUFDVixXQUFXLEVBSlI7RUFNSjtJQUNDLFlBQVk7SUFDWixxQkFBb0I7SUFDcEIsYUFBYTtJQUNiLCtCQUErQjtJQUMvQixnQ0FBZ0M7SUFDaEMsbUJBQW1CO0lBQ25CLGtCQUFrQjtJQUNsQixpQkFBaUIsRUFSZDtJQVNGO01BQ0Esa0JBQWtCLEVBREo7SUFHZDtNQUNBLG1CQUFtQixFQUROOztBQU1UO0VBQ04sc0JBQXNCLEVBRFg7RUFFWDtJQUNDLGFBQVksRUFEVjtJQUVEO01BQ0EsMkJBQTJCLEVBRG5CO0lBR0M7TUFDVCxhQUFZLEVBRE87RUFJckI7SUFDQyxzQkFBc0I7SUFDdEIsVUFBVTtJQUNWLFdBQVcsRUFIUjtFQUtKO0lBQ0MsWUFBWTtJQUNaLHFCQUFvQjtJQUNwQixhQUFhO0lBQ2IsbUJBQW1CLEVBSmhCOztBQzNETDtFQUNDLFlBQVksRUFEUDs7QUFHbUI7RUFDeEIsK0JBQThCO0VBQzlCLFVBQVU7RUFDVixVQUFVO0VBQ1YsOENBQTZDO0VBQzdDLGlEQUFnRDtFQUNoRCw4Q0FBNkM7RUFDN0MsWUFBWTtFQUNaLGNBQWMsRUFSYTs7QUFVRDtFQUMxQiwrQkFBOEI7RUFDOUIsMEJBQTBCO0VBQzFCLGFBQWE7RUFDYixVQUFVO0VBQ1YsWUFBWTtFQUNaLGNBQWMsRUFOZTs7QUNiekI7RUxtRUQsWUFBTTtFQUdKLGVBQWU7RUFlZix1QkN0RWM7RUR1RWQsaUJDNUVjO0VLbUNsQixxQkFBeUMsRUQ3Qy9CO0VMd0ZMO0lBQ0MsZ0JBQXdCLEVBRFo7O0FPeEZwQixVQUFVO0FBQ1QsOEJBQThCO0FBQy9CLEtBQUs7QUFFTDtFQUNDLHdCakJzRXVCO0VpQnJFdkIsMkNBQXlCLEVBRnBCOztBQUtEO0VUdUJILGlCUmVlO0VRZGYsa0JBQ2E7RUFEYixtQkFFYztFU3hCZixnQkFBZ0IsRUFGTjtFUlVSO0lBQ0MsWUFBWTtJQUNaLFlBQVk7SUFDWixlQUFlLEVBSFA7O0FRSlg7RVBvREcsWUFBTTtFQUdKLGVBQWU7RUFlZix1QkN0RWM7RUR1RWQsaUJDNUVjLEVNS2Q7RVB5RUM7SUFDQyxnQkFBd0IsRUFEWjs7QU9wRXBCO0VQK0NJLFlBQU07RUFHSixlQUFlO0VBZWYsdUJDdEVjO0VEdUVkLFlDNUVjLEVNVWI7RVBvRUE7SUFDQyxnQkFBd0IsRUFEWjtFT2xFbkI7SUFDQyxpQkFBaUI7SUFDakIsV0FBVyxFQUZSO0VBSUo7SVB5Q0csWUFBTTtJQUdKLGVBQWU7SUFlZix1QkN0RWM7SUR1RWQsaUJDNUVjO0lNa0JsQixpQkFBaUIsRUFGZDtJUDhERTtNQUNDLGdCQUF3QixFQURaO0VPMURKO0lBQ2QsZ0JBQWdCLEVBREM7RUFHbEI7SUFDQyxtQkFBbUI7SUFDbkIsa0JBQWtCO0lBQ2xCLGlCQUFpQjtJQUNqQix3QkFBd0IsRUFKaEI7SUFNUjtNQUNDLFlBQVksRUFEUjtFQUlOO0lBQ0MsY0FBYyxFQURQO0VBR0Q7SUFDTixZQUFZO0lBQ1osY0FBYTtJQUNiLFlBQVc7SUFDWCxtQkFBbUI7SUFDbkIsUUFBUTtJQUNSLFVBQVU7SUFDVixvREFBMkIsRUFQYjtFQVNmO0lBQ0MsYUFBYSxFQURYOztBQUtKO0VQT0ksWUFBTTtFQUdKLGVBQWU7RUFlZix1QkN0RWM7RUR1RWQsWUM1RWMsRU1rRGI7RVA0QkE7SUFDQyxnQkFBd0IsRUFEWjtFTzFCbkI7SUFDQyxpQkFBaUI7SUFDakIsV0FBVyxFQUZSO0VBSUo7SVBDRyxZQUFNO0lBR0osZUFBZTtJQWVmLHVCQ3RFYztJRHVFZCxpQkM1RWM7SU0wRGxCLGlCQUFpQixFQUZkO0lQc0JFO01BQ0MsZ0JBQXdCLEVBRFo7RU9sQko7SUFDZCxnQkFBZ0IsRUFEQztFQUdsQjtJQUNDLG1CQUFtQjtJQUNuQixrQkFBa0I7SUFDbEIsaUJBQWlCO0lBQ2pCLHdCQUF3QixFQUpoQjtJQU1SO01BQ0MsWUFBWSxFQURSO0VBSU47SUFDQyxjQUFjLEVBRFA7RUFHRDtJQUNOLFlBQVk7SUFDWixjQUFhO0lBQ2IsWUFBVztJQUNYLG1CQUFtQjtJQUNuQixRQUFRO0lBQ1IsVUFBVTtJQUNWLG9EQUEyQixFQVBiO0VBU2Y7SUFDQyxhQUFhLEVBRFg7O0FDL0ZKO0VBQ0ksZ0JBQWdCO0VBQ2hCLGlCQUFpQjtFQUNqQixZQUFZO0VBQ1osaUJBQWlCLEVBSko7O0FDS2Q7RUFDRCx5QkFBeUI7RUNpQ3pCLGtFQ3JCbUI7RURzQm5CLDBERXZDZTtFSE9mLFlBQVk7RUFDWix1RUlTdUU7RUpSdkUsbUJBQW1CO0VLeUJiLDZCTHhCdUI7RUs0QnZCLDBCTDVCdUI7RUt3Q3ZCLHFCTHhDdUIsRUFOeEI7RUFRSjtJQUNBLGFBQWE7SUFDYixhQUFhO0lNeUJkLG1CTnhCNEI7SU00QnhCLFVONUI4QjtJTTRCOUIsYU41Qm9DO0lNNEJwQyxVTjVCc0M7SU00QnRDLFFONUJ3QztJS21CdEMsb0RMbEJpQztJS3NCakMsaURMdEJpQztJSzBCakMsZ0RMMUJpQztJSzhCakMsK0NMOUJpQztJS2tDakMsNENMbENpQztJQUN0QyxZQUFZLEVBTEg7O0FBVVo7RUtZUSwyQkxYc0I7RUtldEIsd0JMZnNCO0VLMkJ0QixtQkwzQnNCO0VLV3RCLDZCTFhzQjtFS2V0QiwwQkxmc0I7RUttQnRCLHlCTG5Cc0I7RUt1QnRCLHdCTHZCc0I7RUsyQnRCLHFCTDNCc0I7RU82TjVCLHdCUDdONEI7RU82QzFCLHFCQUFxQjtFQUNyQixrQkFBa0I7RUFDbEIsYUFBYTtFQUdiLHNCQUFzQjtFQUN0QixtQkFBbUI7RUFDbkIscUJBQXFCO0VBQ3JCLGNBQWM7RUYxQ1YsK0JFb0ZtQjtFRmhGbkIsNEJFZ0ZtQjtFRnBFbkIsdUJFb0VtQjtFRnBGbkIsOEJFaUZZO0VGN0VaLDJCRTZFWTtFRmpFWixzQkVpRVk7RUZqRlosNEJMVHFCO0VLYXJCLHlCTGJxQjtFS3lCckIsb0JMekJxQjtFT2dIM0Isd0JQaEgyQjtFS1NyQix3QkUyS2E7RUZ2S2IscUJFdUthO0VGM0piLGdCRTJKYTtFRjNLYixvQ0xSNkI7RUtZN0IsaUNMWjZCO0VLZ0I3QixnQ0xoQjZCO0VLb0I3QiwrQkxwQjZCO0VLd0I3Qiw0Qkx4QjZCO0VPbU1uQyxxQkFoQm1CLEVQdkxaOztBQU9DO0VLS0Ysb0JMSlM7RUtRVCxpQkxSUztFS29CVCxZTHBCUztFS0lULGdCTEpTO0VLUVQsYUxSUztFS1lULFlMWlM7RUtvQlQsUUxwQlMsRUFEQzs7QUFLakI7RUFDQyxvQ0FBb0M7RUFDcEMsY0FBYztFQUNkLGdCQUFnQjtFQUNoQixtQkFBbUI7RVQ0QmpCLFlBQU07RUFHSixlQUFlO0VBZWYsdUJDdEVjO0VEdUVkLGlCQzVFYztFUStCbEIsZ0JBQWdCO0VBQ2hCLFdBQVc7RUFDWCxjQUFtQjtFQUFrQixnQkFBZ0I7RUFDckQsb0ZBQTJCO0VBQzNCLGFBQWEsRUFWTDtFVHFESDtJQUNDLGdCQUF3QixFQURaO0VTMUNsQjtJQUNDLG1CQUFtQjtJQUNuQixPQUFPLEVBRkE7RUFJUjtJQUNDLG1CQUFtQjtJQUNuQixVQUFVLEVBRkY7RUFJVDtJQUNDLFlBQVk7SUFDWixRQUFRO0lBQ1IsT0FBTztJQUNQLG1CQUFtQjtJQUNuQixpQkFBaUI7SUFDakIsYUFBYTtJQUNiLHFCQUFxQjtJQUNyQixZQUFZO0lBQ1osb0JBQW9CLEVBVGhCOztBQWVQO0VURkksWUFBTTtFQUdKLGVBQWU7RUFlZix1QkN0RWM7RUR1RWQsaUJDNUVjLEVRMkRaO0VUbUJEO0lBQ0MsZ0JBQXdCLEVBRFo7RVNqQm5CO0lBQ0MsaUJBQWlCO0lBQ2pCLFdBQVcsRUFGUjtFQUlKO0lUUkcsWUFBTTtJQUdKLGVBQWU7SUFlZix1QkN0RWM7SUR1RWQsaUJDNUVjO0lRbUVsQixpQkFBaUIsRUFGZDtJVGFFO01BQ0MsZ0JBQXdCLEVBRFo7RVNUSjtJQUNkLGdCQUFnQixFQURDO0VBR2xCO0lBQ0MsbUJBQW1CO0lBQ25CLGtCQUFrQjtJQUNsQixpQkFBaUI7SUFDakIsd0JBQXdCLEVBSmhCO0lBTVI7TUFDQyxZQUFZLEVBRFI7RUFJTjtJQUNDLGNBQWMsRUFEUDtFQUdEO0lBQ04sWUFBWTtJQUNaLGNBQWE7SUFDYixZQUFXO0lBQ1gsbUJBQW1CO0lBQ25CLFFBQVE7SUFDUixVQUFVO0lBQ1Ysb0RBQTJCLEVBUGI7RUFTZjtJQUNDLGFBQWEsRUFEWDs7QUFLSjtFQUNDLFVBQVU7RUFDVixXQUFXLEVBRko7O0FBS0Q7RUFDTixpQkFBaUI7RUFDakIsVUFBVTtFQUNWLFdBQVc7RUFDWCxtQkFBbUIsRUFKVDs7QUFNSjtFQUNOLGlCQUFpQjtFQUNqQixtQkFBbUI7RUFDbkIsY0FBYztFQUNkLG9CQUFvQjtFQUNwQixXQUFXLEVBTEQ7O0FBT0Q7RUFDVCwrQkFBOEI7RUFDOUIsVUFBVTtFQUNWLG1CQUFtQjtFQUNuQixZQUFZLEVBSkM7O0FBTWQ7RUFBVSwwQkFBMEIsRUFBM0I7O0FBQ1Q7RUFBbUIsMEJBQTBCLEVBQTNCOztBQUNsQjtFQUFtQiwwQkFBMEI7RUFBRSxlQUFlLEVBQTVDOztBQUNsQjtFQUFpQiwwQkFBMEI7RUFBRSxpQkFBaUIsRUFBOUM7O0FBQ2hCO0VBQWtCLDBCQUEwQixFQUEzQjs7QUFFakI7RVR4RUksWUFBTTtFQUdKLGVBQWU7RUFlZix1QkN0RWM7RUR1RWQsaUJDNUVjLEVRaUlWO0VUbkRIO0lBQ0MsZ0JBQXdCLEVBRFo7O0FTdURpQjtFQUNqQyxvQkFBZTtFQUNmLGtDQUFnQjtFQUNoQixtSUFBa0c7RUFDbEcseUlBQXlHLEVBSnZEOztBQU1IO0VBQy9DLHdCQUF3QixFQUR3Qzs7QUFHckQ7RUFDWCxZQUFZLEVBRHlCOztBQUlsQztFQUNILG1CQUFtQjtFQUNuQix3QkFBd0I7RUFDeEIsK0JBQThCLEVBSFQ7O0FBS2xCO0VBQ0gsbUJBQW1CO0VBQ25CLG1CQUFtQixFQUZKOztBQUlaO0VBQ0gsbUJBQW1CO0VBQ25CLFVBQVU7RUFDYixRQUFRO0VBQ0wsYUFBYTtFQUNiLFlBQVk7RUFDWixlQUFlLEVBTks7O0FBUWpCO0VBRVAsb0NBQW9DO0VBQ3BDLDBCQUEwQjtFQUMxQixhQUFVO0VBQ1YsZUFBZTtFQUNmLDRFQUE0RTtFQUM1RSxvQkFBb0I7RUFDcEIsa0JBQWtCO0VBQ2xCLHNCQUFzQjtFQUN0QixtQkFBbUI7RUFDbkIsUUFBUSxFQVhlOztBQWNoQjtFQUNILG9CQUFvQjtFQUNwQix1QkFBdUI7RUFFM0Isb0NBQW9DO0VBQ3BDLDBCQUEwQjtFQUMxQixhQUFVO0VBQ1YsZUFBZTtFQUNmLDRFQUE0RTtFQUM1RSxvQkFBb0I7RUFDcEIsYUFBYTtFQUNiLHNCQUFzQjtFQUN0QixtQkFBbUI7RUFDbkIsZ0JBQWdCO0VBQ2hCLG9CQUFvQjtFQUNwQixrQkFBa0I7RUFDbEIsbUJBQW1CO0VBQ25CLGlCQUFpQjtFQUNqQixtQkFBbUI7RUFDbkIsYUFBYTtFQUNiLFFBQVEsRUFwQkU7O0FBdUJIO0VBQ0gsa0JBQWtCLEVBRGM7O0FBRzdCO0VBQ0gsa0JBQWtCLEVBRFU7O0FBR3pCO0VBQ0gsZUFBZSxFQURQOztBQUd5QztFQUNqRCxtQkFBbUI7RUFDbkIsaUJBQWlCO0VBQ2pCLGFBQWE7RUFDYixrREFBaUQ7RUFDakQsb0JBQW9CO0VBQ3BCLHNCQUFzQjtFQUd6QixvQ0FBb0M7RUFDcEMsMEJBQTBCO0VBQzFCLGFBQVU7RUFDVixlQUFlO0VBQ2YsNEVBQTRFO0VBQzVFLHFCQUFxQjtFQUNyQixrQkFBa0I7RUFDbEIsa0JBQWtCO0VBQ2xCLHVCQUF1QjtFQUN2QixtQkFBbUI7RUFDbkIsc0JBQXNCO0VBQ3RCLHVEQUFzRDtFQUN0RCxRQUFRLEVBckIrQzs7QUF1QmpEO0VBQ0gsY0FBYyxFQURTOztBQUczQjtFQUNJLDBCQUEwQixFQURiOztBQUdqQjtFQUNJLDBCQUEwQixFQURaOztBQUdsQjtFQUNJLDBCQUEwQjtFQUMxQixpQkFBaUIsRUFGTjs7QUFJZjtFQUNJLDBCQUEwQjtFQUMxQixpQkFBaUIsRUFGSDs7QUFJbEI7RUFDSSwwQkFBMEIsRUFEckI7O0FBSVQ7RVRwTUksWUFBTTtFQUdKLGVBQWU7RUFlZix1QkN0RWM7RUR1RWQsaUJDNUVjLEVRNlBWO0VUL0tIO0lBQ0MsZ0JBQXdCLEVBRFo7O0FpQm5GcEI7RUFDSSxpREFBZ0QsRUFEOUMiLCJmaWxlIjoibWFpbi5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgbm9ybWFsaXplLmNzcyB2My4wLjMgfCBNSVQgTGljZW5zZSB8IGdpdGh1Yi5jb20vbmVjb2xhcy9ub3JtYWxpemUuY3NzICovXG5cbi8qKlxuICogMS4gU2V0IGRlZmF1bHQgZm9udCBmYW1pbHkgdG8gc2Fucy1zZXJpZi5cbiAqIDIuIFByZXZlbnQgaU9TIGFuZCBJRSB0ZXh0IHNpemUgYWRqdXN0IGFmdGVyIGRldmljZSBvcmllbnRhdGlvbiBjaGFuZ2UsXG4gKiAgICB3aXRob3V0IGRpc2FibGluZyB1c2VyIHpvb20uXG4gKi9cblxuaHRtbCB7XG4gIGZvbnQtZmFtaWx5OiBzYW5zLXNlcmlmOyAvKiAxICovXG4gIC1tcy10ZXh0LXNpemUtYWRqdXN0OiAxMDAlOyAvKiAyICovXG4gIC13ZWJraXQtdGV4dC1zaXplLWFkanVzdDogMTAwJTsgLyogMiAqL1xufVxuXG4vKipcbiAqIFJlbW92ZSBkZWZhdWx0IG1hcmdpbi5cbiAqL1xuXG5ib2R5IHtcbiAgbWFyZ2luOiAwO1xufVxuXG4vKiBIVE1MNSBkaXNwbGF5IGRlZmluaXRpb25zXG4gICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG4vKipcbiAqIENvcnJlY3QgYGJsb2NrYCBkaXNwbGF5IG5vdCBkZWZpbmVkIGZvciBhbnkgSFRNTDUgZWxlbWVudCBpbiBJRSA4LzkuXG4gKiBDb3JyZWN0IGBibG9ja2AgZGlzcGxheSBub3QgZGVmaW5lZCBmb3IgYGRldGFpbHNgIG9yIGBzdW1tYXJ5YCBpbiBJRSAxMC8xMVxuICogYW5kIEZpcmVmb3guXG4gKiBDb3JyZWN0IGBibG9ja2AgZGlzcGxheSBub3QgZGVmaW5lZCBmb3IgYG1haW5gIGluIElFIDExLlxuICovXG5cbmFydGljbGUsXG5hc2lkZSxcbmRldGFpbHMsXG5maWdjYXB0aW9uLFxuZmlndXJlLFxuZm9vdGVyLFxuaGVhZGVyLFxuaGdyb3VwLFxubWFpbixcbm1lbnUsXG5uYXYsXG5zZWN0aW9uLFxuc3VtbWFyeSB7XG4gIGRpc3BsYXk6IGJsb2NrO1xufVxuXG4vKipcbiAqIDEuIENvcnJlY3QgYGlubGluZS1ibG9ja2AgZGlzcGxheSBub3QgZGVmaW5lZCBpbiBJRSA4LzkuXG4gKiAyLiBOb3JtYWxpemUgdmVydGljYWwgYWxpZ25tZW50IG9mIGBwcm9ncmVzc2AgaW4gQ2hyb21lLCBGaXJlZm94LCBhbmQgT3BlcmEuXG4gKi9cblxuYXVkaW8sXG5jYW52YXMsXG5wcm9ncmVzcyxcbnZpZGVvIHtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrOyAvKiAxICovXG4gIHZlcnRpY2FsLWFsaWduOiBiYXNlbGluZTsgLyogMiAqL1xufVxuXG4vKipcbiAqIFByZXZlbnQgbW9kZXJuIGJyb3dzZXJzIGZyb20gZGlzcGxheWluZyBgYXVkaW9gIHdpdGhvdXQgY29udHJvbHMuXG4gKiBSZW1vdmUgZXhjZXNzIGhlaWdodCBpbiBpT1MgNSBkZXZpY2VzLlxuICovXG5cbmF1ZGlvOm5vdChbY29udHJvbHNdKSB7XG4gIGRpc3BsYXk6IG5vbmU7XG4gIGhlaWdodDogMDtcbn1cblxuLyoqXG4gKiBBZGRyZXNzIGBbaGlkZGVuXWAgc3R5bGluZyBub3QgcHJlc2VudCBpbiBJRSA4LzkvMTAuXG4gKiBIaWRlIHRoZSBgdGVtcGxhdGVgIGVsZW1lbnQgaW4gSUUgOC85LzEwLzExLCBTYWZhcmksIGFuZCBGaXJlZm94IDwgMjIuXG4gKi9cblxuW2hpZGRlbl0sXG50ZW1wbGF0ZSB7XG4gIGRpc3BsYXk6IG5vbmU7XG59XG5cbi8qIExpbmtzXG4gICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG4vKipcbiAqIFJlbW92ZSB0aGUgZ3JheSBiYWNrZ3JvdW5kIGNvbG9yIGZyb20gYWN0aXZlIGxpbmtzIGluIElFIDEwLlxuICovXG5cbmEge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcbn1cblxuLyoqXG4gKiBJbXByb3ZlIHJlYWRhYmlsaXR5IG9mIGZvY3VzZWQgZWxlbWVudHMgd2hlbiB0aGV5IGFyZSBhbHNvIGluIGFuXG4gKiBhY3RpdmUvaG92ZXIgc3RhdGUuXG4gKi9cblxuYTphY3RpdmUsXG5hOmhvdmVyIHtcbiAgb3V0bGluZTogMDtcbn1cblxuLyogVGV4dC1sZXZlbCBzZW1hbnRpY3NcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cbi8qKlxuICogQWRkcmVzcyBzdHlsaW5nIG5vdCBwcmVzZW50IGluIElFIDgvOS8xMC8xMSwgU2FmYXJpLCBhbmQgQ2hyb21lLlxuICovXG5cbmFiYnJbdGl0bGVdIHtcbiAgYm9yZGVyLWJvdHRvbTogMXB4IGRvdHRlZDtcbn1cblxuLyoqXG4gKiBBZGRyZXNzIHN0eWxlIHNldCB0byBgYm9sZGVyYCBpbiBGaXJlZm94IDQrLCBTYWZhcmksIGFuZCBDaHJvbWUuXG4gKi9cblxuYixcbnN0cm9uZyB7XG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xufVxuXG4vKipcbiAqIEFkZHJlc3Mgc3R5bGluZyBub3QgcHJlc2VudCBpbiBTYWZhcmkgYW5kIENocm9tZS5cbiAqL1xuXG5kZm4ge1xuICBmb250LXN0eWxlOiBpdGFsaWM7XG59XG5cbi8qKlxuICogQWRkcmVzcyB2YXJpYWJsZSBgaDFgIGZvbnQtc2l6ZSBhbmQgbWFyZ2luIHdpdGhpbiBgc2VjdGlvbmAgYW5kIGBhcnRpY2xlYFxuICogY29udGV4dHMgaW4gRmlyZWZveCA0KywgU2FmYXJpLCBhbmQgQ2hyb21lLlxuICovXG5cbmgxIHtcbiAgZm9udC1zaXplOiAyZW07XG4gIG1hcmdpbjogMC42N2VtIDA7XG59XG5cbi8qKlxuICogQWRkcmVzcyBzdHlsaW5nIG5vdCBwcmVzZW50IGluIElFIDgvOS5cbiAqL1xuXG5tYXJrIHtcbiAgYmFja2dyb3VuZDogI2ZmMDtcbiAgY29sb3I6ICMwMDA7XG59XG5cbi8qKlxuICogQWRkcmVzcyBpbmNvbnNpc3RlbnQgYW5kIHZhcmlhYmxlIGZvbnQgc2l6ZSBpbiBhbGwgYnJvd3NlcnMuXG4gKi9cblxuc21hbGwge1xuICBmb250LXNpemU6IDgwJTtcbn1cblxuLyoqXG4gKiBQcmV2ZW50IGBzdWJgIGFuZCBgc3VwYCBhZmZlY3RpbmcgYGxpbmUtaGVpZ2h0YCBpbiBhbGwgYnJvd3NlcnMuXG4gKi9cblxuc3ViLFxuc3VwIHtcbiAgZm9udC1zaXplOiA3NSU7XG4gIGxpbmUtaGVpZ2h0OiAwO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIHZlcnRpY2FsLWFsaWduOiBiYXNlbGluZTtcbn1cblxuc3VwIHtcbiAgdG9wOiAtMC41ZW07XG59XG5cbnN1YiB7XG4gIGJvdHRvbTogLTAuMjVlbTtcbn1cblxuLyogRW1iZWRkZWQgY29udGVudFxuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuLyoqXG4gKiBSZW1vdmUgYm9yZGVyIHdoZW4gaW5zaWRlIGBhYCBlbGVtZW50IGluIElFIDgvOS8xMC5cbiAqL1xuXG5pbWcge1xuICBib3JkZXI6IDA7XG59XG5cbi8qKlxuICogQ29ycmVjdCBvdmVyZmxvdyBub3QgaGlkZGVuIGluIElFIDkvMTAvMTEuXG4gKi9cblxuc3ZnOm5vdCg6cm9vdCkge1xuICBvdmVyZmxvdzogaGlkZGVuO1xufVxuXG4vKiBHcm91cGluZyBjb250ZW50XG4gICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG4vKipcbiAqIEFkZHJlc3MgbWFyZ2luIG5vdCBwcmVzZW50IGluIElFIDgvOSBhbmQgU2FmYXJpLlxuICovXG5cbmZpZ3VyZSB7XG4gIG1hcmdpbjogMWVtIDQwcHg7XG59XG5cbi8qKlxuICogQWRkcmVzcyBkaWZmZXJlbmNlcyBiZXR3ZWVuIEZpcmVmb3ggYW5kIG90aGVyIGJyb3dzZXJzLlxuICovXG5cbmhyIHtcbiAgYm94LXNpemluZzogY29udGVudC1ib3g7XG4gIGhlaWdodDogMDtcbn1cblxuLyoqXG4gKiBDb250YWluIG92ZXJmbG93IGluIGFsbCBicm93c2Vycy5cbiAqL1xuXG5wcmUge1xuICBvdmVyZmxvdzogYXV0bztcbn1cblxuLyoqXG4gKiBBZGRyZXNzIG9kZCBgZW1gLXVuaXQgZm9udCBzaXplIHJlbmRlcmluZyBpbiBhbGwgYnJvd3NlcnMuXG4gKi9cblxuY29kZSxcbmtiZCxcbnByZSxcbnNhbXAge1xuICBmb250LWZhbWlseTogbW9ub3NwYWNlLCBtb25vc3BhY2U7XG4gIGZvbnQtc2l6ZTogMWVtO1xufVxuXG4vKiBGb3Jtc1xuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuLyoqXG4gKiBLbm93biBsaW1pdGF0aW9uOiBieSBkZWZhdWx0LCBDaHJvbWUgYW5kIFNhZmFyaSBvbiBPUyBYIGFsbG93IHZlcnkgbGltaXRlZFxuICogc3R5bGluZyBvZiBgc2VsZWN0YCwgdW5sZXNzIGEgYGJvcmRlcmAgcHJvcGVydHkgaXMgc2V0LlxuICovXG5cbi8qKlxuICogMS4gQ29ycmVjdCBjb2xvciBub3QgYmVpbmcgaW5oZXJpdGVkLlxuICogICAgS25vd24gaXNzdWU6IGFmZmVjdHMgY29sb3Igb2YgZGlzYWJsZWQgZWxlbWVudHMuXG4gKiAyLiBDb3JyZWN0IGZvbnQgcHJvcGVydGllcyBub3QgYmVpbmcgaW5oZXJpdGVkLlxuICogMy4gQWRkcmVzcyBtYXJnaW5zIHNldCBkaWZmZXJlbnRseSBpbiBGaXJlZm94IDQrLCBTYWZhcmksIGFuZCBDaHJvbWUuXG4gKi9cblxuYnV0dG9uLFxuaW5wdXQsXG5vcHRncm91cCxcbnNlbGVjdCxcbnRleHRhcmVhIHtcbiAgY29sb3I6IGluaGVyaXQ7IC8qIDEgKi9cbiAgZm9udDogaW5oZXJpdDsgLyogMiAqL1xuICBtYXJnaW46IDA7IC8qIDMgKi9cbn1cblxuLyoqXG4gKiBBZGRyZXNzIGBvdmVyZmxvd2Agc2V0IHRvIGBoaWRkZW5gIGluIElFIDgvOS8xMC8xMS5cbiAqL1xuXG5idXR0b24ge1xuICBvdmVyZmxvdzogdmlzaWJsZTtcbn1cblxuLyoqXG4gKiBBZGRyZXNzIGluY29uc2lzdGVudCBgdGV4dC10cmFuc2Zvcm1gIGluaGVyaXRhbmNlIGZvciBgYnV0dG9uYCBhbmQgYHNlbGVjdGAuXG4gKiBBbGwgb3RoZXIgZm9ybSBjb250cm9sIGVsZW1lbnRzIGRvIG5vdCBpbmhlcml0IGB0ZXh0LXRyYW5zZm9ybWAgdmFsdWVzLlxuICogQ29ycmVjdCBgYnV0dG9uYCBzdHlsZSBpbmhlcml0YW5jZSBpbiBGaXJlZm94LCBJRSA4LzkvMTAvMTEsIGFuZCBPcGVyYS5cbiAqIENvcnJlY3QgYHNlbGVjdGAgc3R5bGUgaW5oZXJpdGFuY2UgaW4gRmlyZWZveC5cbiAqL1xuXG5idXR0b24sXG5zZWxlY3Qge1xuICB0ZXh0LXRyYW5zZm9ybTogbm9uZTtcbn1cblxuLyoqXG4gKiAxLiBBdm9pZCB0aGUgV2ViS2l0IGJ1ZyBpbiBBbmRyb2lkIDQuMC4qIHdoZXJlICgyKSBkZXN0cm95cyBuYXRpdmUgYGF1ZGlvYFxuICogICAgYW5kIGB2aWRlb2AgY29udHJvbHMuXG4gKiAyLiBDb3JyZWN0IGluYWJpbGl0eSB0byBzdHlsZSBjbGlja2FibGUgYGlucHV0YCB0eXBlcyBpbiBpT1MuXG4gKiAzLiBJbXByb3ZlIHVzYWJpbGl0eSBhbmQgY29uc2lzdGVuY3kgb2YgY3Vyc29yIHN0eWxlIGJldHdlZW4gaW1hZ2UtdHlwZVxuICogICAgYGlucHV0YCBhbmQgb3RoZXJzLlxuICovXG5cbmJ1dHRvbixcbmh0bWwgaW5wdXRbdHlwZT1cImJ1dHRvblwiXSwgLyogMSAqL1xuaW5wdXRbdHlwZT1cInJlc2V0XCJdLFxuaW5wdXRbdHlwZT1cInN1Ym1pdFwiXSB7XG4gIC13ZWJraXQtYXBwZWFyYW5jZTogYnV0dG9uOyAvKiAyICovXG4gIGN1cnNvcjogcG9pbnRlcjsgLyogMyAqL1xufVxuXG4vKipcbiAqIFJlLXNldCBkZWZhdWx0IGN1cnNvciBmb3IgZGlzYWJsZWQgZWxlbWVudHMuXG4gKi9cblxuYnV0dG9uW2Rpc2FibGVkXSxcbmh0bWwgaW5wdXRbZGlzYWJsZWRdIHtcbiAgY3Vyc29yOiBkZWZhdWx0O1xufVxuXG4vKipcbiAqIFJlbW92ZSBpbm5lciBwYWRkaW5nIGFuZCBib3JkZXIgaW4gRmlyZWZveCA0Ky5cbiAqL1xuXG5idXR0b246Oi1tb3otZm9jdXMtaW5uZXIsXG5pbnB1dDo6LW1vei1mb2N1cy1pbm5lciB7XG4gIGJvcmRlcjogMDtcbiAgcGFkZGluZzogMDtcbn1cblxuLyoqXG4gKiBBZGRyZXNzIEZpcmVmb3ggNCsgc2V0dGluZyBgbGluZS1oZWlnaHRgIG9uIGBpbnB1dGAgdXNpbmcgYCFpbXBvcnRhbnRgIGluXG4gKiB0aGUgVUEgc3R5bGVzaGVldC5cbiAqL1xuXG5pbnB1dCB7XG4gIGxpbmUtaGVpZ2h0OiBub3JtYWw7XG59XG5cbi8qKlxuICogSXQncyByZWNvbW1lbmRlZCB0aGF0IHlvdSBkb24ndCBhdHRlbXB0IHRvIHN0eWxlIHRoZXNlIGVsZW1lbnRzLlxuICogRmlyZWZveCdzIGltcGxlbWVudGF0aW9uIGRvZXNuJ3QgcmVzcGVjdCBib3gtc2l6aW5nLCBwYWRkaW5nLCBvciB3aWR0aC5cbiAqXG4gKiAxLiBBZGRyZXNzIGJveCBzaXppbmcgc2V0IHRvIGBjb250ZW50LWJveGAgaW4gSUUgOC85LzEwLlxuICogMi4gUmVtb3ZlIGV4Y2VzcyBwYWRkaW5nIGluIElFIDgvOS8xMC5cbiAqL1xuXG5pbnB1dFt0eXBlPVwiY2hlY2tib3hcIl0sXG5pbnB1dFt0eXBlPVwicmFkaW9cIl0ge1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94OyAvKiAxICovXG4gIHBhZGRpbmc6IDA7IC8qIDIgKi9cbn1cblxuLyoqXG4gKiBGaXggdGhlIGN1cnNvciBzdHlsZSBmb3IgQ2hyb21lJ3MgaW5jcmVtZW50L2RlY3JlbWVudCBidXR0b25zLiBGb3IgY2VydGFpblxuICogYGZvbnQtc2l6ZWAgdmFsdWVzIG9mIHRoZSBgaW5wdXRgLCBpdCBjYXVzZXMgdGhlIGN1cnNvciBzdHlsZSBvZiB0aGVcbiAqIGRlY3JlbWVudCBidXR0b24gdG8gY2hhbmdlIGZyb20gYGRlZmF1bHRgIHRvIGB0ZXh0YC5cbiAqL1xuXG5pbnB1dFt0eXBlPVwibnVtYmVyXCJdOjotd2Via2l0LWlubmVyLXNwaW4tYnV0dG9uLFxuaW5wdXRbdHlwZT1cIm51bWJlclwiXTo6LXdlYmtpdC1vdXRlci1zcGluLWJ1dHRvbiB7XG4gIGhlaWdodDogYXV0bztcbn1cblxuLyoqXG4gKiAxLiBBZGRyZXNzIGBhcHBlYXJhbmNlYCBzZXQgdG8gYHNlYXJjaGZpZWxkYCBpbiBTYWZhcmkgYW5kIENocm9tZS5cbiAqIDIuIEFkZHJlc3MgYGJveC1zaXppbmdgIHNldCB0byBgYm9yZGVyLWJveGAgaW4gU2FmYXJpIGFuZCBDaHJvbWUuXG4gKi9cblxuaW5wdXRbdHlwZT1cInNlYXJjaFwiXSB7XG4gIC13ZWJraXQtYXBwZWFyYW5jZTogdGV4dGZpZWxkOyAvKiAxICovXG4gIGJveC1zaXppbmc6IGNvbnRlbnQtYm94OyAvKiAyICovXG59XG5cbi8qKlxuICogUmVtb3ZlIGlubmVyIHBhZGRpbmcgYW5kIHNlYXJjaCBjYW5jZWwgYnV0dG9uIGluIFNhZmFyaSBhbmQgQ2hyb21lIG9uIE9TIFguXG4gKiBTYWZhcmkgKGJ1dCBub3QgQ2hyb21lKSBjbGlwcyB0aGUgY2FuY2VsIGJ1dHRvbiB3aGVuIHRoZSBzZWFyY2ggaW5wdXQgaGFzXG4gKiBwYWRkaW5nIChhbmQgYHRleHRmaWVsZGAgYXBwZWFyYW5jZSkuXG4gKi9cblxuaW5wdXRbdHlwZT1cInNlYXJjaFwiXTo6LXdlYmtpdC1zZWFyY2gtY2FuY2VsLWJ1dHRvbixcbmlucHV0W3R5cGU9XCJzZWFyY2hcIl06Oi13ZWJraXQtc2VhcmNoLWRlY29yYXRpb24ge1xuICAtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmU7XG59XG5cbi8qKlxuICogRGVmaW5lIGNvbnNpc3RlbnQgYm9yZGVyLCBtYXJnaW4sIGFuZCBwYWRkaW5nLlxuICovXG5cbmZpZWxkc2V0IHtcbiAgYm9yZGVyOiAxcHggc29saWQgI2MwYzBjMDtcbiAgbWFyZ2luOiAwIDJweDtcbiAgcGFkZGluZzogMC4zNWVtIDAuNjI1ZW0gMC43NWVtO1xufVxuXG4vKipcbiAqIDEuIENvcnJlY3QgYGNvbG9yYCBub3QgYmVpbmcgaW5oZXJpdGVkIGluIElFIDgvOS8xMC8xMS5cbiAqIDIuIFJlbW92ZSBwYWRkaW5nIHNvIHBlb3BsZSBhcmVuJ3QgY2F1Z2h0IG91dCBpZiB0aGV5IHplcm8gb3V0IGZpZWxkc2V0cy5cbiAqL1xuXG5sZWdlbmQge1xuICBib3JkZXI6IDA7IC8qIDEgKi9cbiAgcGFkZGluZzogMDsgLyogMiAqL1xufVxuXG4vKipcbiAqIFJlbW92ZSBkZWZhdWx0IHZlcnRpY2FsIHNjcm9sbGJhciBpbiBJRSA4LzkvMTAvMTEuXG4gKi9cblxudGV4dGFyZWEge1xuICBvdmVyZmxvdzogYXV0bztcbn1cblxuLyoqXG4gKiBEb24ndCBpbmhlcml0IHRoZSBgZm9udC13ZWlnaHRgIChhcHBsaWVkIGJ5IGEgcnVsZSBhYm92ZSkuXG4gKiBOT1RFOiB0aGUgZGVmYXVsdCBjYW5ub3Qgc2FmZWx5IGJlIGNoYW5nZWQgaW4gQ2hyb21lIGFuZCBTYWZhcmkgb24gT1MgWC5cbiAqL1xuXG5vcHRncm91cCB7XG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xufVxuXG4vKiBUYWJsZXNcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cbi8qKlxuICogUmVtb3ZlIG1vc3Qgc3BhY2luZyBiZXR3ZWVuIHRhYmxlIGNlbGxzLlxuICovXG5cbnRhYmxlIHtcbiAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTtcbiAgYm9yZGVyLXNwYWNpbmc6IDA7XG59XG5cbnRkLFxudGgge1xuICBwYWRkaW5nOiAwO1xufVxuIiwiLyohIG5vcm1hbGl6ZS5jc3MgdjMuMC4zIHwgTUlUIExpY2Vuc2UgfCBnaXRodWIuY29tL25lY29sYXMvbm9ybWFsaXplLmNzcyAqL1xuLyoqXG4gKiAxLiBTZXQgZGVmYXVsdCBmb250IGZhbWlseSB0byBzYW5zLXNlcmlmLlxuICogMi4gUHJldmVudCBpT1MgYW5kIElFIHRleHQgc2l6ZSBhZGp1c3QgYWZ0ZXIgZGV2aWNlIG9yaWVudGF0aW9uIGNoYW5nZSxcbiAqICAgIHdpdGhvdXQgZGlzYWJsaW5nIHVzZXIgem9vbS5cbiAqL1xuaHRtbCB7XG4gIGZvbnQtZmFtaWx5OiBzYW5zLXNlcmlmO1xuICAvKiAxICovXG4gIC1tcy10ZXh0LXNpemUtYWRqdXN0OiAxMDAlO1xuICAvKiAyICovXG4gIC13ZWJraXQtdGV4dC1zaXplLWFkanVzdDogMTAwJTtcbiAgLyogMiAqLyB9XG5cbi8qKlxuICogUmVtb3ZlIGRlZmF1bHQgbWFyZ2luLlxuICovXG5ib2R5IHtcbiAgbWFyZ2luOiAwOyB9XG5cbi8qIEhUTUw1IGRpc3BsYXkgZGVmaW5pdGlvbnNcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG4vKipcbiAqIENvcnJlY3QgYGJsb2NrYCBkaXNwbGF5IG5vdCBkZWZpbmVkIGZvciBhbnkgSFRNTDUgZWxlbWVudCBpbiBJRSA4LzkuXG4gKiBDb3JyZWN0IGBibG9ja2AgZGlzcGxheSBub3QgZGVmaW5lZCBmb3IgYGRldGFpbHNgIG9yIGBzdW1tYXJ5YCBpbiBJRSAxMC8xMVxuICogYW5kIEZpcmVmb3guXG4gKiBDb3JyZWN0IGBibG9ja2AgZGlzcGxheSBub3QgZGVmaW5lZCBmb3IgYG1haW5gIGluIElFIDExLlxuICovXG5hcnRpY2xlLFxuYXNpZGUsXG5kZXRhaWxzLFxuZmlnY2FwdGlvbixcbmZpZ3VyZSxcbmZvb3RlcixcbmhlYWRlcixcbmhncm91cCxcbm1haW4sXG5tZW51LFxubmF2LFxuc2VjdGlvbixcbnN1bW1hcnkge1xuICBkaXNwbGF5OiBibG9jazsgfVxuXG4vKipcbiAqIDEuIENvcnJlY3QgYGlubGluZS1ibG9ja2AgZGlzcGxheSBub3QgZGVmaW5lZCBpbiBJRSA4LzkuXG4gKiAyLiBOb3JtYWxpemUgdmVydGljYWwgYWxpZ25tZW50IG9mIGBwcm9ncmVzc2AgaW4gQ2hyb21lLCBGaXJlZm94LCBhbmQgT3BlcmEuXG4gKi9cbmF1ZGlvLFxuY2FudmFzLFxucHJvZ3Jlc3MsXG52aWRlbyB7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgLyogMSAqL1xuICB2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7XG4gIC8qIDIgKi8gfVxuXG4vKipcbiAqIFByZXZlbnQgbW9kZXJuIGJyb3dzZXJzIGZyb20gZGlzcGxheWluZyBgYXVkaW9gIHdpdGhvdXQgY29udHJvbHMuXG4gKiBSZW1vdmUgZXhjZXNzIGhlaWdodCBpbiBpT1MgNSBkZXZpY2VzLlxuICovXG5hdWRpbzpub3QoW2NvbnRyb2xzXSkge1xuICBkaXNwbGF5OiBub25lO1xuICBoZWlnaHQ6IDA7IH1cblxuLyoqXG4gKiBBZGRyZXNzIGBbaGlkZGVuXWAgc3R5bGluZyBub3QgcHJlc2VudCBpbiBJRSA4LzkvMTAuXG4gKiBIaWRlIHRoZSBgdGVtcGxhdGVgIGVsZW1lbnQgaW4gSUUgOC85LzEwLzExLCBTYWZhcmksIGFuZCBGaXJlZm94IDwgMjIuXG4gKi9cbltoaWRkZW5dLFxudGVtcGxhdGUge1xuICBkaXNwbGF5OiBub25lOyB9XG5cbi8qIExpbmtzXG4gICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuLyoqXG4gKiBSZW1vdmUgdGhlIGdyYXkgYmFja2dyb3VuZCBjb2xvciBmcm9tIGFjdGl2ZSBsaW5rcyBpbiBJRSAxMC5cbiAqL1xuYSB7XG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50OyB9XG5cbi8qKlxuICogSW1wcm92ZSByZWFkYWJpbGl0eSBvZiBmb2N1c2VkIGVsZW1lbnRzIHdoZW4gdGhleSBhcmUgYWxzbyBpbiBhblxuICogYWN0aXZlL2hvdmVyIHN0YXRlLlxuICovXG5hOmFjdGl2ZSxcbmE6aG92ZXIge1xuICBvdXRsaW5lOiAwOyB9XG5cbi8qIFRleHQtbGV2ZWwgc2VtYW50aWNzXG4gICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuLyoqXG4gKiBBZGRyZXNzIHN0eWxpbmcgbm90IHByZXNlbnQgaW4gSUUgOC85LzEwLzExLCBTYWZhcmksIGFuZCBDaHJvbWUuXG4gKi9cbmFiYnJbdGl0bGVdIHtcbiAgYm9yZGVyLWJvdHRvbTogMXB4IGRvdHRlZDsgfVxuXG4vKipcbiAqIEFkZHJlc3Mgc3R5bGUgc2V0IHRvIGBib2xkZXJgIGluIEZpcmVmb3ggNCssIFNhZmFyaSwgYW5kIENocm9tZS5cbiAqL1xuYixcbnN0cm9uZyB7XG4gIGZvbnQtd2VpZ2h0OiBib2xkOyB9XG5cbi8qKlxuICogQWRkcmVzcyBzdHlsaW5nIG5vdCBwcmVzZW50IGluIFNhZmFyaSBhbmQgQ2hyb21lLlxuICovXG5kZm4ge1xuICBmb250LXN0eWxlOiBpdGFsaWM7IH1cblxuLyoqXG4gKiBBZGRyZXNzIHZhcmlhYmxlIGBoMWAgZm9udC1zaXplIGFuZCBtYXJnaW4gd2l0aGluIGBzZWN0aW9uYCBhbmQgYGFydGljbGVgXG4gKiBjb250ZXh0cyBpbiBGaXJlZm94IDQrLCBTYWZhcmksIGFuZCBDaHJvbWUuXG4gKi9cbmgxIHtcbiAgZm9udC1zaXplOiAyZW07XG4gIG1hcmdpbjogMC42N2VtIDA7IH1cblxuLyoqXG4gKiBBZGRyZXNzIHN0eWxpbmcgbm90IHByZXNlbnQgaW4gSUUgOC85LlxuICovXG5tYXJrIHtcbiAgYmFja2dyb3VuZDogI2ZmMDtcbiAgY29sb3I6ICMwMDA7IH1cblxuLyoqXG4gKiBBZGRyZXNzIGluY29uc2lzdGVudCBhbmQgdmFyaWFibGUgZm9udCBzaXplIGluIGFsbCBicm93c2Vycy5cbiAqL1xuc21hbGwge1xuICBmb250LXNpemU6IDgwJTsgfVxuXG4vKipcbiAqIFByZXZlbnQgYHN1YmAgYW5kIGBzdXBgIGFmZmVjdGluZyBgbGluZS1oZWlnaHRgIGluIGFsbCBicm93c2Vycy5cbiAqL1xuc3ViLFxuc3VwIHtcbiAgZm9udC1zaXplOiA3NSU7XG4gIGxpbmUtaGVpZ2h0OiAwO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIHZlcnRpY2FsLWFsaWduOiBiYXNlbGluZTsgfVxuXG5zdXAge1xuICB0b3A6IC0wLjVlbTsgfVxuXG5zdWIge1xuICBib3R0b206IC0wLjI1ZW07IH1cblxuLyogRW1iZWRkZWQgY29udGVudFxuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbi8qKlxuICogUmVtb3ZlIGJvcmRlciB3aGVuIGluc2lkZSBgYWAgZWxlbWVudCBpbiBJRSA4LzkvMTAuXG4gKi9cbmltZyB7XG4gIGJvcmRlcjogMDsgfVxuXG4vKipcbiAqIENvcnJlY3Qgb3ZlcmZsb3cgbm90IGhpZGRlbiBpbiBJRSA5LzEwLzExLlxuICovXG5zdmc6bm90KDpyb290KSB7XG4gIG92ZXJmbG93OiBoaWRkZW47IH1cblxuLyogR3JvdXBpbmcgY29udGVudFxuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbi8qKlxuICogQWRkcmVzcyBtYXJnaW4gbm90IHByZXNlbnQgaW4gSUUgOC85IGFuZCBTYWZhcmkuXG4gKi9cbmZpZ3VyZSB7XG4gIG1hcmdpbjogMWVtIDQwcHg7IH1cblxuLyoqXG4gKiBBZGRyZXNzIGRpZmZlcmVuY2VzIGJldHdlZW4gRmlyZWZveCBhbmQgb3RoZXIgYnJvd3NlcnMuXG4gKi9cbmhyIHtcbiAgYm94LXNpemluZzogY29udGVudC1ib3g7XG4gIGhlaWdodDogMDsgfVxuXG4vKipcbiAqIENvbnRhaW4gb3ZlcmZsb3cgaW4gYWxsIGJyb3dzZXJzLlxuICovXG5wcmUge1xuICBvdmVyZmxvdzogYXV0bzsgfVxuXG4vKipcbiAqIEFkZHJlc3Mgb2RkIGBlbWAtdW5pdCBmb250IHNpemUgcmVuZGVyaW5nIGluIGFsbCBicm93c2Vycy5cbiAqL1xuY29kZSxcbmtiZCxcbnByZSxcbnNhbXAge1xuICBmb250LWZhbWlseTogbW9ub3NwYWNlLCBtb25vc3BhY2U7XG4gIGZvbnQtc2l6ZTogMWVtOyB9XG5cbi8qIEZvcm1zXG4gICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuLyoqXG4gKiBLbm93biBsaW1pdGF0aW9uOiBieSBkZWZhdWx0LCBDaHJvbWUgYW5kIFNhZmFyaSBvbiBPUyBYIGFsbG93IHZlcnkgbGltaXRlZFxuICogc3R5bGluZyBvZiBgc2VsZWN0YCwgdW5sZXNzIGEgYGJvcmRlcmAgcHJvcGVydHkgaXMgc2V0LlxuICovXG4vKipcbiAqIDEuIENvcnJlY3QgY29sb3Igbm90IGJlaW5nIGluaGVyaXRlZC5cbiAqICAgIEtub3duIGlzc3VlOiBhZmZlY3RzIGNvbG9yIG9mIGRpc2FibGVkIGVsZW1lbnRzLlxuICogMi4gQ29ycmVjdCBmb250IHByb3BlcnRpZXMgbm90IGJlaW5nIGluaGVyaXRlZC5cbiAqIDMuIEFkZHJlc3MgbWFyZ2lucyBzZXQgZGlmZmVyZW50bHkgaW4gRmlyZWZveCA0KywgU2FmYXJpLCBhbmQgQ2hyb21lLlxuICovXG5idXR0b24sXG5pbnB1dCxcbm9wdGdyb3VwLFxuc2VsZWN0LFxudGV4dGFyZWEge1xuICBjb2xvcjogaW5oZXJpdDtcbiAgLyogMSAqL1xuICBmb250OiBpbmhlcml0O1xuICAvKiAyICovXG4gIG1hcmdpbjogMDtcbiAgLyogMyAqLyB9XG5cbi8qKlxuICogQWRkcmVzcyBgb3ZlcmZsb3dgIHNldCB0byBgaGlkZGVuYCBpbiBJRSA4LzkvMTAvMTEuXG4gKi9cbmJ1dHRvbiB7XG4gIG92ZXJmbG93OiB2aXNpYmxlOyB9XG5cbi8qKlxuICogQWRkcmVzcyBpbmNvbnNpc3RlbnQgYHRleHQtdHJhbnNmb3JtYCBpbmhlcml0YW5jZSBmb3IgYGJ1dHRvbmAgYW5kIGBzZWxlY3RgLlxuICogQWxsIG90aGVyIGZvcm0gY29udHJvbCBlbGVtZW50cyBkbyBub3QgaW5oZXJpdCBgdGV4dC10cmFuc2Zvcm1gIHZhbHVlcy5cbiAqIENvcnJlY3QgYGJ1dHRvbmAgc3R5bGUgaW5oZXJpdGFuY2UgaW4gRmlyZWZveCwgSUUgOC85LzEwLzExLCBhbmQgT3BlcmEuXG4gKiBDb3JyZWN0IGBzZWxlY3RgIHN0eWxlIGluaGVyaXRhbmNlIGluIEZpcmVmb3guXG4gKi9cbmJ1dHRvbixcbnNlbGVjdCB7XG4gIHRleHQtdHJhbnNmb3JtOiBub25lOyB9XG5cbi8qKlxuICogMS4gQXZvaWQgdGhlIFdlYktpdCBidWcgaW4gQW5kcm9pZCA0LjAuKiB3aGVyZSAoMikgZGVzdHJveXMgbmF0aXZlIGBhdWRpb2BcbiAqICAgIGFuZCBgdmlkZW9gIGNvbnRyb2xzLlxuICogMi4gQ29ycmVjdCBpbmFiaWxpdHkgdG8gc3R5bGUgY2xpY2thYmxlIGBpbnB1dGAgdHlwZXMgaW4gaU9TLlxuICogMy4gSW1wcm92ZSB1c2FiaWxpdHkgYW5kIGNvbnNpc3RlbmN5IG9mIGN1cnNvciBzdHlsZSBiZXR3ZWVuIGltYWdlLXR5cGVcbiAqICAgIGBpbnB1dGAgYW5kIG90aGVycy5cbiAqL1xuYnV0dG9uLFxuaHRtbCBpbnB1dFt0eXBlPVwiYnV0dG9uXCJdLCBpbnB1dFt0eXBlPVwicmVzZXRcIl0sXG5pbnB1dFt0eXBlPVwic3VibWl0XCJdIHtcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiBidXR0b247XG4gIC8qIDIgKi9cbiAgY3Vyc29yOiBwb2ludGVyO1xuICAvKiAzICovIH1cblxuLyoqXG4gKiBSZS1zZXQgZGVmYXVsdCBjdXJzb3IgZm9yIGRpc2FibGVkIGVsZW1lbnRzLlxuICovXG5idXR0b25bZGlzYWJsZWRdLFxuaHRtbCBpbnB1dFtkaXNhYmxlZF0ge1xuICBjdXJzb3I6IGRlZmF1bHQ7IH1cblxuLyoqXG4gKiBSZW1vdmUgaW5uZXIgcGFkZGluZyBhbmQgYm9yZGVyIGluIEZpcmVmb3ggNCsuXG4gKi9cbmJ1dHRvbjo6LW1vei1mb2N1cy1pbm5lcixcbmlucHV0OjotbW96LWZvY3VzLWlubmVyIHtcbiAgYm9yZGVyOiAwO1xuICBwYWRkaW5nOiAwOyB9XG5cbi8qKlxuICogQWRkcmVzcyBGaXJlZm94IDQrIHNldHRpbmcgYGxpbmUtaGVpZ2h0YCBvbiBgaW5wdXRgIHVzaW5nIGAhaW1wb3J0YW50YCBpblxuICogdGhlIFVBIHN0eWxlc2hlZXQuXG4gKi9cbmlucHV0IHtcbiAgbGluZS1oZWlnaHQ6IG5vcm1hbDsgfVxuXG4vKipcbiAqIEl0J3MgcmVjb21tZW5kZWQgdGhhdCB5b3UgZG9uJ3QgYXR0ZW1wdCB0byBzdHlsZSB0aGVzZSBlbGVtZW50cy5cbiAqIEZpcmVmb3gncyBpbXBsZW1lbnRhdGlvbiBkb2Vzbid0IHJlc3BlY3QgYm94LXNpemluZywgcGFkZGluZywgb3Igd2lkdGguXG4gKlxuICogMS4gQWRkcmVzcyBib3ggc2l6aW5nIHNldCB0byBgY29udGVudC1ib3hgIGluIElFIDgvOS8xMC5cbiAqIDIuIFJlbW92ZSBleGNlc3MgcGFkZGluZyBpbiBJRSA4LzkvMTAuXG4gKi9cbmlucHV0W3R5cGU9XCJjaGVja2JveFwiXSxcbmlucHV0W3R5cGU9XCJyYWRpb1wiXSB7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIC8qIDEgKi9cbiAgcGFkZGluZzogMDtcbiAgLyogMiAqLyB9XG5cbi8qKlxuICogRml4IHRoZSBjdXJzb3Igc3R5bGUgZm9yIENocm9tZSdzIGluY3JlbWVudC9kZWNyZW1lbnQgYnV0dG9ucy4gRm9yIGNlcnRhaW5cbiAqIGBmb250LXNpemVgIHZhbHVlcyBvZiB0aGUgYGlucHV0YCwgaXQgY2F1c2VzIHRoZSBjdXJzb3Igc3R5bGUgb2YgdGhlXG4gKiBkZWNyZW1lbnQgYnV0dG9uIHRvIGNoYW5nZSBmcm9tIGBkZWZhdWx0YCB0byBgdGV4dGAuXG4gKi9cbmlucHV0W3R5cGU9XCJudW1iZXJcIl06Oi13ZWJraXQtaW5uZXItc3Bpbi1idXR0b24sXG5pbnB1dFt0eXBlPVwibnVtYmVyXCJdOjotd2Via2l0LW91dGVyLXNwaW4tYnV0dG9uIHtcbiAgaGVpZ2h0OiBhdXRvOyB9XG5cbi8qKlxuICogMS4gQWRkcmVzcyBgYXBwZWFyYW5jZWAgc2V0IHRvIGBzZWFyY2hmaWVsZGAgaW4gU2FmYXJpIGFuZCBDaHJvbWUuXG4gKiAyLiBBZGRyZXNzIGBib3gtc2l6aW5nYCBzZXQgdG8gYGJvcmRlci1ib3hgIGluIFNhZmFyaSBhbmQgQ2hyb21lLlxuICovXG5pbnB1dFt0eXBlPVwic2VhcmNoXCJdIHtcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiB0ZXh0ZmllbGQ7XG4gIC8qIDEgKi9cbiAgYm94LXNpemluZzogY29udGVudC1ib3g7XG4gIC8qIDIgKi8gfVxuXG4vKipcbiAqIFJlbW92ZSBpbm5lciBwYWRkaW5nIGFuZCBzZWFyY2ggY2FuY2VsIGJ1dHRvbiBpbiBTYWZhcmkgYW5kIENocm9tZSBvbiBPUyBYLlxuICogU2FmYXJpIChidXQgbm90IENocm9tZSkgY2xpcHMgdGhlIGNhbmNlbCBidXR0b24gd2hlbiB0aGUgc2VhcmNoIGlucHV0IGhhc1xuICogcGFkZGluZyAoYW5kIGB0ZXh0ZmllbGRgIGFwcGVhcmFuY2UpLlxuICovXG5pbnB1dFt0eXBlPVwic2VhcmNoXCJdOjotd2Via2l0LXNlYXJjaC1jYW5jZWwtYnV0dG9uLFxuaW5wdXRbdHlwZT1cInNlYXJjaFwiXTo6LXdlYmtpdC1zZWFyY2gtZGVjb3JhdGlvbiB7XG4gIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTsgfVxuXG4vKipcbiAqIERlZmluZSBjb25zaXN0ZW50IGJvcmRlciwgbWFyZ2luLCBhbmQgcGFkZGluZy5cbiAqL1xuZmllbGRzZXQge1xuICBib3JkZXI6IDFweCBzb2xpZCAjYzBjMGMwO1xuICBtYXJnaW46IDAgMnB4O1xuICBwYWRkaW5nOiAwLjM1ZW0gMC42MjVlbSAwLjc1ZW07IH1cblxuLyoqXG4gKiAxLiBDb3JyZWN0IGBjb2xvcmAgbm90IGJlaW5nIGluaGVyaXRlZCBpbiBJRSA4LzkvMTAvMTEuXG4gKiAyLiBSZW1vdmUgcGFkZGluZyBzbyBwZW9wbGUgYXJlbid0IGNhdWdodCBvdXQgaWYgdGhleSB6ZXJvIG91dCBmaWVsZHNldHMuXG4gKi9cbmxlZ2VuZCB7XG4gIGJvcmRlcjogMDtcbiAgLyogMSAqL1xuICBwYWRkaW5nOiAwO1xuICAvKiAyICovIH1cblxuLyoqXG4gKiBSZW1vdmUgZGVmYXVsdCB2ZXJ0aWNhbCBzY3JvbGxiYXIgaW4gSUUgOC85LzEwLzExLlxuICovXG50ZXh0YXJlYSB7XG4gIG92ZXJmbG93OiBhdXRvOyB9XG5cbi8qKlxuICogRG9uJ3QgaW5oZXJpdCB0aGUgYGZvbnQtd2VpZ2h0YCAoYXBwbGllZCBieSBhIHJ1bGUgYWJvdmUpLlxuICogTk9URTogdGhlIGRlZmF1bHQgY2Fubm90IHNhZmVseSBiZSBjaGFuZ2VkIGluIENocm9tZSBhbmQgU2FmYXJpIG9uIE9TIFguXG4gKi9cbm9wdGdyb3VwIHtcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7IH1cblxuLyogVGFibGVzXG4gICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuLyoqXG4gKiBSZW1vdmUgbW9zdCBzcGFjaW5nIGJldHdlZW4gdGFibGUgY2VsbHMuXG4gKi9cbnRhYmxlIHtcbiAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTtcbiAgYm9yZGVyLXNwYWNpbmc6IDA7IH1cblxudGQsXG50aCB7XG4gIHBhZGRpbmc6IDA7IH1cblxuaHRtbCB7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7IH1cblxuKixcbio6OmFmdGVyLFxuKjo6YmVmb3JlIHtcbiAgYm94LXNpemluZzogaW5oZXJpdDsgfVxuXG4vKiRiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMjMxLCAyMzEsIDIyNik7Ki9cbi8qKlxuICogU2V0IHVwIGEgZGVjZW50IGJveCBtb2RlbCBvbiB0aGUgcm9vdCBlbGVtZW50XG4gKi9cbmh0bWwge1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94OyB9XG5cbi8qKlxuICogTWFrZSBhbGwgZWxlbWVudHMgZnJvbSB0aGUgRE9NIGluaGVyaXQgZnJvbSB0aGUgcGFyZW50IGJveC1zaXppbmdcbiAqIFNpbmNlIGAqYCBoYXMgYSBzcGVjaWZpY2l0eSBvZiAwLCBpdCBkb2VzIG5vdCBvdmVycmlkZSB0aGUgYGh0bWxgIHZhbHVlXG4gKiBtYWtpbmcgYWxsIGVsZW1lbnRzIGluaGVyaXRpbmcgZnJvbSB0aGUgcm9vdCBib3gtc2l6aW5nIHZhbHVlXG4gKiBTZWU6IGh0dHBzOi8vY3NzLXRyaWNrcy5jb20vaW5oZXJpdGluZy1ib3gtc2l6aW5nLXByb2JhYmx5LXNsaWdodGx5LWJldHRlci1iZXN0LXByYWN0aWNlL1xuICovXG4qLCAqOjpiZWZvcmUsICo6OmFmdGVyIHtcbiAgYm94LXNpemluZzogaW5oZXJpdDsgfVxuXG4vKipcbiAqIEJhc2ljIHN0eWxlcyBmb3IgbGlua3NcbiAqL1xuYSB7XG4gIGNvbG9yOiAjRTUwMDUwO1xuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7IH1cbiAgYTpob3ZlcixcbiAgYTphY3RpdmUsXG4gIGE6Zm9jdXMge1xuICAgIGNvbG9yOiAjMjIyO1xuICAgIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lOyB9XG5cbmh0bWwge1xuICBjb2xvcjogIzIyMjtcbiAgZm9udC1zaXplOiAxZW07XG4gIGxpbmUtaGVpZ2h0OiAxLjQ7IH1cblxuOjotbW96LXNlbGVjdGlvbiB7XG4gIGJhY2tncm91bmQ6ICNiM2Q0ZmM7XG4gIHRleHQtc2hhZG93OiBub25lOyB9XG5cbjo6c2VsZWN0aW9uIHtcbiAgYmFja2dyb3VuZDogI2IzZDRmYztcbiAgdGV4dC1zaGFkb3c6IG5vbmU7IH1cblxuaHIge1xuICBkaXNwbGF5OiBibG9jaztcbiAgaGVpZ2h0OiAxcHg7XG4gIGJvcmRlcjogMDtcbiAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICNjY2M7XG4gIG1hcmdpbjogMWVtIDA7XG4gIHBhZGRpbmc6IDA7IH1cblxuYXVkaW8sXG5jYW52YXMsXG5pZnJhbWUsXG5pbWcsXG5zdmcsXG52aWRlbyB7XG4gIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7IH1cblxuZmllbGRzZXQge1xuICBib3JkZXI6IDA7XG4gIG1hcmdpbjogMDtcbiAgcGFkZGluZzogMDsgfVxuXG50ZXh0YXJlYSB7XG4gIHJlc2l6ZTogdmVydGljYWw7IH1cblxuQGZvbnQtZmFjZSB7XG4gIGZvbnQtZmFtaWx5OiBCZWF2ZXI7XG4gIHNyYzogdXJsKFwiZm9udHMvYmVhdmVyLnR0ZlwiKTsgfVxuXG4vKipcbiAqIEJhc2ljIHR5cG9ncmFwaHkgc3R5bGUgZm9yIGNvcHkgdGV4dFxuICovXG5ib2R5IHtcbiAgY29sb3I6ICMyMjI7XG4gIGZvbnQ6IG5vcm1hbCAxMjUlLzEuNCBcIk9wZW4gU2Fuc1wiLCBcIkhlbHZldGljYSBOZXVlIExpZ2h0XCIsIFwiSGVsdmV0aWNhIE5ldWVcIiwgXCJIZWx2ZXRpY2FcIiwgXCJBcmlhbFwiLCBzYW5zLXNlcmlmOyB9XG5cbi8qKlxuICogQ2xlYXIgaW5uZXIgZmxvYXRzXG4gKi9cbi5jbGVhcmZpeDo6YWZ0ZXIge1xuICBjbGVhcjogYm90aDtcbiAgY29udGVudDogJyc7XG4gIGRpc3BsYXk6IHRhYmxlOyB9XG5cbi5jbGVhcmZpeDpiZWZvcmUsXG4uY2xlYXJmaXg6YWZ0ZXIge1xuICBjb250ZW50OiBcIiBcIjtcbiAgZGlzcGxheTogdGFibGU7IH1cblxuLmNsZWFyZml4OmFmdGVyIHtcbiAgY2xlYXI6IGJvdGg7IH1cblxuLmNsZWFyZml4IHtcbiAgKnpvb206IDE7IH1cblxuLyoqXG4gKiBNYWluIGNvbnRlbnQgY29udGFpbmVyc1xuICogMS4gTWFrZSB0aGUgY29udGFpbmVyIGZ1bGwtd2lkdGggd2l0aCBhIG1heGltdW0gd2lkdGhcbiAqIDIuIENlbnRlciBpdCBpbiB0aGUgdmlld3BvcnRcbiAqIDMuIExlYXZlIHNvbWUgc3BhY2Ugb24gdGhlIGVkZ2VzLCBlc3BlY2lhbGx5IHZhbHVhYmxlIG9uIHNtYWxsIHNjcmVlbnNcbiAqL1xuLmNvbnRhaW5lciB7XG4gIG1heC13aWR0aDogOTYwcHg7XG4gIC8qIDEgKi9cbiAgbWFyZ2luLWxlZnQ6IGF1dG87XG4gIC8qIDIgKi9cbiAgbWFyZ2luLXJpZ2h0OiBhdXRvO1xuICAvKiAyICovXG4gIHBhZGRpbmctbGVmdDogMjBweDtcbiAgLyogMyAqL1xuICBwYWRkaW5nLXJpZ2h0OiAyMHB4O1xuICAvKiAzICovXG4gIHdpZHRoOiAxMDAlO1xuICAvKiAxICovIH1cblxuLyoqXG4gKiBIaWRlIHRleHQgd2hpbGUgbWFraW5nIGl0IHJlYWRhYmxlIGZvciBzY3JlZW4gcmVhZGVyc1xuICogMS4gTmVlZGVkIGluIFdlYktpdC1iYXNlZCBicm93c2VycyBiZWNhdXNlIG9mIGFuIGltcGxlbWVudGF0aW9uIGJ1ZztcbiAqICAgIFNlZTogaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ1NzE0NlxuICovXG4uaGlkZS10ZXh0IHtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgcGFkZGluZzogMDtcbiAgLyogMSAqL1xuICB0ZXh0LWluZGVudDogMTAxJTtcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDsgfVxuXG4vKipcbiAqIEhpZGUgZWxlbWVudCB3aGlsZSBtYWtpbmcgaXQgcmVhZGFibGUgZm9yIHNjcmVlbiByZWFkZXJzXG4gKiBTaGFtZWxlc3NseSBib3Jyb3dlZCBmcm9tIEhUTUw1Qm9pbGVycGxhdGU6XG4gKiBodHRwczovL2dpdGh1Yi5jb20vaDVicC9odG1sNS1ib2lsZXJwbGF0ZS9ibG9iL21hc3Rlci9zcmMvY3NzL21haW4uY3NzI0wxMTktTDEzM1xuICovXG4udmlzdWFsbHktaGlkZGVuIHtcbiAgYm9yZGVyOiAwO1xuICBjbGlwOiByZWN0KDAgMCAwIDApO1xuICBoZWlnaHQ6IDFweDtcbiAgbWFyZ2luOiAtMXB4O1xuICBvdmVyZmxvdzogaGlkZGVuO1xuICBwYWRkaW5nOiAwO1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHdpZHRoOiAxcHg7IH1cblxuLmhpZGRlbiB7XG4gIGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDtcbiAgdmlzaWJpbGl0eTogaGlkZGVuOyB9XG5cbi52aXN1YWxseWhpZGRlbiB7XG4gIGJvcmRlcjogMDtcbiAgY2xpcDogcmVjdCgwIDAgMCAwKTtcbiAgaGVpZ2h0OiAxcHg7XG4gIG1hcmdpbjogLTFweDtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgcGFkZGluZzogMDtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB3aWR0aDogMXB4OyB9XG5cbi52aXN1YWxseWhpZGRlbi5mb2N1c2FibGU6YWN0aXZlLFxuLnZpc3VhbGx5aGlkZGVuLmZvY3VzYWJsZTpmb2N1cyB7XG4gIGNsaXA6IGF1dG87XG4gIGhlaWdodDogYXV0bztcbiAgbWFyZ2luOiAwO1xuICBvdmVyZmxvdzogdmlzaWJsZTtcbiAgcG9zaXRpb246IHN0YXRpYztcbiAgd2lkdGg6IGF1dG87IH1cblxuLmludmlzaWJsZSB7XG4gIHZpc2liaWxpdHk6IGhpZGRlbjsgfVxuXG5AbWVkaWEgcHJpbnQge1xuICAqLFxuICAqOmJlZm9yZSxcbiAgKjphZnRlciB7XG4gICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQgIWltcG9ydGFudDtcbiAgICBjb2xvcjogIzAwMCAhaW1wb3J0YW50O1xuICAgIGJveC1zaGFkb3c6IG5vbmUgIWltcG9ydGFudDtcbiAgICB0ZXh0LXNoYWRvdzogbm9uZSAhaW1wb3J0YW50OyB9XG4gIGEsXG4gIGE6dmlzaXRlZCB7XG4gICAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7IH1cbiAgYVtocmVmXTphZnRlciB7XG4gICAgY29udGVudDogXCIgKFwiIGF0dHIoaHJlZikgXCIpXCI7IH1cbiAgYWJiclt0aXRsZV06YWZ0ZXIge1xuICAgIGNvbnRlbnQ6IFwiIChcIiBhdHRyKHRpdGxlKSBcIilcIjsgfVxuICBhW2hyZWZePVwiI1wiXTphZnRlcixcbiAgYVtocmVmXj1cImphdmFzY3JpcHQ6XCJdOmFmdGVyIHtcbiAgICBjb250ZW50OiBcIlwiOyB9XG4gIHByZSxcbiAgYmxvY2txdW90ZSB7XG4gICAgYm9yZGVyOiAxcHggc29saWQgIzk5OTtcbiAgICBwYWdlLWJyZWFrLWluc2lkZTogYXZvaWQ7IH1cbiAgdGhlYWQge1xuICAgIGRpc3BsYXk6IHRhYmxlLWhlYWRlci1ncm91cDsgfVxuICB0cixcbiAgaW1nIHtcbiAgICBwYWdlLWJyZWFrLWluc2lkZTogYXZvaWQ7IH1cbiAgaW1nIHtcbiAgICBtYXgtd2lkdGg6IDEwMCUgIWltcG9ydGFudDsgfVxuICBwLFxuICBoMixcbiAgaDMge1xuICAgIG9ycGhhbnM6IDM7XG4gICAgd2lkb3dzOiAzOyB9XG4gIGgyLFxuICBoMyB7XG4gICAgcGFnZS1icmVhay1hZnRlcjogYXZvaWQ7IH0gfVxuXG4jaGVhZGVyLWNvbnRhaW5lciB7XG4gIG1heC13aWR0aDogOTYwcHg7XG4gIG1hcmdpbi1sZWZ0OiBhdXRvO1xuICBtYXJnaW4tcmlnaHQ6IGF1dG87IH1cbiAgI2hlYWRlci1jb250YWluZXI6OmFmdGVyIHtcbiAgICBjbGVhcjogYm90aDtcbiAgICBjb250ZW50OiBcIlwiO1xuICAgIGRpc3BsYXk6IHRhYmxlOyB9XG5cbiNsb2dvLWNvbnRhaW5lciB7XG4gIGJhY2tncm91bmQtY29sb3I6ICNGRkZGRkY7XG4gIHdpZHRoOiBhdXRvO1xuICBoZWlnaHQ6IGF1dG87XG4gIC8qcG9zaXRpb246IGFic29sdXRlOyBsZWZ0OiAyMHB4OyB0b3A6IDBweDsqL1xuICBmb250LWZhbWlseTogQmVhdmVyO1xuICBvcGFjaXR5OiAwLjk7XG4gIGZsb2F0OiBsZWZ0O1xuICBkaXNwbGF5OiBibG9jaztcbiAgbWFyZ2luLXJpZ2h0OiAyLjM1NzY1JTtcbiAgd2lkdGg6IDIzLjIzMTc2JTsgfVxuICAjbG9nby1jb250YWluZXIgaW1nIHtcbiAgICBtYXJnaW46IDA7XG4gICAgcGFkZGluZzogMDsgfVxuICAjbG9nby1jb250YWluZXIgaDEge1xuICAgIGZvbnQtc2l6ZTogMzIuNHB4O1xuICAgIHBhZGRpbmc6IDA7XG4gICAgbWFyZ2luOiAwIDBweDsgfVxuICAjbG9nby1jb250YWluZXIgcCB7XG4gICAgcGFkZGluZzogMDtcbiAgICBtYXJnaW46IDAgMnB4OyB9XG4gICNsb2dvLWNvbnRhaW5lcjpsYXN0LWNoaWxkIHtcbiAgICBtYXJnaW4tcmlnaHQ6IDA7IH1cblxuI2hlYWRlci1iYW5uZXIge1xuICBiYWNrZ3JvdW5kOiB1cmwoaW1nL2thc2hhbmEucG5nKTtcbiAgaGVpZ2h0OiAyNzBweDsgfVxuXG5ib2R5IGZvb3RlciB7XG4gIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCh0byBib3R0b20sICMxODE4MTggMCUsICMzNDM0MzQgMTAwJSk7XG4gIC8qIFczQyAqL1xuICBjb2xvcjogd2hpdGU7XG4gIHBhZGRpbmc6IDIwcHggMDtcbiAgdGV4dC1hbGlnbjogY2VudGVyOyB9XG5cbi5uYXYtY29udGFpbmVyIHtcbiAgbWF4LXdpZHRoOiA5NjBweDtcbiAgbWFyZ2luLWxlZnQ6IGF1dG87XG4gIG1hcmdpbi1yaWdodDogYXV0bzsgfVxuICAubmF2LWNvbnRhaW5lcjo6YWZ0ZXIge1xuICAgIGNsZWFyOiBib3RoO1xuICAgIGNvbnRlbnQ6IFwiXCI7XG4gICAgZGlzcGxheTogdGFibGU7IH1cblxuaGVhZGVyIG5hdiB7XG4gIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCh0byBib3R0b20sICM3ZDdlN2QgMCUsICMwZTBlMGUgMTAwJSk7XG4gIC8qIFczQyAqL1xuICB3aWR0aDogMTAwJTtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrOyB9XG4gIGhlYWRlciBuYXYgYSB7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gICAgY29sb3I6IHdoaXRlO1xuICAgIGZvbnQtd2VpZ2h0OiBib2xkOyB9XG4gICAgaGVhZGVyIG5hdiBhOmhvdmVyIHtcbiAgICAgIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lOyB9XG4gICAgaGVhZGVyIG5hdiBhOmhvdmVyLCBoZWFkZXIgbmF2IGE6dmlzaXRlZCB7XG4gICAgICBjb2xvcjogd2hpdGU7IH1cbiAgaGVhZGVyIG5hdiB1bCB7XG4gICAgbGlzdC1zdHlsZS10eXBlOiBub25lO1xuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICBtYXJnaW46IDA7XG4gICAgcGFkZGluZzogMDsgfVxuICBoZWFkZXIgbmF2IGxpIHtcbiAgICBmbG9hdDogbGVmdDtcbiAgICBwYWRkaW5nOiAwLjNlbSAwLjZlbTtcbiAgICBjb2xvcjogd2hpdGU7XG4gICAgYm9yZGVyLWxlZnQ6IDFweCBzb2xpZCAjNjc2MDYwO1xuICAgIGJvcmRlci1yaWdodDogMXB4IHNvbGlkICMyMzFFMUU7XG4gICAgZm9udC1mYW1pbHk6IGFyaWFsO1xuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgIGZvbnQtc2l6ZTogMS4xZW07IH1cbiAgICBoZWFkZXIgbmF2IGxpOmZpcnN0LWNoaWxkIHtcbiAgICAgIGJvcmRlci1sZWZ0OiBub25lOyB9XG4gICAgaGVhZGVyIG5hdiBsaTpsYXN0LWNoaWxkIHtcbiAgICAgIGJvcmRlci1yaWdodDogbm9uZTsgfVxuXG5mb290ZXIgbmF2IHtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrOyB9XG4gIGZvb3RlciBuYXYgYSB7XG4gICAgY29sb3I6IHdoaXRlOyB9XG4gICAgZm9vdGVyIG5hdiBhOmhvdmVyIHtcbiAgICAgIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lOyB9XG4gICAgZm9vdGVyIG5hdiBhOmhvdmVyLCBmb290ZXIgbmF2IGE6dmlzaXRlZCB7XG4gICAgICBjb2xvcjogd2hpdGU7IH1cbiAgZm9vdGVyIG5hdiB1bCB7XG4gICAgbGlzdC1zdHlsZS10eXBlOiBub25lO1xuICAgIG1hcmdpbjogMDtcbiAgICBwYWRkaW5nOiAwOyB9XG4gIGZvb3RlciBuYXYgbGkge1xuICAgIGZsb2F0OiBsZWZ0O1xuICAgIHBhZGRpbmc6IDAuM2VtIDAuNmVtO1xuICAgIGNvbG9yOiB3aGl0ZTtcbiAgICBmb250LWZhbWlseTogYXJpYWw7IH1cblxuZm9ybSB7XG4gIHdpZHRoOiAxMDAlOyB9XG5cbiNzZWFyY2ggaW5wdXRbdHlwZT1cInRleHRcIl0ge1xuICBib3JkZXItcmFkaXVzOiAwLjVleCAwIDAgMC41ZXg7XG4gIGJvcmRlcjogMDtcbiAgbWFyZ2luOiAwO1xuICAtbW96LWJveC1zaGFkb3c6IGluc2V0IC01cHggLTVweCA1cHggNXB4ICNhYWE7XG4gIC13ZWJraXQtYm94LXNoYWRvdzogaW5zZXQgLTVweCAtNXB4IDVweCA1cHggI2FhYTtcbiAgYm94LXNoYWRvdzogaW5zZXQgMC41ZXggMC41ZXggMC4yNWV4IDBleCAjYWFhO1xuICBmbG9hdDogbGVmdDtcbiAgcGFkZGluZzogMTBweDsgfVxuXG4jc2VhcmNoIGlucHV0W3R5cGU9XCJzdWJtaXRcIl0ge1xuICBib3JkZXItcmFkaXVzOiAwIDAuNWV4IDAuNWV4IDA7XG4gIGJhY2tncm91bmQtY29sb3I6ICNBRDFFMUU7XG4gIGNvbG9yOiB3aGl0ZTtcbiAgYm9yZGVyOiAwO1xuICBmbG9hdDogbGVmdDtcbiAgcGFkZGluZzogMTBweDsgfVxuXG5tYWluIGFzaWRlIHtcbiAgZmxvYXQ6IGxlZnQ7XG4gIGRpc3BsYXk6IGJsb2NrO1xuICBtYXJnaW4tcmlnaHQ6IDIuMzU3NjUlO1xuICB3aWR0aDogMzEuNzYxNTclO1xuICBtYXJnaW4tbGVmdDogOC41Mjk4JTsgfVxuICBtYWluIGFzaWRlOmxhc3QtY2hpbGQge1xuICAgIG1hcmdpbi1yaWdodDogMDsgfVxuXG4vKmh0bWwgeyovXG4vKmJhY2tncm91bmQtY29sb3I6ICNGNkY2Rjc7Ki9cbi8qfSovXG5ib2R5IHtcbiAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XG4gIGJveC1zaGFkb3c6IDAgMCAxMHB4IHJnYmEoNzYsIDc2LCA3NiwgMC43KTsgfVxuXG5ib2R5IG1haW4ge1xuICBtYXgtd2lkdGg6IDk2MHB4O1xuICBtYXJnaW4tbGVmdDogYXV0bztcbiAgbWFyZ2luLXJpZ2h0OiBhdXRvO1xuICBtYXJnaW4tdG9wOiAxcHg7IH1cbiAgYm9keSBtYWluOjphZnRlciB7XG4gICAgY2xlYXI6IGJvdGg7XG4gICAgY29udGVudDogXCJcIjtcbiAgICBkaXNwbGF5OiB0YWJsZTsgfVxuXG4jYWRzIGltZyB7XG4gIGZsb2F0OiBsZWZ0O1xuICBkaXNwbGF5OiBibG9jaztcbiAgbWFyZ2luLXJpZ2h0OiAyLjM1NzY1JTtcbiAgd2lkdGg6IDMxLjc2MTU3JTsgfVxuICAjYWRzIGltZzpsYXN0LWNoaWxkIHtcbiAgICBtYXJnaW4tcmlnaHQ6IDA7IH1cblxuI25ld3Mge1xuICBmbG9hdDogbGVmdDtcbiAgZGlzcGxheTogYmxvY2s7XG4gIG1hcmdpbi1yaWdodDogMi4zNTc2NSU7XG4gIHdpZHRoOiAxMDAlOyB9XG4gICNuZXdzOmxhc3QtY2hpbGQge1xuICAgIG1hcmdpbi1yaWdodDogMDsgfVxuICAjbmV3cyB1bCB7XG4gICAgbGlzdC1zdHlsZTogbm9uZTtcbiAgICBwYWRkaW5nOiAwOyB9XG4gICNuZXdzIGxpIHtcbiAgICBmbG9hdDogbGVmdDtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICBtYXJnaW4tcmlnaHQ6IDIuMzU3NjUlO1xuICAgIHdpZHRoOiAzMS43NjE1NyU7XG4gICAgbWFyZ2luLXRvcDogMzBweDsgfVxuICAgICNuZXdzIGxpOmxhc3QtY2hpbGQge1xuICAgICAgbWFyZ2luLXJpZ2h0OiAwOyB9XG4gICNuZXdzIGxpOm50aC1jaGlsZCgzbikge1xuICAgIG1hcmdpbi1yaWdodDogMDsgfVxuICAjbmV3cyBhcnRpY2xlIHtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgbWF4LWhlaWdodDogNDAwcHg7XG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpczsgfVxuICAgICNuZXdzIGFydGljbGUgaW1nIHtcbiAgICAgIHdpZHRoOiAxMDAlOyB9XG4gICNuZXdzIGhlYWRlciB7XG4gICAgaGVpZ2h0OiAyMDBweDsgfVxuICAjbmV3cyBzZWN0aW9uOmFmdGVyIHtcbiAgICBjb250ZW50OiBcIlwiO1xuICAgIGhlaWdodDogMjAwcHg7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIGxlZnQ6IDA7XG4gICAgYm90dG9tOiAwO1xuICAgIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCh0cmFuc3BhcmVudCA1MCUsIHdoaXRlKTsgfVxuICAjbmV3cyBhIHtcbiAgICBjb2xvcjogYmxhY2s7IH1cblxuLm5ld3Mge1xuICBmbG9hdDogbGVmdDtcbiAgZGlzcGxheTogYmxvY2s7XG4gIG1hcmdpbi1yaWdodDogMi4zNTc2NSU7XG4gIHdpZHRoOiAxMDAlOyB9XG4gIC5uZXdzOmxhc3QtY2hpbGQge1xuICAgIG1hcmdpbi1yaWdodDogMDsgfVxuICAubmV3cyB1bCB7XG4gICAgbGlzdC1zdHlsZTogbm9uZTtcbiAgICBwYWRkaW5nOiAwOyB9XG4gIC5uZXdzIGxpIHtcbiAgICBmbG9hdDogbGVmdDtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICBtYXJnaW4tcmlnaHQ6IDIuMzU3NjUlO1xuICAgIHdpZHRoOiAzMS43NjE1NyU7XG4gICAgbWFyZ2luLXRvcDogMzBweDsgfVxuICAgIC5uZXdzIGxpOmxhc3QtY2hpbGQge1xuICAgICAgbWFyZ2luLXJpZ2h0OiAwOyB9XG4gIC5uZXdzIGxpOm50aC1jaGlsZCgzbikge1xuICAgIG1hcmdpbi1yaWdodDogMDsgfVxuICAubmV3cyBhcnRpY2xlIHtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgbWF4LWhlaWdodDogNDAwcHg7XG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpczsgfVxuICAgIC5uZXdzIGFydGljbGUgaW1nIHtcbiAgICAgIHdpZHRoOiAxMDAlOyB9XG4gIC5uZXdzIGhlYWRlciB7XG4gICAgaGVpZ2h0OiAyMDBweDsgfVxuICAubmV3cyBzZWN0aW9uOmFmdGVyIHtcbiAgICBjb250ZW50OiBcIlwiO1xuICAgIGhlaWdodDogMjAwcHg7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIGxlZnQ6IDA7XG4gICAgYm90dG9tOiAwO1xuICAgIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCh0cmFuc3BhcmVudCA1MCUsIHdoaXRlKTsgfVxuICAubmV3cyBhIHtcbiAgICBjb2xvcjogYmxhY2s7IH1cblxuLmJyb3dzZXJ1cGdyYWRlIHtcbiAgbWFyZ2luOiAwLjJlbSAwO1xuICBiYWNrZ3JvdW5kOiAjY2NjO1xuICBjb2xvcjogIzAwMDtcbiAgcGFkZGluZzogMC4yZW0gMDsgfVxuXG5vbCA+IGxpIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogRjRGNUY3O1xuICBiYWNrZ3JvdW5kLWltYWdlOiAtd2Via2l0LWxpbmVhci1ncmFkaWVudCggcmlnaHQgLCAjRkZGLCAjRjRGNUY3KTtcbiAgYmFja2dyb3VuZC1pbWFnZTogbGluZWFyLWdyYWRpZW50KHRvIGxlZnQsICNGRkYsICNGNEY1RjcpO1xuICBmbG9hdDogbGVmdDtcbiAgZm9udC1mYW1pbHk6IFwiTHVjaWRhIEdyYW5kZVwiLCBcIlRhaG9tYVwiLCBcIlZlcmRhbmFcIiwgXCJBcmlhbFwiLCBzYW5zLXNlcmlmO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIC13ZWJraXQtdHJhbnNpdGlvbjogYWxsIDAuOHM7XG4gIC1tb3otdHJhbnNpdGlvbjogYWxsIDAuOHM7XG4gIHRyYW5zaXRpb246IGFsbCAwLjhzOyB9XG4gIG9sID4gbGk6OmFmdGVyIHtcbiAgICBjb250ZW50OiBcIiBcIjtcbiAgICBoZWlnaHQ6IDIzcHg7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRvcDogMTBweDtcbiAgICByaWdodDogLTEzcHg7XG4gICAgYm90dG9tOiAwO1xuICAgIGxlZnQ6IDA7XG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZSg0NWRlZykgc2tldygyMGRlZywgMzBkZWcpO1xuICAgIC1tb3otdHJhbnNmb3JtOiByb3RhdGUoNDVkZWcpIHNrZXcoMjBkZWcsIDMwZGVnKTtcbiAgICAtbXMtdHJhbnNmb3JtOiByb3RhdGUoNDVkZWcpIHNrZXcoMjBkZWcsIDMwZGVnKTtcbiAgICAtby10cmFuc2Zvcm06IHJvdGF0ZSg0NWRlZykgc2tldygyMGRlZywgMzBkZWcpO1xuICAgIHRyYW5zZm9ybTogcm90YXRlKDQ1ZGVnKSBza2V3KDIwZGVnLCAzMGRlZyk7XG4gICAgd2lkdGg6IDIzcHg7IH1cblxuLnBhcmVudCB7XG4gIC13ZWJraXQtYm94LWFsaWduOiBzdHJldGNoO1xuICAtbW96LWJveC1hbGlnbjogc3RyZXRjaDtcbiAgYm94LWFsaWduOiBzdHJldGNoO1xuICAtd2Via2l0LWFsaWduLWl0ZW1zOiBzdHJldGNoO1xuICAtbW96LWFsaWduLWl0ZW1zOiBzdHJldGNoO1xuICAtbXMtYWxpZ24taXRlbXM6IHN0cmV0Y2g7XG4gIC1vLWFsaWduLWl0ZW1zOiBzdHJldGNoO1xuICBhbGlnbi1pdGVtczogc3RyZXRjaDtcbiAgLW1zLWZsZXgtYWxpZ246IHN0cmV0Y2g7XG4gIGRpc3BsYXk6IC13ZWJraXQtYm94O1xuICBkaXNwbGF5OiAtbW96LWJveDtcbiAgZGlzcGxheTogYm94O1xuICBkaXNwbGF5OiAtd2Via2l0LWZsZXg7XG4gIGRpc3BsYXk6IC1tb3otZmxleDtcbiAgZGlzcGxheTogLW1zLWZsZXhib3g7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIC13ZWJraXQtYm94LW9yaWVudDogaG9yaXpvbnRhbDtcbiAgLW1vei1ib3gtb3JpZW50OiBob3Jpem9udGFsO1xuICBib3gtb3JpZW50OiBob3Jpem9udGFsO1xuICAtd2Via2l0LWJveC1kaXJlY3Rpb246IG5vcm1hbDtcbiAgLW1vei1ib3gtZGlyZWN0aW9uOiBub3JtYWw7XG4gIGJveC1kaXJlY3Rpb246IG5vcm1hbDtcbiAgLXdlYmtpdC1mbGV4LWRpcmVjdGlvbjogcm93O1xuICAtbW96LWZsZXgtZGlyZWN0aW9uOiByb3c7XG4gIGZsZXgtZGlyZWN0aW9uOiByb3c7XG4gIC1tcy1mbGV4LWRpcmVjdGlvbjogcm93O1xuICAtd2Via2l0LWJveC1wYWNrOiBzdGFydDtcbiAgLW1vei1ib3gtcGFjazogc3RhcnQ7XG4gIGJveC1wYWNrOiBzdGFydDtcbiAgLXdlYmtpdC1qdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7XG4gIC1tb3otanVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xuICAtbXMtanVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xuICAtby1qdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7XG4gIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDtcbiAgLW1zLWZsZXgtcGFjazogc3RhcnQ7IH1cblxuLnBhcmVudCA+IC5jaGlsZCB7XG4gIC13ZWJraXQtYm94LWZsZXg6IDE7XG4gIC1tb3otYm94LWZsZXg6IDE7XG4gIGJveC1mbGV4OiAxO1xuICAtd2Via2l0LWZsZXg6IDE7XG4gIC1tb3otZmxleDogMTtcbiAgLW1zLWZsZXg6IDE7XG4gIGZsZXg6IDE7IH1cblxuI21haW4tbmV3cyBhcnRpY2xlIHtcbiAgZm9udC1mYW1pbHk6IEFkZWxsZSwgR2VvcmdpYSwgc2VyaWY7XG4gIHBhZGRpbmc6IDEwcHg7XG4gIGZvbnQtc2l6ZTogMjBweDtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBmbG9hdDogbGVmdDtcbiAgZGlzcGxheTogYmxvY2s7XG4gIG1hcmdpbi1yaWdodDogMi4zNTc2NSU7XG4gIHdpZHRoOiA0OC44MjExNyU7XG4gIG1hcmdpbi1yaWdodDogMDtcbiAgd2lkdGg6IDUwJTtcbiAgaGVpZ2h0OiAyNzBweDtcbiAgLyogMTY6OSByYXRpbyAqL1xuICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoMTM1ZGVnLCByZ2JhKDY1LCAxMTksIDE3LCAwLjcpLCByZ2JhKDIyMCwgNjYsIDM3LCAwLjcpKTtcbiAgY29sb3I6IHdoaXRlOyB9XG4gICNtYWluLW5ld3MgYXJ0aWNsZTpsYXN0LWNoaWxkIHtcbiAgICBtYXJnaW4tcmlnaHQ6IDA7IH1cbiAgI21haW4tbmV3cyBhcnRpY2xlIGhlYWRlciB7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRvcDogMDsgfVxuICAjbWFpbi1uZXdzIGFydGljbGUgc2VjdGlvbiB7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIGJvdHRvbTogMDsgfVxuICAjbWFpbi1uZXdzIGFydGljbGUgaW1nIHtcbiAgICB6LWluZGV4OiAtMTtcbiAgICBsZWZ0OiAwO1xuICAgIHRvcDogMDtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgLyptYXJnaW46IGF1dG87Ki9cbiAgICBoZWlnaHQ6IDEwMCU7XG4gICAgLyptYXgtaGVpZ2h0OiAxMDAlOyovXG4gICAgd2lkdGg6IDEwMCU7XG4gICAgLyptYXgtd2lkdGg6IDEwMCU7Ki8gfVxuXG4jc2hvd3Mge1xuICBmbG9hdDogbGVmdDtcbiAgZGlzcGxheTogYmxvY2s7XG4gIG1hcmdpbi1yaWdodDogMi4zNTc2NSU7XG4gIHdpZHRoOiA3NC40MTA1OSU7IH1cbiAgI3Nob3dzOmxhc3QtY2hpbGQge1xuICAgIG1hcmdpbi1yaWdodDogMDsgfVxuICAjc2hvd3MgdWwge1xuICAgIGxpc3Qtc3R5bGU6IG5vbmU7XG4gICAgcGFkZGluZzogMDsgfVxuICAjc2hvd3MgbGkge1xuICAgIGZsb2F0OiBsZWZ0O1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIG1hcmdpbi1yaWdodDogMy4xNjg0NCU7XG4gICAgd2lkdGg6IDMxLjIyMTA0JTtcbiAgICBtYXJnaW4tdG9wOiAzMHB4OyB9XG4gICAgI3Nob3dzIGxpOmxhc3QtY2hpbGQge1xuICAgICAgbWFyZ2luLXJpZ2h0OiAwOyB9XG4gICNzaG93cyBsaTpudGgtY2hpbGQoM24pIHtcbiAgICBtYXJnaW4tcmlnaHQ6IDA7IH1cbiAgI3Nob3dzIGFydGljbGUge1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICBtYXgtaGVpZ2h0OiA0MDBweDtcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzOyB9XG4gICAgI3Nob3dzIGFydGljbGUgaW1nIHtcbiAgICAgIHdpZHRoOiAxMDAlOyB9XG4gICNzaG93cyBoZWFkZXIge1xuICAgIGhlaWdodDogMjAwcHg7IH1cbiAgI3Nob3dzIHNlY3Rpb246YWZ0ZXIge1xuICAgIGNvbnRlbnQ6IFwiXCI7XG4gICAgaGVpZ2h0OiAyMDBweDtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgbGVmdDogMDtcbiAgICBib3R0b206IDA7XG4gICAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KHRyYW5zcGFyZW50IDUwJSwgd2hpdGUpOyB9XG4gICNzaG93cyBhIHtcbiAgICBjb2xvcjogYmxhY2s7IH1cblxuI3Nob3dzIHtcbiAgbWFyZ2luOiAwO1xuICBwYWRkaW5nOiAwOyB9XG5cbiNzaG93cyB1bCB7XG4gIGxpc3Qtc3R5bGU6IG5vbmU7XG4gIG1hcmdpbjogMDtcbiAgcGFkZGluZzogMDtcbiAgdGV4dC1hbGlnbjogY2VudGVyOyB9XG5cbiNzaG93cyBsaSB7XG4gIG92ZXJmbG93OiBoaWRkZW47XG4gIG1hcmdpbi1yaWdodDogMTBweDtcbiAgbWFyZ2luLXRvcDogMDtcbiAgbWFyZ2luLWJvdHRvbTogMTBweDtcbiAgcGFkZGluZzogMDsgfVxuXG4jc2hvd3MgbGkgaDMge1xuICBib3JkZXItcmFkaXVzOiAwcHggMHB4IDVweCA1cHg7XG4gIG1hcmdpbjogMDtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuICBoZWlnaHQ6IDE1JTsgfVxuXG4jbWVqaWJvIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogI0NEMjBCRTsgfVxuXG4jc2FudGEtcm9ja3NhbGlhIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogI0Y5QTQzMzsgfVxuXG4jdGl0dWxhcmVzLXNwb3J0IHtcbiAgYmFja2dyb3VuZC1jb2xvcjogIzc4QzgyQztcbiAgZm9udC1zaXplOiAxZW07IH1cblxuI3Nvbmljby1qYXJkaW4ge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMzg5QkM5O1xuICBmb250LXNpemU6IDAuOGVtOyB9XG5cbiNzb25hbmRvLWRpYXJpbyB7XG4gIGJhY2tncm91bmQtY29sb3I6ICNCQzMwMTc7IH1cblxuI3VzdHJlYW0ge1xuICBmbG9hdDogbGVmdDtcbiAgZGlzcGxheTogYmxvY2s7XG4gIG1hcmdpbi1yaWdodDogMi4zNTc2NSU7XG4gIHdpZHRoOiAyMy4yMzE3NiU7IH1cbiAgI3VzdHJlYW06bGFzdC1jaGlsZCB7XG4gICAgbWFyZ2luLXJpZ2h0OiAwOyB9XG5cbi5vbGQtbmV3cyAudmlld3MtZmllbGQtdGl0bGUsICNzaG93cyAudGV4dC1jb250YWluZXIge1xuICBiYWNrZ3JvdW5kOiAjMjUxZTFjO1xuICBiYWNrZ3JvdW5kOiByZ2JhKDM3LCAzMCwgMjgsIDAuOSk7XG4gIGZpbHRlcjogcHJvZ2lkOkRYSW1hZ2VUcmFuc2Zvcm0uTWljcm9zb2Z0LmdyYWRpZW50KHN0YXJ0Q29sb3JzdHI9I0U1MjUxRTFDLCBlbmRDb2xvcnN0cj0jRTUyNTFFMUMpO1xuICAtbXMtZmlsdGVyOiBcInByb2dpZDpEWEltYWdlVHJhbnNmb3JtLk1pY3Jvc29mdC5ncmFkaWVudChzdGFydENvbG9yc3RyPSNFNTI1MUUxQywgZW5kQ29sb3JzdHI9I0U1MjUxRTFDKVwiOyB9XG5cbi5pZTYtOCAub2xkLW5ld3MgLnZpZXdzLWZpZWxkLXRpdGxlLCAuaWU2LTggI3Nob3dzIC50ZXh0LWNvbnRhaW5lciB7XG4gIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50OyB9XG5cbi5pZTYgLm9sZC1uZXdzIC52aWV3cy1maWVsZC1maWVsZC1pbWFnZSB7XG4gIGZsb2F0OiBsZWZ0OyB9XG5cbiNzaG93cyAub3V0ZXItY29udGFpbmVyIHtcbiAgYm9yZGVyLXJhZGl1czogNXB4O1xuICBib3JkZXI6IDFweCBzb2xpZCBibGFjaztcbiAgYm94LXNoYWRvdzogMHB4IDEwcHggMTBweCAjY2NjOyB9XG5cbiNzaG93cyAuY29udGFpbmVyIHtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7IH1cblxuI3Nob3dzIC50ZXh0LWNvbnRhaW5lciB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgYm90dG9tOiAwO1xuICBsZWZ0OiAwO1xuICBjb2xvcjogd2hpdGU7XG4gIHdpZHRoOiAxMDAlO1xuICBmb250LXNpemU6IDFlbTsgfVxuXG4jc2hvd3MgLmZpZWxkLWNvbnRlbnQge1xuICAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBhbnRpYWxpYXNlZDtcbiAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTtcbiAgY29sb3I6IHdoaXRlO1xuICBkaXNwbGF5OiBibG9jaztcbiAgZm9udC1mYW1pbHk6ICdUcmVidWNoZXQgTVMnLCAnSGVsdmV0aWNhIE5ldWUnLCBBcmlhbCwgSGVsdmV0aWNhLCBzYW5zLXNlcmlmO1xuICBmb250LXNpemU6IDEzLjAwOHB4O1xuICBmb250LXdlaWdodDogYm9sZDtcbiAgbGluZS1oZWlnaHQ6IDE5LjUxMnB4O1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIHpvb206IDE7IH1cblxuI3Nob3dzIHAge1xuICAvKm1hcmdpbi10b3A6IDBlbTsqL1xuICAvKm1hcmdpbi1ib3R0b206IDBlbTsqL1xuICAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBhbnRpYWxpYXNlZDtcbiAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTtcbiAgY29sb3I6IHdoaXRlO1xuICBkaXNwbGF5OiBibG9jaztcbiAgZm9udC1mYW1pbHk6ICdUcmVidWNoZXQgTVMnLCAnSGVsdmV0aWNhIE5ldWUnLCBBcmlhbCwgSGVsdmV0aWNhLCBzYW5zLXNlcmlmO1xuICBmb250LXNpemU6IDEzLjAwOHB4O1xuICBoZWlnaHQ6IDE5cHg7XG4gIGxpbmUtaGVpZ2h0OiAxOS41MTJweDtcbiAgbWFyZ2luLWJvdHRvbTogMHB4O1xuICBtYXJnaW4tdG9wOiAwcHg7XG4gIHBhZGRpbmctYm90dG9tOiAwcHg7XG4gIHBhZGRpbmctbGVmdDogMHB4O1xuICBwYWRkaW5nLXJpZ2h0OiAwcHg7XG4gIHBhZGRpbmctdG9wOiAwcHg7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgd2lkdGg6IDE2MXB4O1xuICB6b29tOiAxOyB9XG5cbiNzaG93cyAudmlld3MtZmllbGQtZmllbGQtc2NoZWR1bGUge1xuICBmb250LXdlaWdodDogYm9sZDsgfVxuXG4jc2hvd3MgLnZpZXdzLWZpZWxkLWZpZWxkLWRheXMge1xuICBmb250LXdlaWdodDogYm9sZDsgfVxuXG4jc2hvd3MgaW1nIHtcbiAgZGlzcGxheTogYmxvY2s7IH1cblxuI3Nob3dzIC52aWV3cy1maWVsZC10aXRsZSwgI3Nob3dzIC52aWV3cy1maWVsZC10aXRsZSBhIHtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuICBmb250LXNpemU6IDEuMmVtO1xuICBjb2xvcjogYmxhY2s7XG4gIHRleHQtc2hhZG93OiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuOSkgMHB4IDNweCAzcHg7XG4gIGZvbnQtd2VpZ2h0OiBib2xkZXI7XG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgLXdlYmtpdC1mb250LXNtb290aGluZzogYW50aWFsaWFzZWQ7XG4gIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XG4gIGNvbG9yOiBibGFjaztcbiAgZGlzcGxheTogYmxvY2s7XG4gIGZvbnQtZmFtaWx5OiAnVHJlYnVjaGV0IE1TJywgJ0hlbHZldGljYSBOZXVlJywgQXJpYWwsIEhlbHZldGljYSwgc2Fucy1zZXJpZjtcbiAgZm9udC1zaXplOiAxNS42MDk2cHg7XG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xuICBoZWlnaHQ6IDIzLjQwNjJweDtcbiAgbGluZS1oZWlnaHQ6IDIzLjQxNDRweDtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gIHRleHQtc2hhZG93OiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuOTAxOTYxKSAwcHggM3B4IDNweDtcbiAgem9vbTogMTsgfVxuXG4jc2hvd3MgLnZpZXdzLWZpZWxkLXRpdGxlIHtcbiAgaGVpZ2h0OiAxLjVlbTsgfVxuXG4jc29uYW5kby1kaWFyaW8ge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjQkUzMTE3OyB9XG5cbiNzYW50YS1yb2Nrc2FsaWEge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjRjlBNDMzOyB9XG5cbiNzb3VuZC1nYXJkZW4ge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMzg5QkNBO1xuICBmb250LXNpemU6IDAuOWVtOyB9XG5cbiN0aXR1bGFyZXMtc3BvcnQge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjNzhDODJDO1xuICBmb250LXNpemU6IDEuMWVtOyB9XG5cbiNtZWppYm8ge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjQ0UyMUJGOyB9XG5cbiNzaWRlYmFyIHtcbiAgZmxvYXQ6IGxlZnQ7XG4gIGRpc3BsYXk6IGJsb2NrO1xuICBtYXJnaW4tcmlnaHQ6IDIuMzU3NjUlO1xuICB3aWR0aDogMjMuMjMxNzYlOyB9XG4gICNzaWRlYmFyOmxhc3QtY2hpbGQge1xuICAgIG1hcmdpbi1yaWdodDogMDsgfVxuXG5ib2R5IHtcbiAgZm9udDogMTZweC8yNnB4IEhlbHZldGljYSwgSGVsdmV0aWNhIE5ldWUsIEFyaWFsOyB9XG5cbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXdvSkluWmxjbk5wYjI0aU9pQXpMQW9KSW1acGJHVWlPaUFpYldGcGJpNWpjM01pTEFvSkluTnZkWEpqWlhNaU9pQmJDZ2tKSWk0dUwyRnpjMlYwY3k5emRIbHNaWE5vWldWMGN5OXRZV2x1TG5OamMzTWlMQW9KQ1NJdUxpOTJaVzVrYjNJdmJtOXliV0ZzYVhwbElpd0tDUWtpTGk0dlltOTFjbUp2YmlJc0Nna0pJaTR1TDI1bFlYUWlMQW9KQ1NJdUxpOTFkR2xzY3k5MllYSnBZV0pzWlhNaUxBb0pDU0l1TGk5MWRHbHNjeTltZFc1amRHbHZibk1pTEFvSkNTSXVMaTkxZEdsc2N5OXRhWGhwYm5NaUxBb0pDU0l1TGk5aVlYTmxMMkpoYzJVaUxBb0pDU0l1TGk5aVlYTmxMMlp2Ym5Seklpd0tDUWtpTGk0dlltRnpaUzkwZVhCdlozSmhjR2g1SWl3S0NRa2lMaTR2WW1GelpTOW9aV3h3WlhKeklpd0tDUWtpTGk0dlltRnpaUzl3Y21sdWRDSXNDZ2tKSWk0dUwyeGhlVzkxZEM5b1pXRmtaWElpTEFvSkNTSXVMaTlzWVhsdmRYUXZabTl2ZEdWeUlpd0tDUWtpTGk0dmJHRjViM1YwTDI1aGRtbG5ZWFJwYjI0aUxBb0pDU0l1TGk5c1lYbHZkWFF2Wm05eWJYTWlMQW9KQ1NJdUxpOXNZWGx2ZFhRdmMybGtaV0poY2lJc0Nna0pJaTR1TDJ4aGVXOTFkQzl3WVdkbElpd0tDUWtpTGk0dlkyOXRjRzl1Wlc1MGN5OWlkWFIwYjI1eklpd0tDUWtpTGk0dlkyOXRjRzl1Wlc1MGN5OTFjR2R5WVdSbElpd0tDUWtpTGk0dmNHRm5aWE12YUc5dFpTSXNDZ2tKSWk0dUwzUm9aVzFsY3k5a1pXWmhkV3gwSWl3S0NRa2lMaTR2YzJWMGRHbHVaM012Y0hKbFptbDRaWElpTEFvSkNTSXVMaTl6WlhSMGFXNW5jeTl3ZUMxMGJ5MWxiU0lzQ2drSklpNHVMM05sZEhScGJtZHpMMkZ6YzJWMExYQnBjR1ZzYVc1bElpd0tDUWtpTGk0dlpuVnVZM1JwYjI1ekwyRnpjMmxuYmkxcGJuQjFkSE1pTEFvSkNTSXVMaTltZFc1amRHbHZibk12WTI5dWRHRnBibk1pTEFvSkNTSXVMaTltZFc1amRHbHZibk12WTI5dWRHRnBibk10Wm1Gc2Mza2lMQW9KQ1NJdUxpOW1kVzVqZEdsdmJuTXZhWE10YkdWdVozUm9JaXdLQ1FraUxpNHZablZ1WTNScGIyNXpMMmx6TFd4cFoyaDBJaXdLQ1FraUxpNHZablZ1WTNScGIyNXpMMmx6TFc1MWJXSmxjaUlzQ2drSklpNHVMMloxYm1OMGFXOXVjeTlwY3kxemFYcGxJaXdLQ1FraUxpNHZablZ1WTNScGIyNXpMM0I0TFhSdkxXVnRJaXdLQ1FraUxpNHZablZ1WTNScGIyNXpMM0I0TFhSdkxYSmxiU0lzQ2drSklpNHVMMloxYm1OMGFXOXVjeTl6YUdGa1pTSXNDZ2tKSWk0dUwyWjFibU4wYVc5dWN5OXpkSEpwY0MxMWJtbDBjeUlzQ2drSklpNHVMMloxYm1OMGFXOXVjeTkwYVc1MElpd0tDUWtpTGk0dlpuVnVZM1JwYjI1ekwzUnlZVzV6YVhScGIyNHRjSEp2Y0dWeWRIa3RibUZ0WlNJc0Nna0pJaTR1TDJaMWJtTjBhVzl1Y3k5MWJuQmhZMnNpTEFvSkNTSXVMaTltZFc1amRHbHZibk12Ylc5a2RXeGhjaTF6WTJGc1pTSXNDZ2tKSWk0dUwyaGxiSEJsY25NdlkyOXVkbVZ5ZEMxMWJtbDBjeUlzQ2drSklpNHVMMmhsYkhCbGNuTXZaR2x5WldOMGFXOXVZV3d0ZG1Gc2RXVnpJaXdLQ1FraUxpNHZhR1ZzY0dWeWN5OW1iMjUwTFhOdmRYSmpaUzFrWldOc1lYSmhkR2x2YmlJc0Nna0pJaTR1TDJobGJIQmxjbk12WjNKaFpHbGxiblF0Y0c5emFYUnBiMjV6TFhCaGNuTmxjaUlzQ2drSklpNHVMMmhsYkhCbGNuTXZiR2x1WldGeUxXRnVaMnhsTFhCaGNuTmxjaUlzQ2drSklpNHVMMmhsYkhCbGNuTXZiR2x1WldGeUxXZHlZV1JwWlc1MExYQmhjbk5sY2lJc0Nna0pJaTR1TDJobGJIQmxjbk12YkdsdVpXRnlMWEJ2YzJsMGFXOXVjeTF3WVhKelpYSWlMQW9KQ1NJdUxpOW9aV3h3WlhKekwyeHBibVZoY2kxemFXUmxMV052Y201bGNpMXdZWEp6WlhJaUxBb0pDU0l1TGk5b1pXeHdaWEp6TDNKaFpHbGhiQzFoY21jdGNHRnljMlZ5SWl3S0NRa2lMaTR2YUdWc2NHVnljeTl5WVdScFlXd3RjRzl6YVhScGIyNXpMWEJoY25ObGNpSXNDZ2tKSWk0dUwyaGxiSEJsY25NdmNtRmthV0ZzTFdkeVlXUnBaVzUwTFhCaGNuTmxjaUlzQ2drSklpNHVMMmhsYkhCbGNuTXZjbVZ1WkdWeUxXZHlZV1JwWlc1MGN5SXNDZ2tKSWk0dUwyaGxiSEJsY25NdmMyaGhjR1V0YzJsNlpTMXpkSEpwY0hCbGNpSXNDZ2tKSWk0dUwyaGxiSEJsY25NdmMzUnlMWFJ2TFc1MWJTSXNDZ2tKSWk0dUwyTnpjek12WVc1cGJXRjBhVzl1SWl3S0NRa2lMaTR2WTNOek15OWhjSEJsWVhKaGJtTmxJaXdLQ1FraUxpNHZZM056TXk5aVlXTnJabUZqWlMxMmFYTnBZbWxzYVhSNUlpd0tDUWtpTGk0dlkzTnpNeTlpWVdOclozSnZkVzVrSWl3S0NRa2lMaTR2WTNOek15OWlZV05yWjNKdmRXNWtMV2x0WVdkbElpd0tDUWtpTGk0dlkzTnpNeTlpYjNKa1pYSXRhVzFoWjJVaUxBb0pDU0l1TGk5amMzTXpMMk5oYkdNaUxBb0pDU0l1TGk5amMzTXpMMk52YkhWdGJuTWlMQW9KQ1NJdUxpOWpjM016TDJacGJIUmxjaUlzQ2drSklpNHVMMk56Y3pNdlpteGxlQzFpYjNnaUxBb0pDU0l1TGk5amMzTXpMMlp2Ym5RdFptRmpaU0lzQ2drSklpNHVMMk56Y3pNdlptOXVkQzFtWldGMGRYSmxMWE5sZEhScGJtZHpJaXdLQ1FraUxpNHZZM056TXk5b2FXUndhUzF0WldScFlTMXhkV1Z5ZVNJc0Nna0pJaTR1TDJOemN6TXZhSGx3YUdWdWN5SXNDZ2tKSWk0dUwyTnpjek12YVcxaFoyVXRjbVZ1WkdWeWFXNW5JaXdLQ1FraUxpNHZZM056TXk5clpYbG1jbUZ0WlhNaUxBb0pDU0l1TGk5amMzTXpMMnhwYm1WaGNpMW5jbUZrYVdWdWRDSXNDZ2tKSWk0dUwyTnpjek12Y0dWeWMzQmxZM1JwZG1VaUxBb0pDU0l1TGk5amMzTXpMM0JzWVdObGFHOXNaR1Z5SWl3S0NRa2lMaTR2WTNOek15OXlZV1JwWVd3dFozSmhaR2xsYm5RaUxBb0pDU0l1TGk5amMzTXpMM05sYkdWamRHbHZiaUlzQ2drSklpNHVMMk56Y3pNdmRHVjRkQzFrWldOdmNtRjBhVzl1SWl3S0NRa2lMaTR2WTNOek15OTBjbUZ1YzJadmNtMGlMQW9KQ1NJdUxpOWpjM016TDNSeVlXNXphWFJwYjI0aUxBb0pDU0l1TGk5amMzTXpMM1Z6WlhJdGMyVnNaV04wSWl3S0NRa2lMaTR2WVdSa2IyNXpMMkp2Y21SbGNpMWpiMnh2Y2lJc0Nna0pJaTR1TDJGa1pHOXVjeTlpYjNKa1pYSXRjbUZrYVhWeklpd0tDUWtpTGk0dllXUmtiMjV6TDJKdmNtUmxjaTF6ZEhsc1pTSXNDZ2tKSWk0dUwyRmtaRzl1Y3k5aWIzSmtaWEl0ZDJsa2RHZ2lMQW9KQ1NJdUxpOWhaR1J2Ym5NdlluVjBkRzl1Y3lJc0Nna0pJaTR1TDJGa1pHOXVjeTlqYkdWaGNtWnBlQ0lzQ2drSklpNHVMMkZrWkc5dWN5OWxiR3hwY0hOcGN5SXNDZ2tKSWk0dUwyRmtaRzl1Y3k5bWIyNTBMWE4wWVdOcmN5SXNDZ2tKSWk0dUwyRmtaRzl1Y3k5b2FXUmxMWFJsZUhRaUxBb0pDU0l1TGk5aFpHUnZibk12YldGeVoybHVJaXdLQ1FraUxpNHZZV1JrYjI1ekwzQmhaR1JwYm1jaUxBb0pDU0l1TGk5aFpHUnZibk12Y0c5emFYUnBiMjRpTEFvSkNTSXVMaTloWkdSdmJuTXZjSEpsWm1sNFpYSWlMQW9KQ1NJdUxpOWhaR1J2Ym5NdmNtVjBhVzVoTFdsdFlXZGxJaXdLQ1FraUxpNHZZV1JrYjI1ekwzTnBlbVVpTEFvSkNTSXVMaTloWkdSdmJuTXZkR1Y0ZEMxcGJuQjFkSE1pTEFvSkNTSXVMaTloWkdSdmJuTXZkR2x0YVc1bkxXWjFibU4wYVc5dWN5SXNDZ2tKSWk0dUwyRmtaRzl1Y3k5MGNtbGhibWRzWlNJc0Nna0pJaTR1TDJGa1pHOXVjeTkzYjNKa0xYZHlZWEFpTEFvSkNTSXVMaTlpYjNWeVltOXVMV1JsY0hKbFkyRjBaV1F0ZFhCamIyMXBibWNpTEFvSkNTSXVMaTl1WldGMExXaGxiSEJsY25NaUxBb0pDU0l1TGk5bmNtbGtMM0J5YVhaaGRHVWlMQW9KQ1NJdUxpOW5jbWxrTDJKdmVDMXphWHBwYm1jaUxBb0pDU0l1TGk5bmNtbGtMMjl0WldkaElpd0tDUWtpTGk0dlozSnBaQzl2ZFhSbGNpMWpiMjUwWVdsdVpYSWlMQW9KQ1NJdUxpOW5jbWxrTDNOd1lXNHRZMjlzZFcxdWN5SXNDZ2tKSWk0dUwyZHlhV1F2Y205M0lpd0tDUWtpTGk0dlozSnBaQzl6YUdsbWRDSXNDZ2tKSWk0dUwyZHlhV1F2Y0dGa0lpd0tDUWtpTGk0dlozSnBaQzltYVd4c0xYQmhjbVZ1ZENJc0Nna0pJaTR1TDJkeWFXUXZiV1ZrYVdFaUxBb0pDU0l1TGk5bmNtbGtMM1J2TFdSbGNISmxZMkYwWlNJc0Nna0pJaTR1TDJkeWFXUXZkbWx6ZFdGc0xXZHlhV1FpTEFvSkNTSXVMaTluY21sa0wyUnBjM0JzWVhrdFkyOXVkR1Y0ZENJc0Nna0pJaTR1TDJkeWFXUXZaR2x5WldOMGFXOXVMV052Ym5SbGVIUWlMQW9KQ1NJdUxpOW1kVzVqZEdsdmJuTXZjSEpwZG1GMFpTSXNDZ2tKSWk0dUwyWjFibU4wYVc5dWN5OXVaWGN0WW5KbFlXdHdiMmx1ZENJc0Nna0pJaTR1TDNObGRIUnBibWR6TDJkeWFXUWlMQW9KQ1NJdUxpOXpaWFIwYVc1bmN5OTJhWE4xWVd3dFozSnBaQ0lzQ2drSklpNHVMM05sZEhScGJtZHpMMlJwYzJGaWJHVXRkMkZ5Ym1sdVozTWlDZ2xkTEFvSkluTnZkWEpqWlhORGIyNTBaVzUwSWpvZ1d3b0pDU0pBWTJoaGNuTmxkQ0FuVlZSR0xUZ25PMXh1WEc0dkx5QXhMaUJXWlc1a2IzSnpYRzVBYVcxd2IzSjBYRzRnSUNkMlpXNWtiM0l2Ym05eWJXRnNhWHBsSnl4Y2JpQWdKMkp2ZFhKaWIyNG5MRnh1SUNBbmJtVmhkQ2M3WEc1Y2JpOHZJREl1SUVOdmJtWnBaM1Z5WVhScGIyNGdZVzVrSUdobGJIQmxjbk5jYmtCcGJYQnZjblJjYmlBZ0ozVjBhV3h6TDNaaGNtbGhZbXhsY3ljc1hHNGdJQ2QxZEdsc2N5OW1kVzVqZEdsdmJuTW5MRnh1SUNBbmRYUnBiSE12YldsNGFXNXpKenRjYmx4dUx5OGdNeTRnUW1GelpTQnpkSFZtWmx4dVFHbHRjRzl5ZEZ4dUlDQW5ZbUZ6WlM5aVlYTmxKeXhjYmlBZ0oySmhjMlV2Wm05dWRITW5MRnh1SUNBblltRnpaUzkwZVhCdlozSmhjR2g1Snl4Y2JpQWdKMkpoYzJVdmFHVnNjR1Z5Y3ljc1hHNGdJQ2RpWVhObEwzQnlhVzUwSnp0Y2JseHVMeThnTkM0Z1RHRjViM1YwTFhKbGJHRjBaV1FnYzJWamRHbHZibk5jYmtCcGJYQnZjblJjYmlBZ0oyeGhlVzkxZEM5b1pXRmtaWEluTEZ4dUlDQW5iR0Y1YjNWMEwyWnZiM1JsY2ljc1hHNGdJQ2RzWVhsdmRYUXZibUYyYVdkaGRHbHZiaWNzWEc0Z0lDZHNZWGx2ZFhRdlptOXliWE1uTEZ4dUlDQW5iR0Y1YjNWMEwzTnBaR1ZpWVhJbkxGeHVJQ0FuYkdGNWIzVjBMM0JoWjJVbk8xeHVYRzR2THlBMUxpQkRiMjF3YjI1bGJuUnpYRzVBYVcxd2IzSjBYRzRnSUNkamIyMXdiMjVsYm5SekwySjFkSFJ2Ym5NbkxGeHVJQ0F2S2lkamIyMXdiMjVsYm5SekwzTnNhV1JsY2ljc0tpOWNiaUFnSjJOdmJYQnZibVZ1ZEhNdmRYQm5jbUZrWlNjN1hHNWNiaTh2SURZdUlGQmhaMlV0YzNCbFkybG1hV01nYzNSNWJHVnpYRzVBYVcxd2IzSjBYRzRnSUNkd1lXZGxjeTlvYjIxbEp6dGNibHh1THk4Z055NGdWR2hsYldWelhHNUFhVzF3YjNKMFhHNGdJQ2QwYUdWdFpYTXZaR1ZtWVhWc2RDYzdYRzRpTEFvSkNTSXZLaUVnYm05eWJXRnNhWHBsTG1OemN5QjJNeTR3TGpNZ2ZDQk5TVlFnVEdsalpXNXpaU0I4SUdkcGRHaDFZaTVqYjIwdmJtVmpiMnhoY3k5dWIzSnRZV3hwZW1VdVkzTnpJQ292WEc1Y2JpOHFLbHh1SUNvZ01TNGdVMlYwSUdSbFptRjFiSFFnWm05dWRDQm1ZVzFwYkhrZ2RHOGdjMkZ1Y3kxelpYSnBaaTVjYmlBcUlESXVJRkJ5WlhabGJuUWdhVTlUSUdGdVpDQkpSU0IwWlhoMElITnBlbVVnWVdScWRYTjBJR0ZtZEdWeUlHUmxkbWxqWlNCdmNtbGxiblJoZEdsdmJpQmphR0Z1WjJVc1hHNGdLaUFnSUNCM2FYUm9iM1YwSUdScGMyRmliR2x1WnlCMWMyVnlJSHB2YjIwdVhHNGdLaTljYmx4dWFIUnRiQ0I3WEc0Z0lHWnZiblF0Wm1GdGFXeDVPaUJ6WVc1ekxYTmxjbWxtT3lBdktpQXhJQ292WEc0Z0lDMXRjeTEwWlhoMExYTnBlbVV0WVdScWRYTjBPaUF4TURBbE95QXZLaUF5SUNvdlhHNGdJQzEzWldKcmFYUXRkR1Y0ZEMxemFYcGxMV0ZrYW5WemREb2dNVEF3SlRzZ0x5b2dNaUFxTDF4dWZWeHVYRzR2S2lwY2JpQXFJRkpsYlc5MlpTQmtaV1poZFd4MElHMWhjbWRwYmk1Y2JpQXFMMXh1WEc1aWIyUjVJSHRjYmlBZ2JXRnlaMmx1T2lBd08xeHVmVnh1WEc0dktpQklWRTFNTlNCa2FYTndiR0Y1SUdSbFptbHVhWFJwYjI1elhHNGdJQ0E5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFNBcUwxeHVYRzR2S2lwY2JpQXFJRU52Y25KbFkzUWdZR0pzYjJOcllDQmthWE53YkdGNUlHNXZkQ0JrWldacGJtVmtJR1p2Y2lCaGJua2dTRlJOVERVZ1pXeGxiV1Z1ZENCcGJpQkpSU0E0THprdVhHNGdLaUJEYjNKeVpXTjBJR0JpYkc5amEyQWdaR2x6Y0d4aGVTQnViM1FnWkdWbWFXNWxaQ0JtYjNJZ1lHUmxkR0ZwYkhOZ0lHOXlJR0J6ZFcxdFlYSjVZQ0JwYmlCSlJTQXhNQzh4TVZ4dUlDb2dZVzVrSUVacGNtVm1iM2d1WEc0Z0tpQkRiM0p5WldOMElHQmliRzlqYTJBZ1pHbHpjR3hoZVNCdWIzUWdaR1ZtYVc1bFpDQm1iM0lnWUcxaGFXNWdJR2x1SUVsRklERXhMbHh1SUNvdlhHNWNibUZ5ZEdsamJHVXNYRzVoYzJsa1pTeGNibVJsZEdGcGJITXNYRzVtYVdkallYQjBhVzl1TEZ4dVptbG5kWEpsTEZ4dVptOXZkR1Z5TEZ4dWFHVmhaR1Z5TEZ4dWFHZHliM1Z3TEZ4dWJXRnBiaXhjYm0xbGJuVXNYRzV1WVhZc1hHNXpaV04wYVc5dUxGeHVjM1Z0YldGeWVTQjdYRzRnSUdScGMzQnNZWGs2SUdKc2IyTnJPMXh1ZlZ4dVhHNHZLaXBjYmlBcUlERXVJRU52Y25KbFkzUWdZR2x1YkdsdVpTMWliRzlqYTJBZ1pHbHpjR3hoZVNCdWIzUWdaR1ZtYVc1bFpDQnBiaUJKUlNBNEx6a3VYRzRnS2lBeUxpQk9iM0p0WVd4cGVtVWdkbVZ5ZEdsallXd2dZV3hwWjI1dFpXNTBJRzltSUdCd2NtOW5jbVZ6YzJBZ2FXNGdRMmh5YjIxbExDQkdhWEpsWm05NExDQmhibVFnVDNCbGNtRXVYRzRnS2k5Y2JseHVZWFZrYVc4c1hHNWpZVzUyWVhNc1hHNXdjbTluY21WemN5eGNiblpwWkdWdklIdGNiaUFnWkdsemNHeGhlVG9nYVc1c2FXNWxMV0pzYjJOck95QXZLaUF4SUNvdlhHNGdJSFpsY25ScFkyRnNMV0ZzYVdkdU9pQmlZWE5sYkdsdVpUc2dMeW9nTWlBcUwxeHVmVnh1WEc0dktpcGNiaUFxSUZCeVpYWmxiblFnYlc5a1pYSnVJR0p5YjNkelpYSnpJR1p5YjIwZ1pHbHpjR3hoZVdsdVp5QmdZWFZrYVc5Z0lIZHBkR2h2ZFhRZ1kyOXVkSEp2YkhNdVhHNGdLaUJTWlcxdmRtVWdaWGhqWlhOeklHaGxhV2RvZENCcGJpQnBUMU1nTlNCa1pYWnBZMlZ6TGx4dUlDb3ZYRzVjYm1GMVpHbHZPbTV2ZENoYlkyOXVkSEp2YkhOZEtTQjdYRzRnSUdScGMzQnNZWGs2SUc1dmJtVTdYRzRnSUdobGFXZG9kRG9nTUR0Y2JuMWNibHh1THlvcVhHNGdLaUJCWkdSeVpYTnpJR0JiYUdsa1pHVnVYV0FnYzNSNWJHbHVaeUJ1YjNRZ2NISmxjMlZ1ZENCcGJpQkpSU0E0THprdk1UQXVYRzRnS2lCSWFXUmxJSFJvWlNCZ2RHVnRjR3hoZEdWZ0lHVnNaVzFsYm5RZ2FXNGdTVVVnT0M4NUx6RXdMekV4TENCVFlXWmhjbWtzSUdGdVpDQkdhWEpsWm05NElEd2dNakl1WEc0Z0tpOWNibHh1VzJocFpHUmxibDBzWEc1MFpXMXdiR0YwWlNCN1hHNGdJR1JwYzNCc1lYazZJRzV2Ym1VN1hHNTlYRzVjYmk4cUlFeHBibXR6WEc0Z0lDQTlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQU0FxTDF4dVhHNHZLaXBjYmlBcUlGSmxiVzkyWlNCMGFHVWdaM0poZVNCaVlXTnJaM0p2ZFc1a0lHTnZiRzl5SUdaeWIyMGdZV04wYVhabElHeHBibXR6SUdsdUlFbEZJREV3TGx4dUlDb3ZYRzVjYm1FZ2UxeHVJQ0JpWVdOclozSnZkVzVrTFdOdmJHOXlPaUIwY21GdWMzQmhjbVZ1ZER0Y2JuMWNibHh1THlvcVhHNGdLaUJKYlhCeWIzWmxJSEpsWVdSaFltbHNhWFI1SUc5bUlHWnZZM1Z6WldRZ1pXeGxiV1Z1ZEhNZ2QyaGxiaUIwYUdWNUlHRnlaU0JoYkhOdklHbHVJR0Z1WEc0Z0tpQmhZM1JwZG1VdmFHOTJaWElnYzNSaGRHVXVYRzRnS2k5Y2JseHVZVHBoWTNScGRtVXNYRzVoT21odmRtVnlJSHRjYmlBZ2IzVjBiR2x1WlRvZ01EdGNibjFjYmx4dUx5b2dWR1Y0ZEMxc1pYWmxiQ0J6WlcxaGJuUnBZM05jYmlBZ0lEMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlJQ292WEc1Y2JpOHFLbHh1SUNvZ1FXUmtjbVZ6Y3lCemRIbHNhVzVuSUc1dmRDQndjbVZ6Wlc1MElHbHVJRWxGSURndk9TOHhNQzh4TVN3Z1UyRm1ZWEpwTENCaGJtUWdRMmh5YjIxbExseHVJQ292WEc1Y2JtRmlZbkpiZEdsMGJHVmRJSHRjYmlBZ1ltOXlaR1Z5TFdKdmRIUnZiVG9nTVhCNElHUnZkSFJsWkR0Y2JuMWNibHh1THlvcVhHNGdLaUJCWkdSeVpYTnpJSE4wZVd4bElITmxkQ0IwYnlCZ1ltOXNaR1Z5WUNCcGJpQkdhWEpsWm05NElEUXJMQ0JUWVdaaGNta3NJR0Z1WkNCRGFISnZiV1V1WEc0Z0tpOWNibHh1WWl4Y2JuTjBjbTl1WnlCN1hHNGdJR1p2Ym5RdGQyVnBaMmgwT2lCaWIyeGtPMXh1ZlZ4dVhHNHZLaXBjYmlBcUlFRmtaSEpsYzNNZ2MzUjViR2x1WnlCdWIzUWdjSEpsYzJWdWRDQnBiaUJUWVdaaGNta2dZVzVrSUVOb2NtOXRaUzVjYmlBcUwxeHVYRzVrWm00Z2UxeHVJQ0JtYjI1MExYTjBlV3hsT2lCcGRHRnNhV003WEc1OVhHNWNiaThxS2x4dUlDb2dRV1JrY21WemN5QjJZWEpwWVdKc1pTQmdhREZnSUdadmJuUXRjMmw2WlNCaGJtUWdiV0Z5WjJsdUlIZHBkR2hwYmlCZ2MyVmpkR2x2Ym1BZ1lXNWtJR0JoY25ScFkyeGxZRnh1SUNvZ1kyOXVkR1Y0ZEhNZ2FXNGdSbWx5WldadmVDQTBLeXdnVTJGbVlYSnBMQ0JoYm1RZ1EyaHliMjFsTGx4dUlDb3ZYRzVjYm1neElIdGNiaUFnWm05dWRDMXphWHBsT2lBeVpXMDdYRzRnSUcxaGNtZHBiam9nTUM0Mk4yVnRJREE3WEc1OVhHNWNiaThxS2x4dUlDb2dRV1JrY21WemN5QnpkSGxzYVc1bklHNXZkQ0J3Y21WelpXNTBJR2x1SUVsRklEZ3ZPUzVjYmlBcUwxeHVYRzV0WVhKcklIdGNiaUFnWW1GamEyZHliM1Z1WkRvZ0kyWm1NRHRjYmlBZ1kyOXNiM0k2SUNNd01EQTdYRzU5WEc1Y2JpOHFLbHh1SUNvZ1FXUmtjbVZ6Y3lCcGJtTnZibk5wYzNSbGJuUWdZVzVrSUhaaGNtbGhZbXhsSUdadmJuUWdjMmw2WlNCcGJpQmhiR3dnWW5KdmQzTmxjbk11WEc0Z0tpOWNibHh1YzIxaGJHd2dlMXh1SUNCbWIyNTBMWE5wZW1VNklEZ3dKVHRjYm4xY2JseHVMeW9xWEc0Z0tpQlFjbVYyWlc1MElHQnpkV0pnSUdGdVpDQmdjM1Z3WUNCaFptWmxZM1JwYm1jZ1lHeHBibVV0YUdWcFoyaDBZQ0JwYmlCaGJHd2dZbkp2ZDNObGNuTXVYRzRnS2k5Y2JseHVjM1ZpTEZ4dWMzVndJSHRjYmlBZ1ptOXVkQzF6YVhwbE9pQTNOU1U3WEc0Z0lHeHBibVV0YUdWcFoyaDBPaUF3TzF4dUlDQndiM05wZEdsdmJqb2djbVZzWVhScGRtVTdYRzRnSUhabGNuUnBZMkZzTFdGc2FXZHVPaUJpWVhObGJHbHVaVHRjYm4xY2JseHVjM1Z3SUh0Y2JpQWdkRzl3T2lBdE1DNDFaVzA3WEc1OVhHNWNibk4xWWlCN1hHNGdJR0p2ZEhSdmJUb2dMVEF1TWpWbGJUdGNibjFjYmx4dUx5b2dSVzFpWldSa1pXUWdZMjl1ZEdWdWRGeHVJQ0FnUFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwZ0tpOWNibHh1THlvcVhHNGdLaUJTWlcxdmRtVWdZbTl5WkdWeUlIZG9aVzRnYVc1emFXUmxJR0JoWUNCbGJHVnRaVzUwSUdsdUlFbEZJRGd2T1M4eE1DNWNiaUFxTDF4dVhHNXBiV2NnZTF4dUlDQmliM0prWlhJNklEQTdYRzU5WEc1Y2JpOHFLbHh1SUNvZ1EyOXljbVZqZENCdmRtVnlabXh2ZHlCdWIzUWdhR2xrWkdWdUlHbHVJRWxGSURrdk1UQXZNVEV1WEc0Z0tpOWNibHh1YzNabk9tNXZkQ2c2Y205dmRDa2dlMXh1SUNCdmRtVnlabXh2ZHpvZ2FHbGtaR1Z1TzF4dWZWeHVYRzR2S2lCSGNtOTFjR2x1WnlCamIyNTBaVzUwWEc0Z0lDQTlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQU0FxTDF4dVhHNHZLaXBjYmlBcUlFRmtaSEpsYzNNZ2JXRnlaMmx1SUc1dmRDQndjbVZ6Wlc1MElHbHVJRWxGSURndk9TQmhibVFnVTJGbVlYSnBMbHh1SUNvdlhHNWNibVpwWjNWeVpTQjdYRzRnSUcxaGNtZHBiam9nTVdWdElEUXdjSGc3WEc1OVhHNWNiaThxS2x4dUlDb2dRV1JrY21WemN5QmthV1ptWlhKbGJtTmxjeUJpWlhSM1pXVnVJRVpwY21WbWIzZ2dZVzVrSUc5MGFHVnlJR0p5YjNkelpYSnpMbHh1SUNvdlhHNWNibWh5SUh0Y2JpQWdZbTk0TFhOcGVtbHVaem9nWTI5dWRHVnVkQzFpYjNnN1hHNGdJR2hsYVdkb2REb2dNRHRjYm4xY2JseHVMeW9xWEc0Z0tpQkRiMjUwWVdsdUlHOTJaWEptYkc5M0lHbHVJR0ZzYkNCaWNtOTNjMlZ5Y3k1Y2JpQXFMMXh1WEc1d2NtVWdlMXh1SUNCdmRtVnlabXh2ZHpvZ1lYVjBienRjYm4xY2JseHVMeW9xWEc0Z0tpQkJaR1J5WlhOeklHOWtaQ0JnWlcxZ0xYVnVhWFFnWm05dWRDQnphWHBsSUhKbGJtUmxjbWx1WnlCcGJpQmhiR3dnWW5KdmQzTmxjbk11WEc0Z0tpOWNibHh1WTI5a1pTeGNibXRpWkN4Y2JuQnlaU3hjYm5OaGJYQWdlMXh1SUNCbWIyNTBMV1poYldsc2VUb2diVzl1YjNOd1lXTmxMQ0J0YjI1dmMzQmhZMlU3WEc0Z0lHWnZiblF0YzJsNlpUb2dNV1Z0TzF4dWZWeHVYRzR2S2lCR2IzSnRjMXh1SUNBZ1BUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMGdLaTljYmx4dUx5b3FYRzRnS2lCTGJtOTNiaUJzYVcxcGRHRjBhVzl1T2lCaWVTQmtaV1poZFd4MExDQkRhSEp2YldVZ1lXNWtJRk5oWm1GeWFTQnZiaUJQVXlCWUlHRnNiRzkzSUhabGNua2diR2x0YVhSbFpGeHVJQ29nYzNSNWJHbHVaeUJ2WmlCZ2MyVnNaV04wWUN3Z2RXNXNaWE56SUdFZ1lHSnZjbVJsY21BZ2NISnZjR1Z5ZEhrZ2FYTWdjMlYwTGx4dUlDb3ZYRzVjYmk4cUtseHVJQ29nTVM0Z1EyOXljbVZqZENCamIyeHZjaUJ1YjNRZ1ltVnBibWNnYVc1b1pYSnBkR1ZrTGx4dUlDb2dJQ0FnUzI1dmQyNGdhWE56ZFdVNklHRm1abVZqZEhNZ1kyOXNiM0lnYjJZZ1pHbHpZV0pzWldRZ1pXeGxiV1Z1ZEhNdVhHNGdLaUF5TGlCRGIzSnlaV04wSUdadmJuUWdjSEp2Y0dWeWRHbGxjeUJ1YjNRZ1ltVnBibWNnYVc1b1pYSnBkR1ZrTGx4dUlDb2dNeTRnUVdSa2NtVnpjeUJ0WVhKbmFXNXpJSE5sZENCa2FXWm1aWEpsYm5Sc2VTQnBiaUJHYVhKbFptOTRJRFFyTENCVFlXWmhjbWtzSUdGdVpDQkRhSEp2YldVdVhHNGdLaTljYmx4dVluVjBkRzl1TEZ4dWFXNXdkWFFzWEc1dmNIUm5jbTkxY0N4Y2JuTmxiR1ZqZEN4Y2JuUmxlSFJoY21WaElIdGNiaUFnWTI5c2IzSTZJR2x1YUdWeWFYUTdJQzhxSURFZ0tpOWNiaUFnWm05dWREb2dhVzVvWlhKcGREc2dMeW9nTWlBcUwxeHVJQ0J0WVhKbmFXNDZJREE3SUM4cUlETWdLaTljYm4xY2JseHVMeW9xWEc0Z0tpQkJaR1J5WlhOeklHQnZkbVZ5Wm14dmQyQWdjMlYwSUhSdklHQm9hV1JrWlc1Z0lHbHVJRWxGSURndk9TOHhNQzh4TVM1Y2JpQXFMMXh1WEc1aWRYUjBiMjRnZTF4dUlDQnZkbVZ5Wm14dmR6b2dkbWx6YVdKc1pUdGNibjFjYmx4dUx5b3FYRzRnS2lCQlpHUnlaWE56SUdsdVkyOXVjMmx6ZEdWdWRDQmdkR1Y0ZEMxMGNtRnVjMlp2Y20xZ0lHbHVhR1Z5YVhSaGJtTmxJR1p2Y2lCZ1luVjBkRzl1WUNCaGJtUWdZSE5sYkdWamRHQXVYRzRnS2lCQmJHd2diM1JvWlhJZ1ptOXliU0JqYjI1MGNtOXNJR1ZzWlcxbGJuUnpJR1J2SUc1dmRDQnBibWhsY21sMElHQjBaWGgwTFhSeVlXNXpabTl5YldBZ2RtRnNkV1Z6TGx4dUlDb2dRMjl5Y21WamRDQmdZblYwZEc5dVlDQnpkSGxzWlNCcGJtaGxjbWwwWVc1alpTQnBiaUJHYVhKbFptOTRMQ0JKUlNBNEx6a3ZNVEF2TVRFc0lHRnVaQ0JQY0dWeVlTNWNiaUFxSUVOdmNuSmxZM1FnWUhObGJHVmpkR0FnYzNSNWJHVWdhVzVvWlhKcGRHRnVZMlVnYVc0Z1JtbHlaV1p2ZUM1Y2JpQXFMMXh1WEc1aWRYUjBiMjRzWEc1elpXeGxZM1FnZTF4dUlDQjBaWGgwTFhSeVlXNXpabTl5YlRvZ2JtOXVaVHRjYm4xY2JseHVMeW9xWEc0Z0tpQXhMaUJCZG05cFpDQjBhR1VnVjJWaVMybDBJR0oxWnlCcGJpQkJibVJ5YjJsa0lEUXVNQzRxSUhkb1pYSmxJQ2d5S1NCa1pYTjBjbTk1Y3lCdVlYUnBkbVVnWUdGMVpHbHZZRnh1SUNvZ0lDQWdZVzVrSUdCMmFXUmxiMkFnWTI5dWRISnZiSE11WEc0Z0tpQXlMaUJEYjNKeVpXTjBJR2x1WVdKcGJHbDBlU0IwYnlCemRIbHNaU0JqYkdsamEyRmliR1VnWUdsdWNIVjBZQ0IwZVhCbGN5QnBiaUJwVDFNdVhHNGdLaUF6TGlCSmJYQnliM1psSUhWellXSnBiR2wwZVNCaGJtUWdZMjl1YzJsemRHVnVZM2tnYjJZZ1kzVnljMjl5SUhOMGVXeGxJR0psZEhkbFpXNGdhVzFoWjJVdGRIbHdaVnh1SUNvZ0lDQWdZR2x1Y0hWMFlDQmhibVFnYjNSb1pYSnpMbHh1SUNvdlhHNWNibUoxZEhSdmJpeGNibWgwYld3Z2FXNXdkWFJiZEhsd1pUMWNJbUoxZEhSdmJsd2lYU3dnTHlvZ01TQXFMMXh1YVc1d2RYUmJkSGx3WlQxY0luSmxjMlYwWENKZExGeHVhVzV3ZFhSYmRIbHdaVDFjSW5OMVltMXBkRndpWFNCN1hHNGdJQzEzWldKcmFYUXRZWEJ3WldGeVlXNWpaVG9nWW5WMGRHOXVPeUF2S2lBeUlDb3ZYRzRnSUdOMWNuTnZjam9nY0c5cGJuUmxjanNnTHlvZ015QXFMMXh1ZlZ4dVhHNHZLaXBjYmlBcUlGSmxMWE5sZENCa1pXWmhkV3gwSUdOMWNuTnZjaUJtYjNJZ1pHbHpZV0pzWldRZ1pXeGxiV1Z1ZEhNdVhHNGdLaTljYmx4dVluVjBkRzl1VzJScGMyRmliR1ZrWFN4Y2JtaDBiV3dnYVc1d2RYUmJaR2x6WVdKc1pXUmRJSHRjYmlBZ1kzVnljMjl5T2lCa1pXWmhkV3gwTzF4dWZWeHVYRzR2S2lwY2JpQXFJRkpsYlc5MlpTQnBibTVsY2lCd1lXUmthVzVuSUdGdVpDQmliM0prWlhJZ2FXNGdSbWx5WldadmVDQTBLeTVjYmlBcUwxeHVYRzVpZFhSMGIyNDZPaTF0YjNvdFptOWpkWE10YVc1dVpYSXNYRzVwYm5CMWREbzZMVzF2ZWkxbWIyTjFjeTFwYm01bGNpQjdYRzRnSUdKdmNtUmxjam9nTUR0Y2JpQWdjR0ZrWkdsdVp6b2dNRHRjYm4xY2JseHVMeW9xWEc0Z0tpQkJaR1J5WlhOeklFWnBjbVZtYjNnZ05Dc2djMlYwZEdsdVp5QmdiR2x1WlMxb1pXbG5hSFJnSUc5dUlHQnBibkIxZEdBZ2RYTnBibWNnWUNGcGJYQnZjblJoYm5SZ0lHbHVYRzRnS2lCMGFHVWdWVUVnYzNSNWJHVnphR1ZsZEM1Y2JpQXFMMXh1WEc1cGJuQjFkQ0I3WEc0Z0lHeHBibVV0YUdWcFoyaDBPaUJ1YjNKdFlXdzdYRzU5WEc1Y2JpOHFLbHh1SUNvZ1NYUW5jeUJ5WldOdmJXMWxibVJsWkNCMGFHRjBJSGx2ZFNCa2IyNG5kQ0JoZEhSbGJYQjBJSFJ2SUhOMGVXeGxJSFJvWlhObElHVnNaVzFsYm5SekxseHVJQ29nUm1seVpXWnZlQ2R6SUdsdGNHeGxiV1Z1ZEdGMGFXOXVJR1J2WlhOdUozUWdjbVZ6Y0dWamRDQmliM2d0YzJsNmFXNW5MQ0J3WVdSa2FXNW5MQ0J2Y2lCM2FXUjBhQzVjYmlBcVhHNGdLaUF4TGlCQlpHUnlaWE56SUdKdmVDQnphWHBwYm1jZ2MyVjBJSFJ2SUdCamIyNTBaVzUwTFdKdmVHQWdhVzRnU1VVZ09DODVMekV3TGx4dUlDb2dNaTRnVW1WdGIzWmxJR1Y0WTJWemN5QndZV1JrYVc1bklHbHVJRWxGSURndk9TOHhNQzVjYmlBcUwxeHVYRzVwYm5CMWRGdDBlWEJsUFZ3aVkyaGxZMnRpYjNoY0lsMHNYRzVwYm5CMWRGdDBlWEJsUFZ3aWNtRmthVzljSWwwZ2UxeHVJQ0JpYjNndGMybDZhVzVuT2lCaWIzSmtaWEl0WW05NE95QXZLaUF4SUNvdlhHNGdJSEJoWkdScGJtYzZJREE3SUM4cUlESWdLaTljYm4xY2JseHVMeW9xWEc0Z0tpQkdhWGdnZEdobElHTjFjbk52Y2lCemRIbHNaU0JtYjNJZ1EyaHliMjFsSjNNZ2FXNWpjbVZ0Wlc1MEwyUmxZM0psYldWdWRDQmlkWFIwYjI1ekxpQkdiM0lnWTJWeWRHRnBibHh1SUNvZ1lHWnZiblF0YzJsNlpXQWdkbUZzZFdWeklHOW1JSFJvWlNCZ2FXNXdkWFJnTENCcGRDQmpZWFZ6WlhNZ2RHaGxJR04xY25OdmNpQnpkSGxzWlNCdlppQjBhR1ZjYmlBcUlHUmxZM0psYldWdWRDQmlkWFIwYjI0Z2RHOGdZMmhoYm1kbElHWnliMjBnWUdSbFptRjFiSFJnSUhSdklHQjBaWGgwWUM1Y2JpQXFMMXh1WEc1cGJuQjFkRnQwZVhCbFBWd2liblZ0WW1WeVhDSmRPam90ZDJWaWEybDBMV2x1Ym1WeUxYTndhVzR0WW5WMGRHOXVMRnh1YVc1d2RYUmJkSGx3WlQxY0ltNTFiV0psY2x3aVhUbzZMWGRsWW10cGRDMXZkWFJsY2kxemNHbHVMV0oxZEhSdmJpQjdYRzRnSUdobGFXZG9kRG9nWVhWMGJ6dGNibjFjYmx4dUx5b3FYRzRnS2lBeExpQkJaR1J5WlhOeklHQmhjSEJsWVhKaGJtTmxZQ0J6WlhRZ2RHOGdZSE5sWVhKamFHWnBaV3hrWUNCcGJpQlRZV1poY21rZ1lXNWtJRU5vY205dFpTNWNiaUFxSURJdUlFRmtaSEpsYzNNZ1lHSnZlQzF6YVhwcGJtZGdJSE5sZENCMGJ5QmdZbTl5WkdWeUxXSnZlR0FnYVc0Z1UyRm1ZWEpwSUdGdVpDQkRhSEp2YldVdVhHNGdLaTljYmx4dWFXNXdkWFJiZEhsd1pUMWNJbk5sWVhKamFGd2lYU0I3WEc0Z0lDMTNaV0pyYVhRdFlYQndaV0Z5WVc1alpUb2dkR1Y0ZEdacFpXeGtPeUF2S2lBeElDb3ZYRzRnSUdKdmVDMXphWHBwYm1jNklHTnZiblJsYm5RdFltOTRPeUF2S2lBeUlDb3ZYRzU5WEc1Y2JpOHFLbHh1SUNvZ1VtVnRiM1psSUdsdWJtVnlJSEJoWkdScGJtY2dZVzVrSUhObFlYSmphQ0JqWVc1alpXd2dZblYwZEc5dUlHbHVJRk5oWm1GeWFTQmhibVFnUTJoeWIyMWxJRzl1SUU5VElGZ3VYRzRnS2lCVFlXWmhjbWtnS0dKMWRDQnViM1FnUTJoeWIyMWxLU0JqYkdsd2N5QjBhR1VnWTJGdVkyVnNJR0oxZEhSdmJpQjNhR1Z1SUhSb1pTQnpaV0Z5WTJnZ2FXNXdkWFFnYUdGelhHNGdLaUJ3WVdSa2FXNW5JQ2hoYm1RZ1lIUmxlSFJtYVdWc1pHQWdZWEJ3WldGeVlXNWpaU2t1WEc0Z0tpOWNibHh1YVc1d2RYUmJkSGx3WlQxY0luTmxZWEpqYUZ3aVhUbzZMWGRsWW10cGRDMXpaV0Z5WTJndFkyRnVZMlZzTFdKMWRIUnZiaXhjYm1sdWNIVjBXM1I1Y0dVOVhDSnpaV0Z5WTJoY0lsMDZPaTEzWldKcmFYUXRjMlZoY21Ob0xXUmxZMjl5WVhScGIyNGdlMXh1SUNBdGQyVmlhMmwwTFdGd2NHVmhjbUZ1WTJVNklHNXZibVU3WEc1OVhHNWNiaThxS2x4dUlDb2dSR1ZtYVc1bElHTnZibk5wYzNSbGJuUWdZbTl5WkdWeUxDQnRZWEpuYVc0c0lHRnVaQ0J3WVdSa2FXNW5MbHh1SUNvdlhHNWNibVpwWld4a2MyVjBJSHRjYmlBZ1ltOXlaR1Z5T2lBeGNIZ2djMjlzYVdRZ0kyTXdZekJqTUR0Y2JpQWdiV0Z5WjJsdU9pQXdJREp3ZUR0Y2JpQWdjR0ZrWkdsdVp6b2dNQzR6TldWdElEQXVOakkxWlcwZ01DNDNOV1Z0TzF4dWZWeHVYRzR2S2lwY2JpQXFJREV1SUVOdmNuSmxZM1FnWUdOdmJHOXlZQ0J1YjNRZ1ltVnBibWNnYVc1b1pYSnBkR1ZrSUdsdUlFbEZJRGd2T1M4eE1DOHhNUzVjYmlBcUlESXVJRkpsYlc5MlpTQndZV1JrYVc1bklITnZJSEJsYjNCc1pTQmhjbVZ1SjNRZ1kyRjFaMmgwSUc5MWRDQnBaaUIwYUdWNUlIcGxjbThnYjNWMElHWnBaV3hrYzJWMGN5NWNiaUFxTDF4dVhHNXNaV2RsYm1RZ2UxeHVJQ0JpYjNKa1pYSTZJREE3SUM4cUlERWdLaTljYmlBZ2NHRmtaR2x1WnpvZ01Ec2dMeW9nTWlBcUwxeHVmVnh1WEc0dktpcGNiaUFxSUZKbGJXOTJaU0JrWldaaGRXeDBJSFpsY25ScFkyRnNJSE5qY205c2JHSmhjaUJwYmlCSlJTQTRMemt2TVRBdk1URXVYRzRnS2k5Y2JseHVkR1Y0ZEdGeVpXRWdlMXh1SUNCdmRtVnlabXh2ZHpvZ1lYVjBienRjYm4xY2JseHVMeW9xWEc0Z0tpQkViMjRuZENCcGJtaGxjbWwwSUhSb1pTQmdabTl1ZEMxM1pXbG5hSFJnSUNoaGNIQnNhV1ZrSUdKNUlHRWdjblZzWlNCaFltOTJaU2t1WEc0Z0tpQk9UMVJGT2lCMGFHVWdaR1ZtWVhWc2RDQmpZVzV1YjNRZ2MyRm1aV3g1SUdKbElHTm9ZVzVuWldRZ2FXNGdRMmh5YjIxbElHRnVaQ0JUWVdaaGNta2diMjRnVDFNZ1dDNWNiaUFxTDF4dVhHNXZjSFJuY205MWNDQjdYRzRnSUdadmJuUXRkMlZwWjJoME9pQmliMnhrTzF4dWZWeHVYRzR2S2lCVVlXSnNaWE5jYmlBZ0lEMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlJQ292WEc1Y2JpOHFLbHh1SUNvZ1VtVnRiM1psSUcxdmMzUWdjM0JoWTJsdVp5QmlaWFIzWldWdUlIUmhZbXhsSUdObGJHeHpMbHh1SUNvdlhHNWNiblJoWW14bElIdGNiaUFnWW05eVpHVnlMV052Ykd4aGNITmxPaUJqYjJ4c1lYQnpaVHRjYmlBZ1ltOXlaR1Z5TFhOd1lXTnBibWM2SURBN1hHNTlYRzVjYm5Sa0xGeHVkR2dnZTF4dUlDQndZV1JrYVc1bk9pQXdPMXh1ZlZ4dUlpd0tDUWtpTHk4Z1FtOTFjbUp2YmlBMExqSXVOVnh1THk4Z2FIUjBjRG92TDJKdmRYSmliMjR1YVc5Y2JpOHZJRU52Y0hseWFXZG9kQ0F5TURFeExUSXdNVFVnZEdodmRXZG9kR0p2ZEN3Z2FXNWpMbHh1THk4Z1RVbFVJRXhwWTJWdWMyVmNibHh1UUdsdGNHOXlkQ0JjSW5ObGRIUnBibWR6TDNCeVpXWnBlR1Z5WENJN1hHNUFhVzF3YjNKMElGd2ljMlYwZEdsdVozTXZjSGd0ZEc4dFpXMWNJanRjYmtCcGJYQnZjblFnWENKelpYUjBhVzVuY3k5aGMzTmxkQzF3YVhCbGJHbHVaVndpTzF4dVhHNUFhVzF3YjNKMElGd2lablZ1WTNScGIyNXpMMkZ6YzJsbmJpMXBibkIxZEhOY0lqdGNia0JwYlhCdmNuUWdYQ0ptZFc1amRHbHZibk12WTI5dWRHRnBibk5jSWp0Y2JrQnBiWEJ2Y25RZ1hDSm1kVzVqZEdsdmJuTXZZMjl1ZEdGcGJuTXRabUZzYzNsY0lqdGNia0JwYlhCdmNuUWdYQ0ptZFc1amRHbHZibk12YVhNdGJHVnVaM1JvWENJN1hHNUFhVzF3YjNKMElGd2lablZ1WTNScGIyNXpMMmx6TFd4cFoyaDBYQ0k3WEc1QWFXMXdiM0owSUZ3aVpuVnVZM1JwYjI1ekwybHpMVzUxYldKbGNsd2lPMXh1UUdsdGNHOXlkQ0JjSW1aMWJtTjBhVzl1Y3k5cGN5MXphWHBsWENJN1hHNUFhVzF3YjNKMElGd2lablZ1WTNScGIyNXpMM0I0TFhSdkxXVnRYQ0k3WEc1QWFXMXdiM0owSUZ3aVpuVnVZM1JwYjI1ekwzQjRMWFJ2TFhKbGJWd2lPMXh1UUdsdGNHOXlkQ0JjSW1aMWJtTjBhVzl1Y3k5emFHRmtaVndpTzF4dVFHbHRjRzl5ZENCY0ltWjFibU4wYVc5dWN5OXpkSEpwY0MxMWJtbDBjMXdpTzF4dVFHbHRjRzl5ZENCY0ltWjFibU4wYVc5dWN5OTBhVzUwWENJN1hHNUFhVzF3YjNKMElGd2lablZ1WTNScGIyNXpMM1J5WVc1emFYUnBiMjR0Y0hKdmNHVnlkSGt0Ym1GdFpWd2lPMXh1UUdsdGNHOXlkQ0JjSW1aMWJtTjBhVzl1Y3k5MWJuQmhZMnRjSWp0Y2JrQnBiWEJ2Y25RZ1hDSm1kVzVqZEdsdmJuTXZiVzlrZFd4aGNpMXpZMkZzWlZ3aU8xeHVYRzVBYVcxd2IzSjBJRndpYUdWc2NHVnljeTlqYjI1MlpYSjBMWFZ1YVhSelhDSTdYRzVBYVcxd2IzSjBJRndpYUdWc2NHVnljeTlrYVhKbFkzUnBiMjVoYkMxMllXeDFaWE5jSWp0Y2JrQnBiWEJ2Y25RZ1hDSm9aV3h3WlhKekwyWnZiblF0YzI5MWNtTmxMV1JsWTJ4aGNtRjBhVzl1WENJN1hHNUFhVzF3YjNKMElGd2lhR1ZzY0dWeWN5OW5jbUZrYVdWdWRDMXdiM05wZEdsdmJuTXRjR0Z5YzJWeVhDSTdYRzVBYVcxd2IzSjBJRndpYUdWc2NHVnljeTlzYVc1bFlYSXRZVzVuYkdVdGNHRnljMlZ5WENJN1hHNUFhVzF3YjNKMElGd2lhR1ZzY0dWeWN5OXNhVzVsWVhJdFozSmhaR2xsYm5RdGNHRnljMlZ5WENJN1hHNUFhVzF3YjNKMElGd2lhR1ZzY0dWeWN5OXNhVzVsWVhJdGNHOXphWFJwYjI1ekxYQmhjbk5sY2x3aU8xeHVRR2x0Y0c5eWRDQmNJbWhsYkhCbGNuTXZiR2x1WldGeUxYTnBaR1V0WTI5eWJtVnlMWEJoY25ObGNsd2lPMXh1UUdsdGNHOXlkQ0JjSW1obGJIQmxjbk12Y21Ga2FXRnNMV0Z5Wnkxd1lYSnpaWEpjSWp0Y2JrQnBiWEJ2Y25RZ1hDSm9aV3h3WlhKekwzSmhaR2xoYkMxd2IzTnBkR2x2Ym5NdGNHRnljMlZ5WENJN1hHNUFhVzF3YjNKMElGd2lhR1ZzY0dWeWN5OXlZV1JwWVd3dFozSmhaR2xsYm5RdGNHRnljMlZ5WENJN1hHNUFhVzF3YjNKMElGd2lhR1ZzY0dWeWN5OXlaVzVrWlhJdFozSmhaR2xsYm5SelhDSTdYRzVBYVcxd2IzSjBJRndpYUdWc2NHVnljeTl6YUdGd1pTMXphWHBsTFhOMGNtbHdjR1Z5WENJN1hHNUFhVzF3YjNKMElGd2lhR1ZzY0dWeWN5OXpkSEl0ZEc4dGJuVnRYQ0k3WEc1Y2JrQnBiWEJ2Y25RZ1hDSmpjM016TDJGdWFXMWhkR2x2Ymx3aU8xeHVRR2x0Y0c5eWRDQmNJbU56Y3pNdllYQndaV0Z5WVc1alpWd2lPMXh1UUdsdGNHOXlkQ0JjSW1OemN6TXZZbUZqYTJaaFkyVXRkbWx6YVdKcGJHbDBlVndpTzF4dVFHbHRjRzl5ZENCY0ltTnpjek12WW1GamEyZHliM1Z1WkZ3aU8xeHVRR2x0Y0c5eWRDQmNJbU56Y3pNdlltRmphMmR5YjNWdVpDMXBiV0ZuWlZ3aU8xeHVRR2x0Y0c5eWRDQmNJbU56Y3pNdlltOXlaR1Z5TFdsdFlXZGxYQ0k3WEc1QWFXMXdiM0owSUZ3aVkzTnpNeTlqWVd4alhDSTdYRzVBYVcxd2IzSjBJRndpWTNOek15OWpiMngxYlc1elhDSTdYRzVBYVcxd2IzSjBJRndpWTNOek15OW1hV3gwWlhKY0lqdGNia0JwYlhCdmNuUWdYQ0pqYzNNekwyWnNaWGd0WW05NFhDSTdYRzVBYVcxd2IzSjBJRndpWTNOek15OW1iMjUwTFdaaFkyVmNJanRjYmtCcGJYQnZjblFnWENKamMzTXpMMlp2Ym5RdFptVmhkSFZ5WlMxelpYUjBhVzVuYzF3aU8xeHVRR2x0Y0c5eWRDQmNJbU56Y3pNdmFHbGtjR2t0YldWa2FXRXRjWFZsY25sY0lqdGNia0JwYlhCdmNuUWdYQ0pqYzNNekwyaDVjR2hsYm5OY0lqdGNia0JwYlhCdmNuUWdYQ0pqYzNNekwybHRZV2RsTFhKbGJtUmxjbWx1WjF3aU8xeHVRR2x0Y0c5eWRDQmNJbU56Y3pNdmEyVjVabkpoYldWelhDSTdYRzVBYVcxd2IzSjBJRndpWTNOek15OXNhVzVsWVhJdFozSmhaR2xsYm5SY0lqdGNia0JwYlhCdmNuUWdYQ0pqYzNNekwzQmxjbk53WldOMGFYWmxYQ0k3WEc1QWFXMXdiM0owSUZ3aVkzTnpNeTl3YkdGalpXaHZiR1JsY2x3aU8xeHVRR2x0Y0c5eWRDQmNJbU56Y3pNdmNtRmthV0ZzTFdkeVlXUnBaVzUwWENJN1hHNUFhVzF3YjNKMElGd2lZM056TXk5elpXeGxZM1JwYjI1Y0lqdGNia0JwYlhCdmNuUWdYQ0pqYzNNekwzUmxlSFF0WkdWamIzSmhkR2x2Ymx3aU8xeHVRR2x0Y0c5eWRDQmNJbU56Y3pNdmRISmhibk5tYjNKdFhDSTdYRzVBYVcxd2IzSjBJRndpWTNOek15OTBjbUZ1YzJsMGFXOXVYQ0k3WEc1QWFXMXdiM0owSUZ3aVkzTnpNeTkxYzJWeUxYTmxiR1ZqZEZ3aU8xeHVYRzVBYVcxd2IzSjBJRndpWVdSa2IyNXpMMkp2Y21SbGNpMWpiMnh2Y2x3aU8xeHVRR2x0Y0c5eWRDQmNJbUZrWkc5dWN5OWliM0prWlhJdGNtRmthWFZ6WENJN1hHNUFhVzF3YjNKMElGd2lZV1JrYjI1ekwySnZjbVJsY2kxemRIbHNaVndpTzF4dVFHbHRjRzl5ZENCY0ltRmtaRzl1Y3k5aWIzSmtaWEl0ZDJsa2RHaGNJanRjYmtCcGJYQnZjblFnWENKaFpHUnZibk12WW5WMGRHOXVjMXdpTzF4dVFHbHRjRzl5ZENCY0ltRmtaRzl1Y3k5amJHVmhjbVpwZUZ3aU8xeHVRR2x0Y0c5eWRDQmNJbUZrWkc5dWN5OWxiR3hwY0hOcGMxd2lPMXh1UUdsdGNHOXlkQ0JjSW1Ga1pHOXVjeTltYjI1MExYTjBZV05yYzF3aU8xeHVRR2x0Y0c5eWRDQmNJbUZrWkc5dWN5OW9hV1JsTFhSbGVIUmNJanRjYmtCcGJYQnZjblFnWENKaFpHUnZibk12YldGeVoybHVYQ0k3WEc1QWFXMXdiM0owSUZ3aVlXUmtiMjV6TDNCaFpHUnBibWRjSWp0Y2JrQnBiWEJ2Y25RZ1hDSmhaR1J2Ym5NdmNHOXphWFJwYjI1Y0lqdGNia0JwYlhCdmNuUWdYQ0poWkdSdmJuTXZjSEpsWm1sNFpYSmNJanRjYmtCcGJYQnZjblFnWENKaFpHUnZibk12Y21WMGFXNWhMV2x0WVdkbFhDSTdYRzVBYVcxd2IzSjBJRndpWVdSa2IyNXpMM05wZW1WY0lqdGNia0JwYlhCdmNuUWdYQ0poWkdSdmJuTXZkR1Y0ZEMxcGJuQjFkSE5jSWp0Y2JrQnBiWEJ2Y25RZ1hDSmhaR1J2Ym5NdmRHbHRhVzVuTFdaMWJtTjBhVzl1YzF3aU8xeHVRR2x0Y0c5eWRDQmNJbUZrWkc5dWN5OTBjbWxoYm1kc1pWd2lPMXh1UUdsdGNHOXlkQ0JjSW1Ga1pHOXVjeTkzYjNKa0xYZHlZWEJjSWp0Y2JseHVRR2x0Y0c5eWRDQmNJbUp2ZFhKaWIyNHRaR1Z3Y21WallYUmxaQzExY0dOdmJXbHVaMXdpTzF4dUlpd0tDUWtpTHk4Z1RtVmhkQ0F4TGpjdU1seHVMeThnYUhSMGNEb3ZMMjVsWVhRdVltOTFjbUp2Ymk1cGIxeHVMeThnUTI5d2VYSnBaMmgwSURJd01USXRNakF4TlNCMGFHOTFaMmgwWW05MExDQnBibU11WEc0dkx5Qk5TVlFnVEdsalpXNXpaVnh1WEc0dkx5QklaV3h3WlhKelhHNUFhVzF3YjNKMElGd2libVZoZEMxb1pXeHdaWEp6WENJN1hHNWNiaTh2SUVkeWFXUmNia0JwYlhCdmNuUWdYQ0puY21sa0wzQnlhWFpoZEdWY0lqdGNia0JwYlhCdmNuUWdYQ0puY21sa0wySnZlQzF6YVhwcGJtZGNJanRjYmtCcGJYQnZjblFnWENKbmNtbGtMMjl0WldkaFhDSTdYRzVBYVcxd2IzSjBJRndpWjNKcFpDOXZkWFJsY2kxamIyNTBZV2x1WlhKY0lqdGNia0JwYlhCdmNuUWdYQ0puY21sa0wzTndZVzR0WTI5c2RXMXVjMXdpTzF4dVFHbHRjRzl5ZENCY0ltZHlhV1F2Y205M1hDSTdYRzVBYVcxd2IzSjBJRndpWjNKcFpDOXphR2xtZEZ3aU8xeHVRR2x0Y0c5eWRDQmNJbWR5YVdRdmNHRmtYQ0k3WEc1QWFXMXdiM0owSUZ3aVozSnBaQzltYVd4c0xYQmhjbVZ1ZEZ3aU8xeHVRR2x0Y0c5eWRDQmNJbWR5YVdRdmJXVmthV0ZjSWp0Y2JrQnBiWEJ2Y25RZ1hDSm5jbWxrTDNSdkxXUmxjSEpsWTJGMFpWd2lPMXh1UUdsdGNHOXlkQ0JjSW1keWFXUXZkbWx6ZFdGc0xXZHlhV1JjSWp0Y2JrQnBiWEJ2Y25RZ1hDSm5jbWxrTDJScGMzQnNZWGt0WTI5dWRHVjRkRndpTzF4dVFHbHRjRzl5ZENCY0ltZHlhV1F2WkdseVpXTjBhVzl1TFdOdmJuUmxlSFJjSWp0Y2JpSXNDZ2tKSWk4dklDMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0WEc0dkx5QlVhR2x6SUdacGJHVWdZMjl1ZEdGcGJuTWdZV3hzSUdGd2NHeHBZMkYwYVc5dUxYZHBaR1VnVTJGemN5QjJZWEpwWVdKc1pYTXVYRzR2THlBdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMVnh1WEc1Y2JseHVYRzVjYmk4dkx5QlNaV2QxYkdGeUlHWnZiblFnWm1GdGFXeDVYRzR2THk4Z1FIUjVjR1VnVEdsemRGeHVKSFJsZUhRdFptOXVkQzF6ZEdGamF6b2dKMDl3Wlc0Z1UyRnVjeWNzSUNkSVpXeDJaWFJwWTJFZ1RtVjFaU0JNYVdkb2RDY3NJQ2RJWld4MlpYUnBZMkVnVG1WMVpTY3NJQ2RJWld4MlpYUnBZMkVuTENBblFYSnBZV3duTENCellXNXpMWE5sY21sbUlDRmtaV1poZFd4ME8xeHVYRzR2THk4Z1EyOWtaU0FvYlc5dWIzTndZV05sS1NCbWIyNTBJR1poYldsc2VWeHVMeTh2SUVCMGVYQmxJRXhwYzNSY2JpUmpiMlJsTFdadmJuUXRjM1JoWTJzNklDZERiM1Z5YVdWeUlFNWxkeWNzSUNkRVpXcGhWblVnVTJGdWN5Qk5iMjV2Snl3Z0owSnBkSE4wY21WaGJTQldaWEpoSUZOaGJuTWdUVzl1Ynljc0lDZE5iMjVoWTI4bkxDQnRiMjV2YzNCaFkyVWdJV1JsWm1GMWJIUTdYRzVjYmx4dVhHNWNibHh1THk4dklFTnZjSGtnZEdWNGRDQmpiMnh2Y2x4dUx5OHZJRUIwZVhCbElFTnZiRzl5WEc0a2RHVjRkQzFqYjJ4dmNqb2dJekl5TWlBaFpHVm1ZWFZzZER0Y2JseHVMeTh2SUUxaGFXNGdZbkpoYm1RZ1kyOXNiM0pjYmk4dkx5QkFkSGx3WlNCRGIyeHZjbHh1SkdKeVlXNWtMV052Ykc5eU9pQWpSVFV3TURVd0lDRmtaV1poZFd4ME8xeHVYRzR2THk4Z1RHbG5hSFFnWjNKbGVWeHVMeTh2SUVCMGVYQmxJRU52Ykc5eVhHNGtiR2xuYUhRdFozSmxlVG9nSTBWRVJVUkZSQ0FoWkdWbVlYVnNkRHRjYmx4dUx5OHZJRTFsWkdsMWJTQm5jbVY1WEc0dkx5OGdRSFI1Y0dVZ1EyOXNiM0pjYmlSdGFXUXRaM0psZVRvZ0l6azVPU0FoWkdWbVlYVnNkRHRjYmx4dUx5OHZJRVJoY21zZ1ozSmxlVnh1THk4dklFQjBlWEJsSUVOdmJHOXlYRzRrWkdGeWF5MW5jbVY1T2lBak5EUTBJQ0ZrWldaaGRXeDBPMXh1WEc1Y2JseHVYRzVjYmk4dkx5QkRiMjUwWVdsdVpYSW5jeUJ0WVhocGJYVnRJSGRwWkhSb1hHNHZMeThnUW1Wc2IzY2dkR2hoZENCcGN5QXhNREFsWEc0dkx5OGdRSFI1Y0dVZ1RHVnVaM1JvWEc0a2JXRjRMWGRwWkhSb09pQTVOakJ3ZUNBaFoyeHZZbUZzTzF4dVhHNWNibHh1WEc1Y2JpOHZMeUJDY21WaGEzQnZhVzUwY3lCdFlYQmNiaTh2THlCQWNISnZjQ0I3VTNSeWFXNW5mU0JyWlhseklDMGdTMlY1Y3lCaGNtVWdhV1JsYm5ScFptbGxjbk1nYldGd2NHVmtJSFJ2SUdFZ1oybDJaVzRnYkdWdVozUm9YRzR2THk4Z1FIQnliM0FnZTAxaGNIMGdkbUZzZFdWeklDMGdWbUZzZFdWeklHRnlaU0JoWTNSMVlXd2dZbkpsWVd0d2IybHVkSE1nWlhod2NtVnpjMlZrSUdsdUlIQnBlR1ZzYzF4dUx5OHZJRUJ6WldVZ2UyMXBlR2x1ZlNCeVpYTndiMjVrTFhSdlhHNGtZbkpsWVd0d2IybHVkSE02SUNoY2JpQWdKM050WVd4c0p6b2dLRzFwYmkxM2FXUjBhRG9nTXpJd2NIZ3BMRnh1SUNBbmJXVmthWFZ0SnpvZ0tHMXBiaTEzYVdSMGFEb2dOelk0Y0hncExGeHVJQ0FuYkdGeVoyVW5PaUFvYldsdUxYZHBaSFJvT2lBeE1ESTBjSGdwTEZ4dUtTQWhaR1ZtWVhWc2REdGNibHh1WEc1Y2JseHVYRzVjYmk4dkx5QlNaV3hoZEdsMlpTQnZjaUJoWW5OdmJIVjBaU0JWVWt3Z2QyaGxjbVVnWVd4c0lHRnpjMlYwY3lCaGNtVWdjMlZ5ZG1Wa0lHWnliMjFjYmk4dkx5QkFkSGx3WlNCVGRISnBibWRjYmk4dkx5QkFaWGhoYlhCc1pTQnpZM056SUMwZ1YyaGxiaUIxYzJsdVp5QmhJRU5FVGx4dUx5OHZJQ0FnSkdKaGMyVXRkWEpzT2lBbmFIUjBjRG92TDJOa2JpNWxlR0Z0Y0d4bExtTnZiUzloYzNObGRITXZKenRjYmlSaVlYTmxMWFZ5YkRvZ0p5OWhjM05sZEhNdkp5QWhaR1ZtWVhWc2REdGNibHh1THlva1ltRmphMmR5YjNWdVpDMWpiMnh2Y2pvZ2NtZGlLREl6TVN3Z01qTXhMQ0F5TWpZcE95b3ZYRzRrWW1GamEyZHliM1Z1WkMxamIyeHZjam9nZDJocGRHVTdYRzRpTEFvSkNTSXZMeUF0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExWeHVMeThnVkdocGN5Qm1hV3hsSUdOdmJuUmhhVzV6SUdGc2JDQmhjSEJzYVdOaGRHbHZiaTEzYVdSbElGTmhjM01nWm5WdVkzUnBiMjV6TGx4dUx5OGdMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMxY2JseHVMeTh2SUU1aGRHbDJaU0JnZFhKc0tDNHVLV0FnWm5WdVkzUnBiMjRnZDNKaGNIQmxjbHh1THk4dklFQndZWEpoYlNCN1UzUnlhVzVuZlNBa1ltRnpaU0F0SUdKaGMyVWdWVkpNSUdadmNpQjBhR1VnWVhOelpYUmNiaTh2THlCQWNHRnlZVzBnZTFOMGNtbHVaMzBnSkhSNWNHVWdMU0JoYzNObGRDQjBlWEJsSUdadmJHUmxjaUFvWlM1bkxpQmdabTl1ZEhNdllDbGNiaTh2THlCQWNHRnlZVzBnZTFOMGNtbHVaMzBnSkhCaGRHZ2dMU0JoYzNObGRDQndZWFJvWEc0dkx5OGdRSEpsZEhWeWJpQjdWWEpzZlZ4dVFHWjFibU4wYVc5dUlHRnpjMlYwS0NSaVlYTmxMQ0FrZEhsd1pTd2dKSEJoZEdncElIdGNiaUFnUUhKbGRIVnliaUIxY213b0pHSmhjMlVnS3lBa2RIbHdaU0FySUNSd1lYUm9LVHRjYm4xY2JseHVMeTh2SUZKbGRIVnlibk1nVlZKTUlIUnZJR0Z1SUdsdFlXZGxJR0poYzJWa0lHOXVJR2wwY3lCd1lYUm9YRzR2THk4Z1FIQmhjbUZ0SUh0VGRISnBibWQ5SUNSd1lYUm9JQzBnYVcxaFoyVWdjR0YwYUZ4dUx5OHZJRUJ3WVhKaGJTQjdVM1J5YVc1bmZTQWtZbUZ6WlNCYkpHSmhjMlV0ZFhKc1hTQXRJR0poYzJVZ1ZWSk1YRzR2THk4Z1FISmxkSFZ5YmlCN1ZYSnNmVnh1THk4dklFQnlaWEYxYVhKbElDUmlZWE5sTFhWeWJGeHVRR1oxYm1OMGFXOXVJR2x0WVdkbEtDUndZWFJvTENBa1ltRnpaVG9nSkdKaGMyVXRkWEpzS1NCN1hHNGdJRUJ5WlhSMWNtNGdZWE56WlhRb0pHSmhjMlVzSUNkcGJXRm5aWE12Snl3Z0pIQmhkR2dwTzF4dWZWeHVYRzR2THk4Z1VtVjBkWEp1Y3lCVlVrd2dkRzhnWVNCbWIyNTBJR0poYzJWa0lHOXVJR2wwY3lCd1lYUm9YRzR2THk4Z1FIQmhjbUZ0SUh0VGRISnBibWQ5SUNSd1lYUm9JQzBnWm05dWRDQndZWFJvWEc0dkx5OGdRSEJoY21GdElIdFRkSEpwYm1kOUlDUmlZWE5sSUZza1ltRnpaUzExY214ZElDMGdZbUZ6WlNCVlVreGNiaTh2THlCQWNtVjBkWEp1SUh0VmNteDlYRzR2THk4Z1FISmxjWFZwY21VZ0pHSmhjMlV0ZFhKc1hHNUFablZ1WTNScGIyNGdabTl1ZENna2NHRjBhQ3dnSkdKaGMyVTZJQ1JpWVhObExYVnliQ2tnZTF4dUlDQkFjbVYwZFhKdUlHRnpjMlYwS0NSaVlYTmxMQ0FuWm05dWRITXZKeXdnSkhCaGRHZ3BPMXh1ZlZ4dUlpd0tDUWtpTHk4Z0xTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzFjYmk4dklGUm9hWE1nWm1sc1pTQmpiMjUwWVdsdWN5QmhiR3dnWVhCd2JHbGpZWFJwYjI0dGQybGtaU0JUWVhOeklHMXBlR2x1Y3k1Y2JpOHZJQzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdFhHNWNiaTh2THlCRmRtVnVkQ0IzY21Gd2NHVnlYRzR2THk4Z1FHRjFkR2h2Y2lCSVlYSnllU0JTYjJKbGNuUnpYRzR2THk4Z1FIQmhjbUZ0SUh0Q2IyOXNmU0FrYzJWc1ppQmJabUZzYzJWZElDMGdWMmhsZEdobGNpQnZjaUJ1YjNRZ2RHOGdhVzVqYkhWa1pTQmpkWEp5Wlc1MElITmxiR1ZqZEc5eVhHNHZMeThnUUd4cGJtc2dhSFIwY0hNNkx5OTBkMmwwZEdWeUxtTnZiUzlqYzNOM2FYcGhjbVJ5ZVM5emRHRjBkWE12TkRjNE9UTTROVE13TXpReU1EQTJOemcwSUU5eWFXZHBibUZzSUhSM1pXVjBJR1p5YjIwZ1NHRnljbmtnVW05aVpYSjBjMXh1UUcxcGVHbHVJRzl1TFdWMlpXNTBLQ1J6Wld4bU9pQm1ZV3h6WlNrZ2UxeHVJQ0JBYVdZZ0pITmxiR1lnZTF4dUlDQWdJQ1lzWEc0Z0lDQWdKanBvYjNabGNpeGNiaUFnSUNBbU9tRmpkR2wyWlN4Y2JpQWdJQ0FtT21adlkzVnpJSHRjYmlBZ0lDQWdJRUJqYjI1MFpXNTBPMXh1SUNBZ0lIMWNiaUFnZlNCQVpXeHpaU0I3WEc0Z0lDQWdKanBvYjNabGNpeGNiaUFnSUNBbU9tRmpkR2wyWlN4Y2JpQWdJQ0FtT21adlkzVnpJSHRjYmlBZ0lDQWdJRUJqYjI1MFpXNTBPMXh1SUNBZ0lIMWNiaUFnZlZ4dWZWeHVYRzR2THk4Z1RXRnJaU0JoSUdOdmJuUmxlSFFnWW1GelpXUWdjMlZzWldOMGIzSWdZU0JzYVhSMGJHVWdiVzl5WlNCbWNtbGxibVJzZVZ4dUx5OHZJRUJoZFhSb2IzSWdTSFZuYnlCSGFYSmhkV1JsYkZ4dUx5OHZJRUJ3WVhKaGJTQjdVM1J5YVc1bmZTQWtZMjl1ZEdWNGRGeHVRRzFwZUdsdUlIZG9aVzR0YVc1emFXUmxLQ1JqYjI1MFpYaDBLU0I3WEc0Z0lDTjdKR052Ym5SbGVIUjlJQ1lnZTF4dUlDQWdJRUJqYjI1MFpXNTBPMXh1SUNCOVhHNTlYRzVjYmk4dkx5QlNaWE53YjI1emFYWmxJRzFoYm1GblpYSmNiaTh2THlCQWNHRnlZVzBnZTFOMGNtbHVaMzBnSkdKeVpXRnJjRzlwYm5RZ0xTQkNjbVZoYTNCdmFXNTBYRzR2THk4Z1FISmxjWFZwY21WeklDUmljbVZoYTNCdmFXNTBjMXh1THk4dklFQnNhVzVySUdoMGRIQTZMeTl6WVhOekxXZDFhV1JsYkdsdUxtVnpMeU5pY21WaGEzQnZhVzUwTFcxaGJtRm5aWElnVTJGemN5QkhkV2xrWld4cGJtVnpJQzBnUW5KbFlXdHdiMmx1ZENCTllXNWhaMlZ5WEc1QWJXbDRhVzRnY21WemNHOXVaQzEwYnlna1luSmxZV3R3YjJsdWRDa2dlMXh1SUNBa2NYVmxjbms2SUcxaGNDMW5aWFFvSkdKeVpXRnJjRzlwYm5SekxDQWtZbkpsWVd0d2IybHVkQ2s3WEc0Z0lGeHVJQ0JBYVdZZ2JtOTBJQ1J4ZFdWeWVTQjdYRzRnSUNBZ1FHVnljbTl5SUNkT2J5QjJZV3gxWlNCbWIzVnVaQ0JtYjNJZ1lDTjdKR0p5WldGcmNHOXBiblI5WUM0Z1VHeGxZWE5sSUcxaGEyVWdjM1Z5WlNCcGRDQnBjeUJrWldacGJtVmtJR2x1SUdBa1luSmxZV3R3YjJsdWRITmdJRzFoY0M0bk8xeHVJQ0I5WEc1Y2JpQWdRRzFsWkdsaElDTjdhV1lvZEhsd1pTMXZaaWdrY1hWbGNua3BJRDA5SUNkemRISnBibWNuTENCMWJuRjFiM1JsS0NSeGRXVnllU2tzSUdsdWMzQmxZM1FvSkhGMVpYSjVLU2w5SUh0Y2JpQWdJQ0JBWTI5dWRHVnVkRHRjYmlBZ2ZWeHVmVnh1SWl3S0NRa2lMeThnTFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMWNiaTh2SUZSb2FYTWdabWxzWlNCamIyNTBZV2x1Y3lCMlpYSjVJR0poYzJsaklITjBlV3hsY3k1Y2JpOHZJQzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdFhHNWNiaThxS2x4dUlDb2dVMlYwSUhWd0lHRWdaR1ZqWlc1MElHSnZlQ0J0YjJSbGJDQnZiaUIwYUdVZ2NtOXZkQ0JsYkdWdFpXNTBYRzRnS2k5Y2JtaDBiV3dnZTF4dUlDQmliM2d0YzJsNmFXNW5PaUJpYjNKa1pYSXRZbTk0TzF4dWZWeHVYRzR2S2lwY2JpQXFJRTFoYTJVZ1lXeHNJR1ZzWlcxbGJuUnpJR1p5YjIwZ2RHaGxJRVJQVFNCcGJtaGxjbWwwSUdaeWIyMGdkR2hsSUhCaGNtVnVkQ0JpYjNndGMybDZhVzVuWEc0Z0tpQlRhVzVqWlNCZ0ttQWdhR0Z6SUdFZ2MzQmxZMmxtYVdOcGRIa2diMllnTUN3Z2FYUWdaRzlsY3lCdWIzUWdiM1psY25KcFpHVWdkR2hsSUdCb2RHMXNZQ0IyWVd4MVpWeHVJQ29nYldGcmFXNW5JR0ZzYkNCbGJHVnRaVzUwY3lCcGJtaGxjbWwwYVc1bklHWnliMjBnZEdobElISnZiM1FnWW05NExYTnBlbWx1WnlCMllXeDFaVnh1SUNvZ1UyVmxPaUJvZEhSd2N6b3ZMMk56Y3kxMGNtbGphM011WTI5dEwybHVhR1Z5YVhScGJtY3RZbTk0TFhOcGVtbHVaeTF3Y205aVlXSnNlUzF6YkdsbmFIUnNlUzFpWlhSMFpYSXRZbVZ6ZEMxd2NtRmpkR2xqWlM5Y2JpQXFMMXh1S2l3Z0tqbzZZbVZtYjNKbExDQXFPanBoWm5SbGNpQjdYRzRnSUdKdmVDMXphWHBwYm1jNklHbHVhR1Z5YVhRN1hHNTlJRnh1WEc0dktpcGNiaUFxSUVKaGMybGpJSE4wZVd4bGN5Qm1iM0lnYkdsdWEzTmNiaUFxTDF4dVlTQjdYRzRnSUdOdmJHOXlPaUFrWW5KaGJtUXRZMjlzYjNJN1hHNGdJSFJsZUhRdFpHVmpiM0poZEdsdmJqb2dibTl1WlR0Y2JseHVJQ0JBYVc1amJIVmtaU0J2YmkxbGRtVnVkQ0I3WEc0Z0lDQWdZMjlzYjNJNklDUjBaWGgwTFdOdmJHOXlPMXh1SUNBZ0lIUmxlSFF0WkdWamIzSmhkR2x2YmpvZ2RXNWtaWEpzYVc1bE8xeHVJQ0I5WEc1OVhHNWNibWgwYld3Z2UxeHVJQ0FnSUdOdmJHOXlPaUFqTWpJeU8xeHVJQ0FnSUdadmJuUXRjMmw2WlRvZ01XVnRPMXh1SUNBZ0lHeHBibVV0YUdWcFoyaDBPaUF4TGpRN1hHNTlYRzVjYmpvNkxXMXZlaTF6Wld4bFkzUnBiMjRnZTF4dUlDQWdJR0poWTJ0bmNtOTFibVE2SUNOaU0yUTBabU03WEc0Z0lDQWdkR1Y0ZEMxemFHRmtiM2M2SUc1dmJtVTdYRzU5WEc1Y2JqbzZjMlZzWldOMGFXOXVJSHRjYmlBZ0lDQmlZV05yWjNKdmRXNWtPaUFqWWpOa05HWmpPMXh1SUNBZ0lIUmxlSFF0YzJoaFpHOTNPaUJ1YjI1bE8xeHVmVnh1WEc1b2NpQjdYRzRnSUNBZ1pHbHpjR3hoZVRvZ1lteHZZMnM3WEc0Z0lDQWdhR1ZwWjJoME9pQXhjSGc3WEc0Z0lDQWdZbTl5WkdWeU9pQXdPMXh1SUNBZ0lHSnZjbVJsY2kxMGIzQTZJREZ3ZUNCemIyeHBaQ0FqWTJOak8xeHVJQ0FnSUcxaGNtZHBiam9nTVdWdElEQTdYRzRnSUNBZ2NHRmtaR2x1WnpvZ01EdGNibjFjYmx4dVlYVmthVzhzWEc1allXNTJZWE1zWEc1cFpuSmhiV1VzWEc1cGJXY3NYRzV6ZG1jc1hHNTJhV1JsYnlCN1hHNGdJQ0FnZG1WeWRHbGpZV3d0WVd4cFoyNDZJRzFwWkdSc1pUdGNibjFjYmx4dVptbGxiR1J6WlhRZ2UxeHVJQ0FnSUdKdmNtUmxjam9nTUR0Y2JpQWdJQ0J0WVhKbmFXNDZJREE3WEc0Z0lDQWdjR0ZrWkdsdVp6b2dNRHRjYm4xY2JseHVkR1Y0ZEdGeVpXRWdlMXh1SUNBZ0lISmxjMmw2WlRvZ2RtVnlkR2xqWVd3N1hHNTlYRzRpTEFvSkNTSXZMeUF0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExWeHVMeThnVkdocGN5Qm1hV3hsSUdOdmJuUmhhVzV6SUdGc2JDQkFabTl1ZEMxbVlXTmxJR1JsWTJ4aGNtRjBhVzl1Y3l3Z2FXWWdZVzU1TGx4dUx5OGdMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMxY2JrQm1iMjUwTFdaaFkyVWdleUJtYjI1MExXWmhiV2xzZVRvZ1FtVmhkbVZ5T3lCemNtTTZJSFZ5YkNnblptOXVkSE12WW1WaGRtVnlMblIwWmljcE95QjlYRzRpTEFvSkNTSXZLaXBjYmlBcUlFSmhjMmxqSUhSNWNHOW5jbUZ3YUhrZ2MzUjViR1VnWm05eUlHTnZjSGtnZEdWNGRGeHVJQ292WEc1aWIyUjVJSHRjYmlBZ1kyOXNiM0k2SUNSMFpYaDBMV052Ykc5eU8xeHVJQ0JtYjI1ME9pQnViM0p0WVd3Z01USTFKU0F2SURFdU5DQWtkR1Y0ZEMxbWIyNTBMWE4wWVdOck8xeHVmVnh1SWl3S0NRa2lMeThnTFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMWNiaTh2SUZSb2FYTWdabWxzWlNCamIyNTBZV2x1Y3lCRFUxTWdhR1ZzY0dWeUlHTnNZWE56WlhNdVhHNHZMeUF0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExWeHVYRzR2S2lwY2JpQXFJRU5zWldGeUlHbHVibVZ5SUdac2IyRjBjMXh1SUNvdlhHNHVZMnhsWVhKbWFYZzZPbUZtZEdWeUlIdGNiaUFnWTJ4bFlYSTZJR0p2ZEdnN1hHNGdJR052Ym5SbGJuUTZJQ2NuTzF4dUlDQmthWE53YkdGNU9pQjBZV0pzWlR0Y2JuMWNibHh1TG1Oc1pXRnlabWw0T21KbFptOXlaU3hjYmk1amJHVmhjbVpwZURwaFpuUmxjaUI3WEc0Z0lDQWdZMjl1ZEdWdWREb2dYQ0lnWENJN1hHNGdJQ0FnWkdsemNHeGhlVG9nZEdGaWJHVTdYRzU5WEc1Y2JpNWpiR1ZoY21acGVEcGhablJsY2lCN1hHNGdJQ0FnWTJ4bFlYSTZJR0p2ZEdnN1hHNTlYRzVjYmk1amJHVmhjbVpwZUNCN1hHNGdJQ0FnS25wdmIyMDZJREU3WEc1OVhHNWNiaThxS2x4dUlDb2dUV0ZwYmlCamIyNTBaVzUwSUdOdmJuUmhhVzVsY25OY2JpQXFJREV1SUUxaGEyVWdkR2hsSUdOdmJuUmhhVzVsY2lCbWRXeHNMWGRwWkhSb0lIZHBkR2dnWVNCdFlYaHBiWFZ0SUhkcFpIUm9YRzRnS2lBeUxpQkRaVzUwWlhJZ2FYUWdhVzRnZEdobElIWnBaWGR3YjNKMFhHNGdLaUF6TGlCTVpXRjJaU0J6YjIxbElITndZV05sSUc5dUlIUm9aU0JsWkdkbGN5d2daWE53WldOcFlXeHNlU0IyWVd4MVlXSnNaU0J2YmlCemJXRnNiQ0J6WTNKbFpXNXpYRzRnS2k5Y2JpNWpiMjUwWVdsdVpYSWdlMXh1SUNCdFlYZ3RkMmxrZEdnNklDUnRZWGd0ZDJsa2RHZzdJQzhxSURFZ0tpOWNiaUFnYldGeVoybHVMV3hsWm5RNklHRjFkRzg3SUM4cUlESWdLaTljYmlBZ2JXRnlaMmx1TFhKcFoyaDBPaUJoZFhSdk95QXZLaUF5SUNvdlhHNGdJSEJoWkdScGJtY3RiR1ZtZERvZ01qQndlRHNnTHlvZ015QXFMMXh1SUNCd1lXUmthVzVuTFhKcFoyaDBPaUF5TUhCNE95QXZLaUF6SUNvdlhHNGdJSGRwWkhSb09pQXhNREFsT3lBdktpQXhJQ292WEc0Z2ZWeHVYRzR2S2lwY2JpQXFJRWhwWkdVZ2RHVjRkQ0IzYUdsc1pTQnRZV3RwYm1jZ2FYUWdjbVZoWkdGaWJHVWdabTl5SUhOamNtVmxiaUJ5WldGa1pYSnpYRzRnS2lBeExpQk9aV1ZrWldRZ2FXNGdWMlZpUzJsMExXSmhjMlZrSUdKeWIzZHpaWEp6SUdKbFkyRjFjMlVnYjJZZ1lXNGdhVzF3YkdWdFpXNTBZWFJwYjI0Z1luVm5PMXh1SUNvZ0lDQWdVMlZsT2lCb2RIUndjem92TDJOdlpHVXVaMjl2WjJ4bExtTnZiUzl3TDJOb2NtOXRhWFZ0TDJsemMzVmxjeTlrWlhSaGFXdy9hV1E5TkRVM01UUTJYRzRnS2k5Y2JpNW9hV1JsTFhSbGVIUWdlMXh1SUNCdmRtVnlabXh2ZHpvZ2FHbGtaR1Z1TzF4dUlDQndZV1JrYVc1bk9pQXdPeUF2S2lBeElDb3ZYRzRnSUhSbGVIUXRhVzVrWlc1ME9pQXhNREVsTzF4dUlDQjNhR2wwWlMxemNHRmpaVG9nYm05M2NtRndPMXh1ZlZ4dVhHNHZLaXBjYmlBcUlFaHBaR1VnWld4bGJXVnVkQ0IzYUdsc1pTQnRZV3RwYm1jZ2FYUWdjbVZoWkdGaWJHVWdabTl5SUhOamNtVmxiaUJ5WldGa1pYSnpYRzRnS2lCVGFHRnRaV3hsYzNOc2VTQmliM0p5YjNkbFpDQm1jbTl0SUVoVVRVdzFRbTlwYkdWeWNHeGhkR1U2WEc0Z0tpQm9kSFJ3Y3pvdkwyZHBkR2gxWWk1amIyMHZhRFZpY0M5b2RHMXNOUzFpYjJsc1pYSndiR0YwWlM5aWJHOWlMMjFoYzNSbGNpOXpjbU12WTNOekwyMWhhVzR1WTNOekkwd3hNVGt0VERFek0xeHVJQ292WEc0dWRtbHpkV0ZzYkhrdGFHbGtaR1Z1SUhzZ1hHNGdJR0p2Y21SbGNqb2dNRHRjYmlBZ1kyeHBjRG9nY21WamRDZ3dJREFnTUNBd0tUdGNiaUFnYUdWcFoyaDBPaUF4Y0hnN1hHNGdJRzFoY21kcGJqb2dMVEZ3ZUR0Y2JpQWdiM1psY21ac2IzYzZJR2hwWkdSbGJqdGNiaUFnY0dGa1pHbHVaem9nTUR0Y2JpQWdjRzl6YVhScGIyNDZJR0ZpYzI5c2RYUmxPMXh1SUNCM2FXUjBhRG9nTVhCNE8xeHVmVnh1WEc0dWFHbGtaR1Z1SUh0Y2JpQWdJQ0JrYVhOd2JHRjVPaUJ1YjI1bElDRnBiWEJ2Y25SaGJuUTdYRzRnSUNBZ2RtbHphV0pwYkdsMGVUb2dhR2xrWkdWdU8xeHVmVnh1WEc0dWRtbHpkV0ZzYkhsb2FXUmtaVzRnZTF4dUlDQWdJR0p2Y21SbGNqb2dNRHRjYmlBZ0lDQmpiR2x3T2lCeVpXTjBLREFnTUNBd0lEQXBPMXh1SUNBZ0lHaGxhV2RvZERvZ01YQjRPMXh1SUNBZ0lHMWhjbWRwYmpvZ0xURndlRHRjYmlBZ0lDQnZkbVZ5Wm14dmR6b2dhR2xrWkdWdU8xeHVJQ0FnSUhCaFpHUnBibWM2SURBN1hHNGdJQ0FnY0c5emFYUnBiMjQ2SUdGaWMyOXNkWFJsTzF4dUlDQWdJSGRwWkhSb09pQXhjSGc3WEc1OVhHNWNiaTUyYVhOMVlXeHNlV2hwWkdSbGJpNW1iMk4xYzJGaWJHVTZZV04wYVhabExGeHVMblpwYzNWaGJHeDVhR2xrWkdWdUxtWnZZM1Z6WVdKc1pUcG1iMk4xY3lCN1hHNGdJQ0FnWTJ4cGNEb2dZWFYwYnp0Y2JpQWdJQ0JvWldsbmFIUTZJR0YxZEc4N1hHNGdJQ0FnYldGeVoybHVPaUF3TzF4dUlDQWdJRzkyWlhKbWJHOTNPaUIyYVhOcFlteGxPMXh1SUNBZ0lIQnZjMmwwYVc5dU9pQnpkR0YwYVdNN1hHNGdJQ0FnZDJsa2RHZzZJR0YxZEc4N1hHNTlYRzVjYmk1cGJuWnBjMmxpYkdVZ2UxeHVJQ0FnSUhacGMybGlhV3hwZEhrNklHaHBaR1JsYmp0Y2JuMWNiaUlzQ2drSklrQnRaV1JwWVNCd2NtbHVkQ0I3WEc0Z0lDQWdLaXhjYmlBZ0lDQXFPbUpsWm05eVpTeGNiaUFnSUNBcU9tRm1kR1Z5SUh0Y2JpQWdJQ0FnSUNBZ1ltRmphMmR5YjNWdVpEb2dkSEpoYm5Od1lYSmxiblFnSVdsdGNHOXlkR0Z1ZER0Y2JpQWdJQ0FnSUNBZ1kyOXNiM0k2SUNNd01EQWdJV2x0Y0c5eWRHRnVkRHRjYmlBZ0lDQWdJQ0FnWW05NExYTm9ZV1J2ZHpvZ2JtOXVaU0FoYVcxd2IzSjBZVzUwTzF4dUlDQWdJQ0FnSUNCMFpYaDBMWE5vWVdSdmR6b2dibTl1WlNBaGFXMXdiM0owWVc1ME8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdFc1hHNGdJQ0FnWVRwMmFYTnBkR1ZrSUh0Y2JpQWdJQ0FnSUNBZ2RHVjRkQzFrWldOdmNtRjBhVzl1T2lCMWJtUmxjbXhwYm1VN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnWVZ0b2NtVm1YVHBoWm5SbGNpQjdYRzRnSUNBZ0lDQWdJR052Ym5SbGJuUTZJRndpSUNoY0lpQmhkSFJ5S0doeVpXWXBJRndpS1Z3aU8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdGaVluSmJkR2wwYkdWZE9tRm1kR1Z5SUh0Y2JpQWdJQ0FnSUNBZ1kyOXVkR1Z1ZERvZ1hDSWdLRndpSUdGMGRISW9kR2wwYkdVcElGd2lLVndpTzF4dUlDQWdJSDFjYmx4dUlDQWdJR0ZiYUhKbFpsNDlYQ0lqWENKZE9tRm1kR1Z5TEZ4dUlDQWdJR0ZiYUhKbFpsNDlYQ0pxWVhaaGMyTnlhWEIwT2x3aVhUcGhablJsY2lCN1hHNGdJQ0FnSUNBZ0lHTnZiblJsYm5RNklGd2lYQ0k3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdjSEpsTEZ4dUlDQWdJR0pzYjJOcmNYVnZkR1VnZTF4dUlDQWdJQ0FnSUNCaWIzSmtaWEk2SURGd2VDQnpiMnhwWkNBak9UazVPMXh1SUNBZ0lDQWdJQ0J3WVdkbExXSnlaV0ZyTFdsdWMybGtaVG9nWVhadmFXUTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2RHaGxZV1FnZTF4dUlDQWdJQ0FnSUNCa2FYTndiR0Y1T2lCMFlXSnNaUzFvWldGa1pYSXRaM0p2ZFhBN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnZEhJc1hHNGdJQ0FnYVcxbklIdGNiaUFnSUNBZ0lDQWdjR0ZuWlMxaWNtVmhheTFwYm5OcFpHVTZJR0YyYjJsa08xeHVJQ0FnSUgxY2JseHVJQ0FnSUdsdFp5QjdYRzRnSUNBZ0lDQWdJRzFoZUMxM2FXUjBhRG9nTVRBd0pTQWhhVzF3YjNKMFlXNTBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lIQXNYRzRnSUNBZ2FESXNYRzRnSUNBZ2FETWdlMXh1SUNBZ0lDQWdJQ0J2Y25Cb1lXNXpPaUF6TzF4dUlDQWdJQ0FnSUNCM2FXUnZkM002SURNN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYURJc1hHNGdJQ0FnYURNZ2UxeHVJQ0FnSUNBZ0lDQndZV2RsTFdKeVpXRnJMV0ZtZEdWeU9pQmhkbTlwWkR0Y2JpQWdJQ0I5WEc1OVhHNGlMQW9KQ1NJdkx5QXRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFZ4dUx5OGdWR2hwY3lCbWFXeGxJR052Ym5SaGFXNXpJR0ZzYkNCemRIbHNaWE1nY21Wc1lYUmxaQ0IwYnlCMGFHVWdhR1ZoWkdWeUlHOW1JSFJvWlNCemFYUmxMMkZ3Y0d4cFkyRjBhVzl1TGx4dUx5OGdMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMxY2JseHVJMmhsWVdSbGNpMWpiMjUwWVdsdVpYSmNibnRjYmx4MFFHbHVZMngxWkdVZ2IzVjBaWEl0WTI5dWRHRnBibVZ5TzF4dWZWeHVYRzRqYkc5bmJ5MWpiMjUwWVdsdVpYSmNibnRjYmx4MFltRmphMmR5YjNWdVpDMWpiMnh2Y2pvZ0kwWkdSa1pHUmpzZ2QybGtkR2c2SUdGMWRHODdJR2hsYVdkb2REb2dZWFYwYnpzZ1hHNWNkQzhxY0c5emFYUnBiMjQ2SUdGaWMyOXNkWFJsT3lCc1pXWjBPaUF5TUhCNE95QjBiM0E2SURCd2VEc3FMMXh1WEhSbWIyNTBMV1poYldsc2VUb2dRbVZoZG1WeU8xeHVYSFJ2Y0dGamFYUjVPaUF3TGprN1hHNWNkR2x0WnlCN1hHNWNkRngwYldGeVoybHVPaUF3TzF4dVhIUmNkSEJoWkdScGJtYzZJREE3WEc1Y2RIMWNibHgwYURFZ2UxeHVYSFJjZEdadmJuUXRjMmw2WlRvZ016SXVOSEI0TzF4dVhIUmNkSEJoWkdScGJtYzZJREE3WEc1Y2RGeDBiV0Z5WjJsdU9pQXdJREJ3ZUR0Y2JseDBmVnh1WEhSd0lIdGNibHgwWEhSd1lXUmthVzVuT2lBd08xeHVYSFJjZEcxaGNtZHBiam9nTUNBeWNIZzdYRzVjZEgxY2JseDBRR2x1WTJ4MVpHVWdjM0JoYmkxamIyeDFiVzV6S0RNZ2IyWWdNVElwTzF4dWZWeHVJMmhsWVdSbGNpMWlZVzV1WlhKY2JudGNibHgwWW1GamEyZHliM1Z1WkRvZ2RYSnNLR2x0Wnk5cllYTm9ZVzVoTG5CdVp5azdYRzVjZEdobGFXZG9kRG9nTWpjd2NIZzdYRzU5WEc0aUxBb0pDU0l2THlBdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMVnh1THk4Z1ZHaHBjeUJtYVd4bElHTnZiblJoYVc1eklHRnNiQ0J6ZEhsc1pYTWdjbVZzWVhSbFpDQjBieUIwYUdVZ1ptOXZkR1Z5SUc5bUlIUm9aU0J6YVhSbEwyRndjR3hwWTJGMGFXOXVMbHh1THk4Z0xTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzFjYmx4dVltOWtlU0JtYjI5MFpYSWdlMXh1WEhSaVlXTnJaM0p2ZFc1a09pQnNhVzVsWVhJdFozSmhaR2xsYm5Rb2RHOGdZbTkwZEc5dExDQWpNVGd4T0RFNElEQWxMQ0FqTXpRek5ETTBJREV3TUNVcE95QXZLaUJYTTBNZ0tpOWNibHgwWTI5c2IzSTZJSGRvYVhSbE8xeHVYSFJ3WVdSa2FXNW5PaUF5TUhCNElEQTdYRzVjZEhSbGVIUXRZV3hwWjI0NklHTmxiblJsY2p0Y2JuMWNiaUlzQ2drSklpNXVZWFl0WTI5dWRHRnBibVZ5SUh0Y2JseDBRR2x1WTJ4MVpHVWdiM1YwWlhJdFkyOXVkR0ZwYm1WeU8xeHVmVnh1WEc1b1pXRmtaWElnYm1GMklIdGNibHgwWW1GamEyZHliM1Z1WkRvZ2JHbHVaV0Z5TFdkeVlXUnBaVzUwS0hSdklHSnZkSFJ2YlN3Z0l6ZGtOMlUzWkNBd0pTd2pNR1V3WlRCbElERXdNQ1VwT3lBdktpQlhNME1nS2k5Y2JseDBkMmxrZEdnNklERXdNQ1U3WEc1Y2RHUnBjM0JzWVhrNklHbHViR2x1WlMxaWJHOWphenRjYmx4MFlTQjdYRzVjZEZ4MFpHbHpjR3hoZVRwaWJHOWphenRjYmx4MFhIUmpiMnh2Y2pwM2FHbDBaVHRjYmx4MFhIUm1iMjUwTFhkbGFXZG9kRHBpYjJ4a08xeHVYSFJjZENZNmFHOTJaWElnZTF4dVhIUmNkRngwZEdWNGRDMWtaV052Y21GMGFXOXVPaUIxYm1SbGNteHBibVU3WEc1Y2RGeDBmVnh1WEhSY2RDWTZhRzkyWlhJc0lDWTZkbWx6YVhSbFpDQjdYRzVjZEZ4MFhIUmpiMnh2Y2pwM2FHbDBaVHRjYmx4MFhIUjlYRzVjZEgxY2JseDBkV3dnZTF4dVhIUmNkR3hwYzNRdGMzUjViR1V0ZEhsd1pUb2dibTl1WlR0Y2JseDBYSFJrYVhOd2JHRjVPaUJwYm14cGJtVXRZbXh2WTJzN1hHNWNkRngwYldGeVoybHVPaUF3TzF4dVhIUmNkSEJoWkdScGJtYzZJREE3WEc1Y2RIMWNibHgwYkdrZ2UxeHVYSFJjZEdac2IyRjBPaUJzWldaME8xeHVYSFJjZEhCaFpHUnBibWM2SURBdU0yVnRJREF1Tm1WdE8xeHVYSFJjZEdOdmJHOXlPaUIzYUdsMFpUdGNibHgwWEhSaWIzSmtaWEl0YkdWbWREb2dNWEI0SUhOdmJHbGtJQ00yTnpZd05qQTdYRzVjZEZ4MFltOXlaR1Z5TFhKcFoyaDBPaUF4Y0hnZ2MyOXNhV1FnSXpJek1VVXhSVHRjYmx4MFhIUm1iMjUwTFdaaGJXbHNlVG9nWVhKcFlXdzdYRzVjZEZ4MFptOXVkQzEzWldsbmFIUTZJR0p2YkdRN1hHNWNkRngwWm05dWRDMXphWHBsT2lBeExqRmxiVHRjYmx4MFhIUW1PbVpwY25OMExXTm9hV3hrSUh0Y2JseDBYSFJjZEdKdmNtUmxjaTFzWldaME9pQnViMjVsTzF4dVhIUmNkSDFjYmx4MFhIUW1PbXhoYzNRdFkyaHBiR1FnZTF4dVhIUmNkRngwWW05eVpHVnlMWEpwWjJoME9pQnViMjVsTzF4dVhIUmNkSDFjYmx4MGZWeHVmVnh1WEc1bWIyOTBaWElnYm1GMklIdGNibHgwWkdsemNHeGhlVG9nYVc1c2FXNWxMV0pzYjJOck8xeHVYSFJoSUh0Y2JseDBYSFJqYjJ4dmNqcDNhR2wwWlR0Y2JseDBYSFFtT21odmRtVnlJSHRjYmx4MFhIUmNkSFJsZUhRdFpHVmpiM0poZEdsdmJqb2dkVzVrWlhKc2FXNWxPMXh1WEhSY2RIMWNibHgwWEhRbU9taHZkbVZ5TENBbU9uWnBjMmwwWldRZ2UxeHVYSFJjZEZ4MFkyOXNiM0k2ZDJocGRHVTdYRzVjZEZ4MGZWeHVYSFI5WEc1Y2RIVnNJSHRjYmx4MFhIUnNhWE4wTFhOMGVXeGxMWFI1Y0dVNklHNXZibVU3WEc1Y2RGeDBiV0Z5WjJsdU9pQXdPMXh1WEhSY2RIQmhaR1JwYm1jNklEQTdYRzVjZEgxY2JseDBiR2tnZTF4dVhIUmNkR1pzYjJGME9pQnNaV1owTzF4dVhIUmNkSEJoWkdScGJtYzZJREF1TTJWdElEQXVObVZ0TzF4dVhIUmNkR052Ykc5eU9pQjNhR2wwWlR0Y2JseDBYSFJtYjI1MExXWmhiV2xzZVRvZ1lYSnBZV3c3WEc1Y2RIMWNkRnh1ZlZ4dUlpd0tDUWtpWm05eWJTQjdYRzVjZEhkcFpIUm9PaUF4TURBbE8xeHVmVnh1STNObFlYSmphQ0JwYm5CMWRGdDBlWEJsUFZ3aWRHVjRkRndpWFNCN1hHNWNkR0p2Y21SbGNpMXlZV1JwZFhNNklEQXVOV1Y0SURBZ01DQXdMalZsZUR0Y2JseDBZbTl5WkdWeU9pQXdPMXh1WEhSdFlYSm5hVzQ2SURBN1hHNWNkQzF0YjNvdFltOTRMWE5vWVdSdmR6b2dhVzV6WlhRZ0xUVndlQ0F0TlhCNElEVndlQ0ExY0hnZ0kyRmhZVHRjYmx4MExYZGxZbXRwZEMxaWIzZ3RjMmhoWkc5M09pQnBibk5sZENBdE5YQjRJQzAxY0hnZ05YQjRJRFZ3ZUNBallXRmhPMXh1WEhSaWIzZ3RjMmhoWkc5M09pQnBibk5sZENBd0xqVmxlQ0F3TGpWbGVDQXdMakkxWlhnZ01HVjRJQ05oWVdFN1hHNWNkR1pzYjJGME9pQnNaV1owTzF4dVhIUndZV1JrYVc1bk9pQXhNSEI0TzF4dWZWeHVJM05sWVhKamFDQnBibkIxZEZ0MGVYQmxQVndpYzNWaWJXbDBYQ0pkSUhzZ1hHNWNkR0p2Y21SbGNpMXlZV1JwZFhNNklEQWdNQzQxWlhnZ01DNDFaWGdnTUR0Y2JseDBZbUZqYTJkeWIzVnVaQzFqYjJ4dmNqb2dJMEZFTVVVeFJUdGNibHgwWTI5c2IzSTZJSGRvYVhSbE8xeHVYSFJpYjNKa1pYSTZJREE3WEc1Y2RHWnNiMkYwT2lCc1pXWjBPMXh1WEhSd1lXUmthVzVuT2lBeE1IQjRPMXh1ZlZ4dVhHNGlMQW9KQ1NKdFlXbHVJR0Z6YVdSbElIdGNibHgwUUdsdVkyeDFaR1VnYzNCaGJpMWpiMngxYlc1ektEUWdiMllnTVRJcE8xeHVYSFJBYVc1amJIVmtaU0J6YUdsbWRDZ3hJRzltSURFeUtUdGNibjFjYmlJc0Nna0pJaThxYUhSdGJDQjdLaTljYmx4MEx5cGlZV05yWjNKdmRXNWtMV052Ykc5eU9pQWpSalpHTmtZM095b3ZYRzR2S24wcUwxeHVYRzVpYjJSNUlIdGNibHgwWW1GamEyZHliM1Z1WkMxamIyeHZjam9nSkdKaFkydG5jbTkxYm1RdFkyOXNiM0k3WEc1Y2RHSnZlQzF6YUdGa2IzYzZJREFnTUNBeE1IQjRJSEpuWW1Fb056WXNJRGMyTENBM05pd2dNQzQzS1R0Y2JuMWNibHh1WW05a2VTQnRZV2x1SUh0Y2JseDBRR2x1WTJ4MVpHVWdiM1YwWlhJdFkyOXVkR0ZwYm1WeU8xeHVYSFJ0WVhKbmFXNHRkRzl3T2lBeGNIZzdYRzU5WEc1Y2JpTmhaSE1nZTF4dVhIUnBiV2NnZTF4dVhIUmNkRUJwYm1Oc2RXUmxJSE53WVc0dFkyOXNkVzF1Y3lnMElHOW1JREV5S1R0Y2JseDBmVnh1ZlZ4dVhHNGpibVYzY3lCN1hHNWNkRUJwYm1Oc2RXUmxJSE53WVc0dFkyOXNkVzF1Y3lneE1pazdYRzVjZEhWc0lIdGNibHgwWEhSc2FYTjBMWE4wZVd4bE9pQnViMjVsTzF4dVhIUmNkSEJoWkdScGJtYzZJREE3WEc1Y2RIMWNibHgwYkdrZ2UxeHVYSFJjZEVCcGJtTnNkV1JsSUhOd1lXNHRZMjlzZFcxdWN5ZzBJRzltSURFeUtUdGNibHgwWEhSdFlYSm5hVzR0ZEc5d09pQXpNSEI0TzF4dVhIUjlYRzVjZEd4cE9tNTBhQzFqYUdsc1pDZ3piaWtnZTF4dVhIUmNkRzFoY21kcGJpMXlhV2RvZERvZ01EdGNibHgwZlZ4dVhIUmhjblJwWTJ4bElIdGNibHgwWEhSd2IzTnBkR2x2YmpvZ2NtVnNZWFJwZG1VN1hHNWNkRngwYldGNExXaGxhV2RvZERvZ05EQXdjSGc3WEc1Y2RGeDBiM1psY21ac2IzYzZJR2hwWkdSbGJqdGNibHgwWEhSMFpYaDBMVzkyWlhKbWJHOTNPaUJsYkd4cGNITnBjenRjYmx4dVhIUmNkR2x0WnlCN1hHNWNkRngwWEhSM2FXUjBhRG9nTVRBd0pUdGNibHgwWEhSOVhHNWNkSDFjYmx4MGFHVmhaR1Z5SUh0Y2JseDBYSFJvWldsbmFIUTZJREl3TUhCNE8xeHVYSFI5WEc1Y2RITmxZM1JwYjI0NllXWjBaWElnZTF4dVhIUmNkR052Ym5SbGJuUTZJRndpWENJN1hHNWNkRngwYUdWcFoyaDBPakl3TUhCNE8xeHVYSFJjZEhkcFpIUm9PakV3TUNVN1hHNWNkRngwY0c5emFYUnBiMjQ2SUdGaWMyOXNkWFJsTzF4dVhIUmNkR3hsWm5RNklEQTdYRzVjZEZ4MFltOTBkRzl0T2lBd08xeHVYSFJjZEdKaFkydG5jbTkxYm1RNklHeHBibVZoY2kxbmNtRmthV1Z1ZENoMGNtRnVjM0JoY21WdWRDQTFNQ1VzSUNSaVlXTnJaM0p2ZFc1a0xXTnZiRzl5S1R0Y2JseDBmVnh1WEhSaElIdGNibHgwWEhSamIyeHZjam9nWW14aFkyczdYRzVjZEgxY2JuMWNibHh1TG01bGQzTWdlMXh1WEhSQWFXNWpiSFZrWlNCemNHRnVMV052YkhWdGJuTW9NVElwTzF4dVhIUjFiQ0I3WEc1Y2RGeDBiR2x6ZEMxemRIbHNaVG9nYm05dVpUdGNibHgwWEhSd1lXUmthVzVuT2lBd08xeHVYSFI5WEc1Y2RHeHBJSHRjYmx4MFhIUkFhVzVqYkhWa1pTQnpjR0Z1TFdOdmJIVnRibk1vTkNCdlppQXhNaWs3WEc1Y2RGeDBiV0Z5WjJsdUxYUnZjRG9nTXpCd2VEdGNibHgwZlZ4dVhIUnNhVHB1ZEdndFkyaHBiR1FvTTI0cElIdGNibHgwWEhSdFlYSm5hVzR0Y21sbmFIUTZJREE3WEc1Y2RIMWNibHgwWVhKMGFXTnNaU0I3WEc1Y2RGeDBjRzl6YVhScGIyNDZJSEpsYkdGMGFYWmxPMXh1WEhSY2RHMWhlQzFvWldsbmFIUTZJRFF3TUhCNE8xeHVYSFJjZEc5MlpYSm1iRzkzT2lCb2FXUmtaVzQ3WEc1Y2RGeDBkR1Y0ZEMxdmRtVnlabXh2ZHpvZ1pXeHNhWEJ6YVhNN1hHNWNibHgwWEhScGJXY2dlMXh1WEhSY2RGeDBkMmxrZEdnNklERXdNQ1U3WEc1Y2RGeDBmVnh1WEhSOVhHNWNkR2hsWVdSbGNpQjdYRzVjZEZ4MGFHVnBaMmgwT2lBeU1EQndlRHRjYmx4MGZWeHVYSFJ6WldOMGFXOXVPbUZtZEdWeUlIdGNibHgwWEhSamIyNTBaVzUwT2lCY0lsd2lPMXh1WEhSY2RHaGxhV2RvZERveU1EQndlRHRjYmx4MFhIUjNhV1IwYURveE1EQWxPMXh1WEhSY2RIQnZjMmwwYVc5dU9pQmhZbk52YkhWMFpUdGNibHgwWEhSc1pXWjBPaUF3TzF4dVhIUmNkR0p2ZEhSdmJUb2dNRHRjYmx4MFhIUmlZV05yWjNKdmRXNWtPaUJzYVc1bFlYSXRaM0poWkdsbGJuUW9kSEpoYm5Od1lYSmxiblFnTlRBbExDQWtZbUZqYTJkeWIzVnVaQzFqYjJ4dmNpazdYRzVjZEgxY2JseDBZU0I3WEc1Y2RGeDBZMjlzYjNJNklHSnNZV05yTzF4dVhIUjlYRzU5WEc1Y2JpSXNDZ2tKSWk4dklDMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0WEc0dkx5QlVhR2x6SUdacGJHVWdZMjl1ZEdGcGJuTWdZV3hzSUhOMGVXeGxjeUJ5Wld4aGRHVmtJSFJ2SUhSb1pTQmlkWFIwYjI0Z1kyOXRjRzl1Wlc1MExseHVMeThnTFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMWNiaUlzQ2drSklpNWljbTkzYzJWeWRYQm5jbUZrWlNCN1hHNGdJQ0FnYldGeVoybHVPaUF3TGpKbGJTQXdPMXh1SUNBZ0lHSmhZMnRuY205MWJtUTZJQ05qWTJNN1hHNGdJQ0FnWTI5c2IzSTZJQ013TURBN1hHNGdJQ0FnY0dGa1pHbHVaem9nTUM0eVpXMGdNRHRjYm4xY2JpSXNDZ2tKSWk4dklDMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0WEc0dkx5QlVhR2x6SUdacGJHVWdZMjl1ZEdGcGJuTWdjM1I1YkdWeklIUm9ZWFFnWVhKbElITndaV05wWm1saklIUnZJSFJvWlNCb2IyMWxJSEJoWjJVdVhHNHZMeUF0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExWeHVYRzV2YkNCN1hHNWNkRDRnYkdrZ2UxeHVYSFJjZEdKaFkydG5jbTkxYm1RdFkyOXNiM0k2SUVZMFJqVkdOenRjYmx4MFhIUkFhVzVqYkhWa1pTQmlZV05yWjNKdmRXNWtMV2x0WVdkbEtDQnNhVzVsWVhJdFozSmhaR2xsYm5Rb2RHOGdiR1ZtZEN3Z0kwWkdSaXdnSTBZMFJqVkdOeWtnS1R0Y2JseDBYSFJtYkc5aGREb2diR1ZtZER0Y2JseDBYSFJtYjI1MExXWmhiV2xzZVRvZ0pHeDFZMmxrWVMxbmNtRnVaR1U3WEc1Y2RGeDBjRzl6YVhScGIyNDZJSEpsYkdGMGFYWmxPMXh1WEhSY2RFQnBibU5zZFdSbElIUnlZVzV6YVhScGIyNG9JR0ZzYkNBd0xqaHpJQ2s3WEc1Y2JseDBYSFFtT2pwaFpuUmxjaUI3WEc1Y2RGeDBYSFJqYjI1MFpXNTBPaUJjSWlCY0lqdGNibHgwWEhSY2RHaGxhV2RvZERvZ01qTndlRHRjYmx4MFhIUmNkRUJwYm1Oc2RXUmxJSEJ2YzJsMGFXOXVLQ0JoWW5OdmJIVjBaU3dnTVRCd2VDQXRNVE53ZUNBd0lEQWdLVHRjYmx4MFhIUmNkRUJwYm1Oc2RXUmxJSFJ5WVc1elptOXliU2dnY205MFlYUmxLRFExWkdWbktTQnphMlYzS0RJd1pHVm5MQ0F6TUdSbFp5a2dLVHRjYmx4MFhIUmNkSGRwWkhSb09pQXlNM0I0TzF4dVhIUmNkSDFjYmx4MGZWeHVmVnh1WEc0dWNHRnlaVzUwSUh0Y2JpQWdRR2x1WTJ4MVpHVWdZV3hwWjI0dGFYUmxiWE1vYzNSeVpYUmphQ2s3WEc0Z0lFQnBibU5zZFdSbElHUnBjM0JzWVhrb1pteGxlQ2s3WEc0Z0lFQnBibU5zZFdSbElHWnNaWGd0WkdseVpXTjBhVzl1S0hKdmR5azdYRzRnSUVCcGJtTnNkV1JsSUdwMWMzUnBabmt0WTI5dWRHVnVkQ2htYkdWNExYTjBZWEowS1R0Y2JuMWNibHh1TG5CaGNtVnVkQ0ErSUM1amFHbHNaQ0I3WEc0Z0lFQnBibU5zZFdSbElHWnNaWGdvTVNrN1hHNTlYRzVjYmlOdFlXbHVMVzVsZDNNZ2UxeHVYSFJoY25ScFkyeGxJSHRjYmx4MFhIUm1iMjUwTFdaaGJXbHNlVG9nUVdSbGJHeGxMQ0JIWlc5eVoybGhMQ0J6WlhKcFpqdGNibHgwWEhSd1lXUmthVzVuT2lBeE1IQjRPMXh1WEhSY2RHWnZiblF0YzJsNlpUb2dNakJ3ZUR0Y2JseDBYSFJ3YjNOcGRHbHZiam9nY21Wc1lYUnBkbVU3WEc1Y2RGeDBRR2x1WTJ4MVpHVWdjM0JoYmkxamIyeDFiVzV6S0RZZ2IyWWdNVElwTzF4dVhIUmNkRzFoY21kcGJpMXlhV2RvZERvZ01EdGNibHgwWEhSM2FXUjBhRG9nTlRBbE8xeHVYSFJjZEdobGFXZG9kRG9nS0NSdFlYZ3RkMmxrZEdnZ0x5QXlLU0FxSUNnNUlDOGdNVFlwT3lBdktpQXhOam81SUhKaGRHbHZJQ292WEc1Y2RGeDBZbUZqYTJkeWIzVnVaRG9nYkdsdVpXRnlMV2R5WVdScFpXNTBLREV6TldSbFp5d2djbWRpWVNnak5ERTNOekV4TENBd0xqY3BMQ0J5WjJKaEtDTmtZelF5TWpVc0lEQXVOeWtwTzF4dVhIUmNkR052Ykc5eU9pQjNhR2wwWlR0Y2JseDBYSFJvWldGa1pYSWdlMXh1WEhSY2RGeDBjRzl6YVhScGIyNDZJR0ZpYzI5c2RYUmxPMXh1WEhSY2RGeDBkRzl3T2lBd08xeHVYSFJjZEgxY2JseDBYSFJ6WldOMGFXOXVJSHRjYmx4MFhIUmNkSEJ2YzJsMGFXOXVPaUJoWW5OdmJIVjBaVHRjYmx4MFhIUmNkR0p2ZEhSdmJUb2dNRHRjYmx4MFhIUjlYRzVjZEZ4MGFXMW5JSHRjYmx4MFhIUmNkSG90YVc1a1pYZzZJQzB4TzF4dVhIUmNkRngwYkdWbWREb2dNRHRjYmx4MFhIUmNkSFJ2Y0RvZ01EdGNibHgwWEhSY2RIQnZjMmwwYVc5dU9pQmhZbk52YkhWMFpUdGNibHgwWEhSY2RDOHFiV0Z5WjJsdU9pQmhkWFJ2T3lvdlhHNWNkRngwWEhSb1pXbG5hSFE2SURFd01DVTdYRzVjZEZ4MFhIUXZLbTFoZUMxb1pXbG5hSFE2SURFd01DVTdLaTljYmx4MFhIUmNkSGRwWkhSb09pQXhNREFsTzF4dVhIUmNkRngwTHlwdFlYZ3RkMmxrZEdnNklERXdNQ1U3S2k5Y2JseDBYSFI5WEc1Y2RIMWNibjFjYmx4dVhHNGpjMmh2ZDNNZ2UxeHVYSFJBYVc1amJIVmtaU0J6Y0dGdUxXTnZiSFZ0Ym5Nb09TQnZaaUF4TWlrN1hHNWNkSFZzSUh0Y2JseDBYSFJzYVhOMExYTjBlV3hsT2lCdWIyNWxPMXh1WEhSY2RIQmhaR1JwYm1jNklEQTdYRzVjZEgxY2JseDBiR2tnZTF4dVhIUmNkRUJwYm1Oc2RXUmxJSE53WVc0dFkyOXNkVzF1Y3lneklHOW1JRGtwTzF4dVhIUmNkRzFoY21kcGJpMTBiM0E2SURNd2NIZzdYRzVjZEgxY2JseDBiR2s2Ym5Sb0xXTm9hV3hrS0ROdUtTQjdYRzVjZEZ4MGJXRnlaMmx1TFhKcFoyaDBPaUF3TzF4dVhIUjlYRzVjZEdGeWRHbGpiR1VnZTF4dVhIUmNkSEJ2YzJsMGFXOXVPaUJ5Wld4aGRHbDJaVHRjYmx4MFhIUnRZWGd0YUdWcFoyaDBPaUEwTURCd2VEdGNibHgwWEhSdmRtVnlabXh2ZHpvZ2FHbGtaR1Z1TzF4dVhIUmNkSFJsZUhRdGIzWmxjbVpzYjNjNklHVnNiR2x3YzJsek8xeHVYRzVjZEZ4MGFXMW5JSHRjYmx4MFhIUmNkSGRwWkhSb09pQXhNREFsTzF4dVhIUmNkSDFjYmx4MGZWeHVYSFJvWldGa1pYSWdlMXh1WEhSY2RHaGxhV2RvZERvZ01qQXdjSGc3WEc1Y2RIMWNibHgwYzJWamRHbHZianBoWm5SbGNpQjdYRzVjZEZ4MFkyOXVkR1Z1ZERvZ1hDSmNJanRjYmx4MFhIUm9aV2xuYUhRNk1qQXdjSGc3WEc1Y2RGeDBkMmxrZEdnNk1UQXdKVHRjYmx4MFhIUndiM05wZEdsdmJqb2dZV0p6YjJ4MWRHVTdYRzVjZEZ4MGJHVm1kRG9nTUR0Y2JseDBYSFJpYjNSMGIyMDZJREE3WEc1Y2RGeDBZbUZqYTJkeWIzVnVaRG9nYkdsdVpXRnlMV2R5WVdScFpXNTBLSFJ5WVc1emNHRnlaVzUwSURVd0pTd2dKR0poWTJ0bmNtOTFibVF0WTI5c2IzSXBPMXh1WEhSOVhHNWNkR0VnZTF4dVhIUmNkR052Ykc5eU9pQmliR0ZqYXp0Y2JseDBmVnh1ZlZ4dVhHNGpjMmh2ZDNNZ2UxeHVYSFJ0WVhKbmFXNDZJREE3WEc1Y2RIQmhaR1JwYm1jNklEQTdYRzU5WEc1Y2JpTnphRzkzY3lCMWJDQjdYRzVjZEd4cGMzUXRjM1I1YkdVNklHNXZibVU3WEc1Y2RHMWhjbWRwYmpvZ01EdGNibHgwY0dGa1pHbHVaem9nTUR0Y2JseDBkR1Y0ZEMxaGJHbG5iam9nWTJWdWRHVnlPMXh1ZlZ4dUkzTm9iM2R6SUd4cElIdGNibHgwYjNabGNtWnNiM2M2SUdocFpHUmxianRjYmx4MGJXRnlaMmx1TFhKcFoyaDBPaUF4TUhCNE8xeHVYSFJ0WVhKbmFXNHRkRzl3T2lBd08xeHVYSFJ0WVhKbmFXNHRZbTkwZEc5dE9pQXhNSEI0TzF4dVhIUndZV1JrYVc1bk9pQXdPMXh1ZlZ4dUkzTm9iM2R6SUd4cElHZ3pJSHRjYmx4MFltOXlaR1Z5TFhKaFpHbDFjem9nTUhCNElEQndlQ0ExY0hnZ05YQjRPMXh1WEhSdFlYSm5hVzQ2SURBN1hHNWNkSFJsZUhRdFlXeHBaMjQ2SUdObGJuUmxjanRjZEZ4dVhIUm9aV2xuYUhRNklERTFKVHRjYm4xY2JpTnRaV3BwWW04Z2V5QmlZV05yWjNKdmRXNWtMV052Ykc5eU9pQWpRMFF5TUVKRk95QjlYRzRqYzJGdWRHRXRjbTlqYTNOaGJHbGhJSHNnWW1GamEyZHliM1Z1WkMxamIyeHZjam9nSTBZNVFUUXpNenNnZlZ4dUkzUnBkSFZzWVhKbGN5MXpjRzl5ZENCN0lHSmhZMnRuY205MWJtUXRZMjlzYjNJNklDTTNPRU00TWtNN0lHWnZiblF0YzJsNlpUb2dNV1Z0T3lCOVhHNGpjMjl1YVdOdkxXcGhjbVJwYmlCN0lHSmhZMnRuY205MWJtUXRZMjlzYjNJNklDTXpPRGxDUXprN0lHWnZiblF0YzJsNlpUb2dNQzQ0WlcwN0lIMWNiaU56YjI1aGJtUnZMV1JwWVhKcGJ5QjdJR0poWTJ0bmNtOTFibVF0WTI5c2IzSTZJQ05DUXpNd01UYzdJSDFjYmx4dUkzVnpkSEpsWVcwZ2UxeHVYSFJBYVc1amJIVmtaU0J6Y0dGdUxXTnZiSFZ0Ym5Nb015QnZaaUF4TWlrN1hHNTlYRzVjYmk1dmJHUXRibVYzY3lBdWRtbGxkM010Wm1sbGJHUXRkR2wwYkdVc0lDTnphRzkzY3lBdWRHVjRkQzFqYjI1MFlXbHVaWElnZTF4dUlDQWdJR0poWTJ0bmNtOTFibVE2SUhKbllpZ3pOeXdnTXpBc0lESTRLVHRjYmlBZ0lDQmlZV05yWjNKdmRXNWtPaUJ5WjJKaEtETTNMQ0F6TUN3Z01qZ3NJREF1T1NrN1hHNGdJQ0FnWm1sc2RHVnlPaUJ3Y205bmFXUTZSRmhKYldGblpWUnlZVzV6Wm05eWJTNU5hV055YjNOdlpuUXVaM0poWkdsbGJuUW9jM1JoY25SRGIyeHZjbk4wY2owalJUVXlOVEZGTVVNc0lHVnVaRU52Ykc5eWMzUnlQU05GTlRJMU1VVXhReWs3WEc0Z0lDQWdMVzF6TFdacGJIUmxjam9nWENKd2NtOW5hV1E2UkZoSmJXRm5aVlJ5WVc1elptOXliUzVOYVdOeWIzTnZablF1WjNKaFpHbGxiblFvYzNSaGNuUkRiMnh2Y25OMGNqMGpSVFV5TlRGRk1VTXNJR1Z1WkVOdmJHOXljM1J5UFNORk5USTFNVVV4UXlsY0lqdGNibjFjYmk1cFpUWXRPQ0F1YjJ4a0xXNWxkM01nTG5acFpYZHpMV1pwWld4a0xYUnBkR3hsTENBdWFXVTJMVGdnSTNOb2IzZHpJQzUwWlhoMExXTnZiblJoYVc1bGNpQjdYRzRnSUNBZ1ltRmphMmR5YjNWdVpEb2dkSEpoYm5Od1lYSmxiblE3WEc1OVhHNHVhV1UySUM1dmJHUXRibVYzY3lBdWRtbGxkM010Wm1sbGJHUXRabWxsYkdRdGFXMWhaMlVnZTF4dUlDQWdJR1pzYjJGME9pQnNaV1owTzF4dWZWeHVYRzRqYzJodmQzTWdMbTkxZEdWeUxXTnZiblJoYVc1bGNpQjdYRzRnSUNBZ1ltOXlaR1Z5TFhKaFpHbDFjem9nTlhCNE8xeHVJQ0FnSUdKdmNtUmxjam9nTVhCNElITnZiR2xrSUdKc1lXTnJPMXh1SUNBZ0lHSnZlQzF6YUdGa2IzYzZJREJ3ZUNBeE1IQjRJREV3Y0hnZ0kyTmpZenRjYm4xY2JpTnphRzkzY3lBdVkyOXVkR0ZwYm1WeUlIdGNiaUFnSUNCMFpYaDBMV0ZzYVdkdU9pQmpaVzUwWlhJN1hHNGdJQ0FnY0c5emFYUnBiMjQ2SUhKbGJHRjBhWFpsTzF4dWZWeHVJM05vYjNkeklDNTBaWGgwTFdOdmJuUmhhVzVsY2lCN1hHNGdJQ0FnY0c5emFYUnBiMjQ2SUdGaWMyOXNkWFJsTzF4dUlDQWdJR0p2ZEhSdmJUb2dNRHRjYmx4MGJHVm1kRG9nTUR0Y2JpQWdJQ0JqYjJ4dmNqb2dkMmhwZEdVN1hHNGdJQ0FnZDJsa2RHZzZJREV3TUNVN1hHNGdJQ0FnWm05dWRDMXphWHBsT2lBeFpXMDdYRzU5WEc0amMyaHZkM01nTG1acFpXeGtMV052Ym5SbGJuUWdlMXh1WEc0dGQyVmlhMmwwTFdadmJuUXRjMjF2YjNSb2FXNW5PaUJoYm5ScFlXeHBZWE5sWkR0Y2JtSnZjbVJsY2kxamIyeHNZWEJ6WlRvZ1kyOXNiR0Z3YzJVN1hHNWpiMnh2Y2pvZ2NtZGlLREkxTlN3Z01qVTFMQ0F5TlRVcE8xeHVaR2x6Y0d4aGVUb2dZbXh2WTJzN1hHNW1iMjUwTFdaaGJXbHNlVG9nSjFSeVpXSjFZMmhsZENCTlV5Y3NJQ2RJWld4MlpYUnBZMkVnVG1WMVpTY3NJRUZ5YVdGc0xDQklaV3gyWlhScFkyRXNJSE5oYm5NdGMyVnlhV1k3WEc1bWIyNTBMWE5wZW1VNklERXpMakF3T0hCNE8xeHVabTl1ZEMxM1pXbG5hSFE2SUdKdmJHUTdYRzVzYVc1bExXaGxhV2RvZERvZ01Ua3VOVEV5Y0hnN1hHNTBaWGgwTFdGc2FXZHVPaUJqWlc1MFpYSTdYRzU2YjI5dE9pQXhPMXh1ZlZ4dVhHNGpjMmh2ZDNNZ2NDQjdYRzRnSUNBZ0x5cHRZWEpuYVc0dGRHOXdPaUF3WlcwN0tpOWNiaUFnSUNBdkttMWhjbWRwYmkxaWIzUjBiMjA2SURCbGJUc3FMMXh1WEc0dGQyVmlhMmwwTFdadmJuUXRjMjF2YjNSb2FXNW5PaUJoYm5ScFlXeHBZWE5sWkR0Y2JtSnZjbVJsY2kxamIyeHNZWEJ6WlRvZ1kyOXNiR0Z3YzJVN1hHNWpiMnh2Y2pvZ2NtZGlLREkxTlN3Z01qVTFMQ0F5TlRVcE8xeHVaR2x6Y0d4aGVUb2dZbXh2WTJzN1hHNW1iMjUwTFdaaGJXbHNlVG9nSjFSeVpXSjFZMmhsZENCTlV5Y3NJQ2RJWld4MlpYUnBZMkVnVG1WMVpTY3NJRUZ5YVdGc0xDQklaV3gyWlhScFkyRXNJSE5oYm5NdGMyVnlhV1k3WEc1bWIyNTBMWE5wZW1VNklERXpMakF3T0hCNE8xeHVhR1ZwWjJoME9pQXhPWEI0TzF4dWJHbHVaUzFvWldsbmFIUTZJREU1TGpVeE1uQjRPMXh1YldGeVoybHVMV0p2ZEhSdmJUb2dNSEI0TzF4dWJXRnlaMmx1TFhSdmNEb2dNSEI0TzF4dWNHRmtaR2x1WnkxaWIzUjBiMjA2SURCd2VEdGNibkJoWkdScGJtY3RiR1ZtZERvZ01IQjRPMXh1Y0dGa1pHbHVaeTF5YVdkb2REb2dNSEI0TzF4dWNHRmtaR2x1WnkxMGIzQTZJREJ3ZUR0Y2JuUmxlSFF0WVd4cFoyNDZJR05sYm5SbGNqdGNibmRwWkhSb09pQXhOakZ3ZUR0Y2JucHZiMjA2SURFN1hHNTlYRzVjYmlOemFHOTNjeUF1ZG1sbGQzTXRabWxsYkdRdFptbGxiR1F0YzJOb1pXUjFiR1VnZTF4dUlDQWdJR1p2Ym5RdGQyVnBaMmgwT2lCaWIyeGtPMXh1ZlZ4dUkzTm9iM2R6SUM1MmFXVjNjeTFtYVdWc1pDMW1hV1ZzWkMxa1lYbHpJSHRjYmlBZ0lDQm1iMjUwTFhkbGFXZG9kRG9nWW05c1pEdGNibjFjYmlOemFHOTNjeUJwYldjZ2UxeHVJQ0FnSUdScGMzQnNZWGs2SUdKc2IyTnJPMXh1ZlZ4dUkzTm9iM2R6SUM1MmFXVjNjeTFtYVdWc1pDMTBhWFJzWlN3Z0kzTm9iM2R6SUM1MmFXVjNjeTFtYVdWc1pDMTBhWFJzWlNCaElIdGNiaUFnSUNCMFpYaDBMV0ZzYVdkdU9pQmpaVzUwWlhJN1hHNGdJQ0FnWm05dWRDMXphWHBsT2lBeExqSmxiVHRjYmlBZ0lDQmpiMnh2Y2pvZ1lteGhZMnM3WEc0Z0lDQWdkR1Y0ZEMxemFHRmtiM2M2SUhKblltRW9NalUxTENBeU5UVXNJREkxTlN3Z01DNDVLU0F3Y0hnZ00zQjRJRE53ZUR0Y2JpQWdJQ0JtYjI1MExYZGxhV2RvZERvZ1ltOXNaR1Z5TzF4dUlDQWdJSFJsZUhRdFpHVmpiM0poZEdsdmJqb2dibTl1WlR0Y2JseHVYRzVjZEMxM1pXSnJhWFF0Wm05dWRDMXpiVzl2ZEdocGJtYzZJR0Z1ZEdsaGJHbGhjMlZrTzF4dVhIUmliM0prWlhJdFkyOXNiR0Z3YzJVNklHTnZiR3hoY0hObE8xeHVYSFJqYjJ4dmNqb2djbWRpS0RBc0lEQXNJREFwTzF4dVhIUmthWE53YkdGNU9pQmliRzlqYXp0Y2JseDBabTl1ZEMxbVlXMXBiSGs2SUNkVWNtVmlkV05vWlhRZ1RWTW5MQ0FuU0dWc2RtVjBhV05oSUU1bGRXVW5MQ0JCY21saGJDd2dTR1ZzZG1WMGFXTmhMQ0J6WVc1ekxYTmxjbWxtTzF4dVhIUm1iMjUwTFhOcGVtVTZJREUxTGpZd09UWndlRHRjYmx4MFptOXVkQzEzWldsbmFIUTZJR0p2YkdRN1hHNWNkR2hsYVdkb2REb2dNak11TkRBMk1uQjRPMXh1WEhSc2FXNWxMV2hsYVdkb2REb2dNak11TkRFME5IQjRPMXh1WEhSMFpYaDBMV0ZzYVdkdU9pQmpaVzUwWlhJN1hHNWNkSFJsZUhRdFpHVmpiM0poZEdsdmJqb2dibTl1WlR0Y2JseDBkR1Y0ZEMxemFHRmtiM2M2SUhKblltRW9NalUxTENBeU5UVXNJREkxTlN3Z01DNDVNREU1TmpFcElEQndlQ0F6Y0hnZ00zQjRPMXh1WEhSNmIyOXRPaUF4TzF4dWZWeHVJM05vYjNkeklDNTJhV1YzY3kxbWFXVnNaQzEwYVhSc1pTQjdYRzRnSUNBZ2FHVnBaMmgwT2lBeExqVmxiVHRjYm4xY2JpTnpiMjVoYm1SdkxXUnBZWEpwYnlCN1hHNGdJQ0FnWW1GamEyZHliM1Z1WkMxamIyeHZjam9nSTBKRk16RXhOenRjYm4xY2JpTnpZVzUwWVMxeWIyTnJjMkZzYVdFZ2UxeHVJQ0FnSUdKaFkydG5jbTkxYm1RdFkyOXNiM0k2SUNOR09VRTBNek03WEc1OVhHNGpjMjkxYm1RdFoyRnlaR1Z1SUh0Y2JpQWdJQ0JpWVdOclozSnZkVzVrTFdOdmJHOXlPaUFqTXpnNVFrTkJPMXh1SUNBZ0lHWnZiblF0YzJsNlpUb2dNQzQ1WlcwN1hHNTlYRzRqZEdsMGRXeGhjbVZ6TFhOd2IzSjBJSHRjYmlBZ0lDQmlZV05yWjNKdmRXNWtMV052Ykc5eU9pQWpOemhET0RKRE8xeHVJQ0FnSUdadmJuUXRjMmw2WlRvZ01TNHhaVzA3WEc1OVhHNGpiV1ZxYVdKdklIdGNiaUFnSUNCaVlXTnJaM0p2ZFc1a0xXTnZiRzl5T2lBalEwVXlNVUpHTzF4dWZWeHVYRzRqYzJsa1pXSmhjaUI3WEc1Y2RFQnBibU5zZFdSbElITndZVzR0WTI5c2RXMXVjeWd6SUc5bUlERXlLVHRjYm4xY2JseHVJaXdLQ1FraUx5OGdMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMxY2JpOHZJRmRvWlc0Z2FHRjJhVzVuSUhObGRtVnlZV3dnZEdobGJXVnpMQ0IwYUdseklHWnBiR1VnWTI5dWRHRnBibk1nWlhabGNubDBhR2x1WnlCeVpXeGhkR1ZrSUhSdklIUm9aVnh1THk4Z1pHVm1ZWFZzZENCdmJtVXVYRzR2THlBdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMVnh1WEc1aWIyUjVJSHRjYmlBZ0lDQm1iMjUwT2lBeE5uQjRMekkyY0hnZ1NHVnNkbVYwYVdOaExDQklaV3gyWlhScFkyRWdUbVYxWlN3Z1FYSnBZV3c3WEc1OVhHNGlMQW9KQ1NKQVkyaGhjbk5sZENCY0lsVlVSaTA0WENJN1hHNWNiaTh2THlCSGJHOWlZV3dnZG1GeWFXRmliR1Z6SUhSdklHVnVZV0pzWlNCdmNpQmthWE5oWW14bElIWmxibVJ2Y2lCd2NtVm1hWGhsYzF4dVhHNGtjSEpsWm1sNExXWnZjaTEzWldKcmFYUTZJQ0FnSUhSeWRXVWdJV1JsWm1GMWJIUTdYRzRrY0hKbFptbDRMV1p2Y2kxdGIzcHBiR3hoT2lBZ0lIUnlkV1VnSVdSbFptRjFiSFE3WEc0a2NISmxabWw0TFdadmNpMXRhV055YjNOdlpuUTZJSFJ5ZFdVZ0lXUmxabUYxYkhRN1hHNGtjSEpsWm1sNExXWnZjaTF2Y0dWeVlUb2dJQ0FnSUhSeWRXVWdJV1JsWm1GMWJIUTdYRzRrY0hKbFptbDRMV1p2Y2kxemNHVmpPaUFnSUNBZ0lIUnlkV1VnSVdSbFptRjFiSFE3WEc0aUxBb0pDU0lrWlcwdFltRnpaVG9nTVRad2VDQWhaR1ZtWVhWc2REdGNiaUlzQ2drSklrQmphR0Z5YzJWMElGd2lWVlJHTFRoY0lqdGNibHh1THk4dklFRWdaMnh2WW1Gc0lITmxkSFJwYm1jZ2RHOGdaVzVoWW14bElHOXlJR1JwYzJGaWJHVWdkR2hsSUdBa1lYTnpaWFF0Y0dsd1pXeHBibVZnSUhaaGNtbGhZbXhsSUdadmNpQmhiR3dnWm5WdVkzUnBiMjV6SUhSb1lYUWdZV05qWlhCMElHbDBMbHh1THk4dlhHNHZMeThnUUhSNWNHVWdRbTl2YkZ4dVhHNGtZWE56WlhRdGNHbHdaV3hwYm1VNklHWmhiSE5sSUNGa1pXWmhkV3gwTzF4dUlpd0tDUWtpUUdaMWJtTjBhVzl1SUdGemMybG5iaTFwYm5CMWRITW9KR2x1Y0hWMGN5d2dKSEJ6WlhWa2J6b2diblZzYkNrZ2UxeHVJQ0FrYkdsemREb2dLQ2s3WEc1Y2JpQWdRR1ZoWTJnZ0pHbHVjSFYwSUdsdUlDUnBibkIxZEhNZ2UxeHVJQ0FnSUNScGJuQjFkRG9nZFc1eGRXOTBaU2drYVc1d2RYUXBPMXh1SUNBZ0lDUnBibkIxZERvZ2FXWW9KSEJ6WlhWa2J5d2dKR2x1Y0hWMElDc2dYQ0k2WENJZ0t5QWtjSE5sZFdSdkxDQWthVzV3ZFhRcE8xeHVJQ0FnSUNSc2FYTjBPaUJoY0hCbGJtUW9KR3hwYzNRc0lDUnBibkIxZEN3Z1kyOXRiV0VwTzF4dUlDQjlYRzVjYmlBZ1FISmxkSFZ5YmlBa2JHbHpkRHRjYm4xY2JpSXNDZ2tKSWtCamFHRnljMlYwSUZ3aVZWUkdMVGhjSWp0Y2JseHVMeTh2SUVOb1pXTnJjeUJwWmlCaElHeHBjM1FnWTI5dWRHRnBibk1nWVNCMllXeDFaU2h6S1M1Y2JpOHZMMXh1THk4dklFQmhZMk5sYzNNZ2NISnBkbUYwWlZ4dUx5OHZYRzR2THk4Z1FIQmhjbUZ0SUh0TWFYTjBmU0FrYkdsemRGeHVMeTh2SUNBZ1ZHaGxJR3hwYzNRZ2RHOGdZMmhsWTJzZ1lXZGhhVzV6ZEM1Y2JpOHZMMXh1THk4dklFQndZWEpoYlNCN1RHbHpkSDBnSkhaaGJIVmxjMXh1THk4dklDQWdRU0J6YVc1bmJHVWdkbUZzZFdVZ2IzSWdiR2x6ZENCdlppQjJZV3gxWlhNZ2RHOGdZMmhsWTJzZ1ptOXlMbHh1THk4dlhHNHZMeThnUUdWNFlXMXdiR1VnYzJOemN5QXRJRlZ6WVdkbFhHNHZMeThnSUNCamIyNTBZV2x1Y3lna2JHbHpkQ3dnSkhaaGJIVmxLVnh1THk4dlhHNHZMeThnUUhKbGRIVnliaUI3UW05dmJIMWNibHh1UUdaMWJtTjBhVzl1SUdOdmJuUmhhVzV6S0NSc2FYTjBMQ0FrZG1Gc2RXVnpMaTR1S1NCN1hHNGdJRUJsWVdOb0lDUjJZV3gxWlNCcGJpQWtkbUZzZFdWeklIdGNiaUFnSUNCQWFXWWdkSGx3WlMxdlppaHBibVJsZUNna2JHbHpkQ3dnSkhaaGJIVmxLU2tnSVQwZ1hDSnVkVzFpWlhKY0lpQjdYRzRnSUNBZ0lDQkFjbVYwZFhKdUlHWmhiSE5sTzF4dUlDQWdJSDFjYmlBZ2ZWeHVYRzRnSUVCeVpYUjFjbTRnZEhKMVpUdGNibjFjYmlJc0Nna0pJa0JqYUdGeWMyVjBJRndpVlZSR0xUaGNJanRjYmx4dUx5OHZJRU5vWldOcmN5QnBaaUJoSUd4cGMzUWdaRzlsY3lCdWIzUWdZMjl1ZEdGcGJuTWdZU0IyWVd4MVpTNWNiaTh2TDF4dUx5OHZJRUJoWTJObGMzTWdjSEpwZG1GMFpWeHVMeTh2WEc0dkx5OGdRSEJoY21GdElIdE1hWE4wZlNBa2JHbHpkRnh1THk4dklDQWdWR2hsSUd4cGMzUWdkRzhnWTJobFkyc2dZV2RoYVc1emRDNWNiaTh2TDF4dUx5OHZJRUJ5WlhSMWNtNGdlMEp2YjJ4OVhHNWNia0JtZFc1amRHbHZiaUJqYjI1MFlXbHVjeTFtWVd4emVTZ2tiR2x6ZENrZ2UxeHVJQ0JBWldGamFDQWthWFJsYlNCcGJpQWtiR2x6ZENCN1hHNGdJQ0FnUUdsbUlHNXZkQ0FrYVhSbGJTQjdYRzRnSUNBZ0lDQkFjbVYwZFhKdUlIUnlkV1U3WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnUUhKbGRIVnliaUJtWVd4elpUdGNibjFjYmlJc0Nna0pJa0JqYUdGeWMyVjBJRndpVlZSR0xUaGNJanRjYmx4dUx5OHZJRU5vWldOcmN5Qm1iM0lnWVNCMllXeHBaQ0JEVTFNZ2JHVnVaM1JvTGx4dUx5OHZYRzR2THk4Z1FIQmhjbUZ0SUh0VGRISnBibWQ5SUNSMllXeDFaVnh1WEc1QVpuVnVZM1JwYjI0Z2FYTXRiR1Z1WjNSb0tDUjJZV3gxWlNrZ2UxeHVJQ0JBY21WMGRYSnVJSFI1Y0dVdGIyWW9KSFpoYkhWbEtTQWhQU0JjSW01MWJHeGNJaUJoYm1RZ0tITjBjaTF6YkdsalpTZ2tkbUZzZFdVZ0t5QmNJbHdpTENBeExDQTBLU0E5UFNCY0ltTmhiR05jSWx4dUlDQWdJQ0FnSUc5eUlHbHVaR1Y0S0dGMWRHOGdhVzVvWlhKcGRDQnBibWwwYVdGc0lEQXNJQ1IyWVd4MVpTbGNiaUFnSUNBZ0lDQnZjaUFvZEhsd1pTMXZaaWdrZG1Gc2RXVXBJRDA5SUZ3aWJuVnRZbVZ5WENJZ1lXNWtJRzV2ZENoMWJtbDBiR1Z6Y3lna2RtRnNkV1VwS1NrcE8xeHVmVnh1SWl3S0NRa2lRR05vWVhKelpYUWdYQ0pWVkVZdE9Gd2lPMXh1WEc0dkx5OGdVSEp2WjNKaGJXRjBhV05oYkd4NUlHUmxkR1Z5YldsdVpYTWdkMmhsZEdobGNpQmhJR052Ykc5eUlHbHpJR3hwWjJoMElHOXlJR1JoY21zdVhHNHZMeTljYmk4dkx5QkFiR2x1YXlCb2RIUndPaTh2Y205aWIzUnpMblJvYjNWbmFIUmliM1F1WTI5dEwyTnNiM05sY2kxc2IyOXJMV052Ykc5eUxXeHBaMmgwYm1WemMxeHVMeTh2WEc0dkx5OGdRSEJoY21GdElIdERiMnh2Y2lBb1NHVjRLWDBnSkdOdmJHOXlYRzR2THk5Y2JpOHZMeUJBWlhoaGJYQnNaU0J6WTNOeklDMGdWWE5oWjJWY2JpOHZMeUFnSUdsekxXeHBaMmgwS0NSamIyeHZjaWxjYmk4dkwxeHVMeTh2SUVCeVpYUjFjbTRnZTBKdmIyeDlYRzVjYmtCbWRXNWpkR2x2YmlCcGN5MXNhV2RvZENna2FHVjRMV052Ykc5eUtTQjdYRzRnSUNRdGJHOWpZV3d0Y21Wa09pQnlaV1FvY21kaVlTZ2thR1Y0TFdOdmJHOXlMQ0F4S1NrN1hHNGdJQ1F0Ykc5allXd3RaM0psWlc0NklHZHlaV1Z1S0hKblltRW9KR2hsZUMxamIyeHZjaXdnTVNrcE8xeHVJQ0FrTFd4dlkyRnNMV0pzZFdVNklHSnNkV1VvY21kaVlTZ2thR1Y0TFdOdmJHOXlMQ0F4S1NrN1hHNGdJQ1F0Ykc5allXd3RiR2xuYUhSdVpYTnpPaUFvSkMxc2IyTmhiQzF5WldRZ0tpQXdMakl4TWpZZ0t5QWtMV3h2WTJGc0xXZHlaV1Z1SUNvZ01DNDNNVFV5SUNzZ0pDMXNiMk5oYkMxaWJIVmxJQ29nTUM0d056SXlLU0F2SURJMU5UdGNibHh1SUNCQWNtVjBkWEp1SUNRdGJHOWpZV3d0YkdsbmFIUnVaWE56SUQ0Z01DNDJPMXh1ZlZ4dUlpd0tDUWtpUUdOb1lYSnpaWFFnWENKVlZFWXRPRndpTzF4dVhHNHZMeThnUTJobFkydHpJR1p2Y2lCaElIWmhiR2xrSUc1MWJXSmxjaTVjYmk4dkwxeHVMeTh2SUVCd1lYSmhiU0I3VG5WdFltVnlmU0FrZG1Gc2RXVmNiaTh2TDF4dUx5OHZJRUJ5WlhGMWFYSmxJSHRtZFc1amRHbHZibjBnWTI5dWRHRnBibk5jYmx4dVFHWjFibU4wYVc5dUlHbHpMVzUxYldKbGNpZ2tkbUZzZFdVcElIdGNiaUFnUUhKbGRIVnliaUJqYjI1MFlXbHVjeWhjSWpCY0lpQmNJakZjSWlCY0lqSmNJaUJjSWpOY0lpQmNJalJjSWlCY0lqVmNJaUJjSWpaY0lpQmNJamRjSWlCY0lqaGNJaUJjSWpsY0lpQXdJREVnTWlBeklEUWdOU0EySURjZ09DQTVMQ0FrZG1Gc2RXVXBPMXh1ZlZ4dUlpd0tDUWtpUUdOb1lYSnpaWFFnWENKVlZFWXRPRndpTzF4dVhHNHZMeThnUTJobFkydHpJR1p2Y2lCaElIWmhiR2xrSUVOVFV5QnphWHBsTGx4dUx5OHZYRzR2THk4Z1FIQmhjbUZ0SUh0VGRISnBibWQ5SUNSMllXeDFaVnh1THk4dlhHNHZMeThnUUhKbGNYVnBjbVVnZTJaMWJtTjBhVzl1ZlNCamIyNTBZV2x1YzF4dUx5OHZJRUJ5WlhGMWFYSmxJSHRtZFc1amRHbHZibjBnYVhNdGJHVnVaM1JvWEc1Y2JrQm1kVzVqZEdsdmJpQnBjeTF6YVhwbEtDUjJZV3gxWlNrZ2UxeHVJQ0JBY21WMGRYSnVJR2x6TFd4bGJtZDBhQ2drZG1Gc2RXVXBYRzRnSUNBZ0lDQWdJQ0FnYjNJZ1kyOXVkR0ZwYm5Nb1hDSm1hV3hzWENJZ1hDSm1hWFF0WTI5dWRHVnVkRndpSUZ3aWJXbHVMV052Ym5SbGJuUmNJaUJjSW0xaGVDMWpiMjUwWlc1MFhDSXNJQ1IyWVd4MVpTazdYRzU5WEc0aUxBb0pDU0l2THlCRGIyNTJaWEowSUhCcGVHVnNjeUIwYnlCbGJYTmNiaTh2SUdWbkxpQm1iM0lnWVNCeVpXeGhkR2x2Ym1Gc0lIWmhiSFZsSUc5bUlERXljSGdnZDNKcGRHVWdaVzBvTVRJcElIZG9aVzRnZEdobElIQmhjbVZ1ZENCcGN5QXhObkI0WEc0dkx5QnBaaUIwYUdVZ2NHRnlaVzUwSUdseklHRnViM1JvWlhJZ2RtRnNkV1VnYzJGNUlESTBjSGdnZDNKcGRHVWdaVzBvTVRJc0lESTBLVnh1WEc1QVpuVnVZM1JwYjI0Z1pXMG9KSEI0ZG1Gc0xDQWtZbUZ6WlRvZ0pHVnRMV0poYzJVcElIdGNiaUFnUUdsbUlHNXZkQ0IxYm1sMGJHVnpjeWdrY0hoMllXd3BJSHRjYmlBZ0lDQWtjSGgyWVd3NklITjBjbWx3TFhWdWFYUnpLQ1J3ZUhaaGJDazdYRzRnSUgxY2JpQWdRR2xtSUc1dmRDQjFibWwwYkdWemN5Z2tZbUZ6WlNrZ2UxeHVJQ0FnSUNSaVlYTmxPaUJ6ZEhKcGNDMTFibWwwY3lna1ltRnpaU2s3WEc0Z0lIMWNiaUFnUUhKbGRIVnliaUFvSkhCNGRtRnNJQzhnSkdKaGMyVXBJQ29nTVdWdE8xeHVmVnh1SWl3S0NRa2lMeThnUTI5dWRtVnlkQ0J3YVhobGJITWdkRzhnY21WdGMxeHVMeThnWldjdUlHWnZjaUJoSUhKbGJHRjBhVzl1WVd3Z2RtRnNkV1VnYjJZZ01USndlQ0IzY21sMFpTQnlaVzBvTVRJcFhHNHZMeUJCYzNOMWJXVnpJQ1JsYlMxaVlYTmxJR2x6SUhSb1pTQm1iMjUwTFhOcGVtVWdiMllnUEdoMGJXdytYRzVjYmtCbWRXNWpkR2x2YmlCeVpXMG9KSEI0ZG1Gc0tTQjdYRzRnSUVCcFppQnViM1FnZFc1cGRHeGxjM01vSkhCNGRtRnNLU0I3WEc0Z0lDQWdKSEI0ZG1Gc09pQnpkSEpwY0MxMWJtbDBjeWdrY0hoMllXd3BPMXh1SUNCOVhHNWNiaUFnSkdKaGMyVTZJQ1JsYlMxaVlYTmxPMXh1SUNCQWFXWWdibTkwSUhWdWFYUnNaWE56S0NSaVlYTmxLU0I3WEc0Z0lDQWdKR0poYzJVNklITjBjbWx3TFhWdWFYUnpLQ1JpWVhObEtUdGNiaUFnZlZ4dUlDQkFjbVYwZFhKdUlDZ2tjSGgyWVd3Z0x5QWtZbUZ6WlNrZ0tpQXhjbVZ0TzF4dWZWeHVJaXdLQ1FraVFHTm9ZWEp6WlhRZ1hDSlZWRVl0T0Z3aU8xeHVYRzR2THk4Z1RXbDRaWE1nWVNCamIyeHZjaUIzYVhSb0lHSnNZV05yTGx4dUx5OHZYRzR2THk4Z1FIQmhjbUZ0SUh0RGIyeHZjbjBnSkdOdmJHOXlYRzR2THk5Y2JpOHZMeUJBY0dGeVlXMGdlMDUxYldKbGNpQW9VR1Z5WTJWdWRHRm5aU2w5SUNSd1pYSmpaVzUwWEc0dkx5OGdJQ0JVYUdVZ1lXMXZkVzUwSUc5bUlHSnNZV05ySUhSdklHSmxJRzFwZUdWa0lHbHVMbHh1THk4dlhHNHZMeThnUUdWNFlXMXdiR1VnYzJOemN5QXRJRlZ6WVdkbFhHNHZMeThnSUNBdVpXeGxiV1Z1ZENCN1hHNHZMeThnSUNBZ0lHSmhZMnRuY205MWJtUXRZMjlzYjNJNklITm9ZV1JsS0NObVptSmlOVElzSURZd0pTazdYRzR2THk4Z0lDQjlYRzR2THk5Y2JpOHZMeUJBWlhoaGJYQnNaU0JqYzNNZ0xTQkRVMU1nVDNWMGNIVjBYRzR2THk4Z0lDQXVaV3hsYldWdWRDQjdYRzR2THk4Z0lDQWdJR0poWTJ0bmNtOTFibVF0WTI5c2IzSTZJQ00yTmpSaE1qQTdYRzR2THk4Z0lDQjlYRzR2THk5Y2JpOHZMeUJBY21WMGRYSnVJSHREYjJ4dmNuMWNibHh1UUdaMWJtTjBhVzl1SUhOb1lXUmxLQ1JqYjJ4dmNpd2dKSEJsY21ObGJuUXBJSHRjYmlBZ1FISmxkSFZ5YmlCdGFYZ29JekF3TUN3Z0pHTnZiRzl5TENBa2NHVnlZMlZ1ZENrN1hHNTlYRzRpTEFvSkNTSkFZMmhoY25ObGRDQmNJbFZVUmkwNFhDSTdYRzVjYmk4dkx5QlRkSEpwY0hNZ2RHaGxJSFZ1YVhRZ1puSnZiU0JoSUc1MWJXSmxjaTVjYmk4dkwxeHVMeTh2SUVCd1lYSmhiU0I3VG5WdFltVnlJQ2hYYVhSb0lGVnVhWFFwZlNBa2RtRnNkV1ZjYmk4dkwxeHVMeTh2SUVCbGVHRnRjR3hsSUhOamMzTWdMU0JWYzJGblpWeHVMeTh2SUNBZ0pHUnBiV1Z1YzJsdmJqb2djM1J5YVhBdGRXNXBkSE1vTVRCbGJTazdYRzR2THk5Y2JpOHZMeUJBWlhoaGJYQnNaU0JqYzNNZ0xTQkRVMU1nVDNWMGNIVjBYRzR2THk4Z0lDQWtaR2x0Wlc1emFXOXVPaUF4TUR0Y2JpOHZMMXh1THk4dklFQnlaWFIxY200Z2UwNTFiV0psY2lBb1ZXNXBkR3hsYzNNcGZWeHVYRzVBWm5WdVkzUnBiMjRnYzNSeWFYQXRkVzVwZEhNb0pIWmhiSFZsS1NCN1hHNGdJRUJ5WlhSMWNtNGdLQ1IyWVd4MVpTQXZJQ2drZG1Gc2RXVWdLaUF3SUNzZ01Ta3BPMXh1ZlZ4dUlpd0tDUWtpUUdOb1lYSnpaWFFnWENKVlZFWXRPRndpTzF4dVhHNHZMeThnVFdsNFpYTWdZU0JqYjJ4dmNpQjNhWFJvSUhkb2FYUmxMbHh1THk4dlhHNHZMeThnUUhCaGNtRnRJSHREYjJ4dmNuMGdKR052Ykc5eVhHNHZMeTljYmk4dkx5QkFjR0Z5WVcwZ2UwNTFiV0psY2lBb1VHVnlZMlZ1ZEdGblpTbDlJQ1J3WlhKalpXNTBYRzR2THk4Z0lDQlVhR1VnWVcxdmRXNTBJRzltSUhkb2FYUmxJSFJ2SUdKbElHMXBlR1ZrSUdsdUxseHVMeTh2WEc0dkx5OGdRR1Y0WVcxd2JHVWdjMk56Y3lBdElGVnpZV2RsWEc0dkx5OGdJQ0F1Wld4bGJXVnVkQ0I3WEc0dkx5OGdJQ0FnSUdKaFkydG5jbTkxYm1RdFkyOXNiM0k2SUhScGJuUW9JelpsWTJGaE5pd2dOREFsS1R0Y2JpOHZMeUFnSUgxY2JpOHZMMXh1THk4dklFQmxlR0Z0Y0d4bElHTnpjeUF0SUVOVFV5QlBkWFJ3ZFhSY2JpOHZMeUFnSUM1bGJHVnRaVzUwSUh0Y2JpOHZMeUFnSUNBZ1ltRmphMmR5YjNWdVpDMWpiMnh2Y2pvZ0kyRTRaR1pqT1R0Y2JpOHZMeUFnSUgxY2JpOHZMMXh1THk4dklFQnlaWFIxY200Z2UwTnZiRzl5ZlZ4dVhHNUFablZ1WTNScGIyNGdkR2x1ZENna1kyOXNiM0lzSUNSd1pYSmpaVzUwS1NCN1hHNGdJRUJ5WlhSMWNtNGdiV2w0S0NObVptWXNJQ1JqYjJ4dmNpd2dKSEJsY21ObGJuUXBPMXh1ZlZ4dUlpd0tDUWtpTHk4Z1VtVjBkWEp1SUhabGJtUnZjaTF3Y21WbWFYaGxaQ0J3Y205d1pYSjBlU0J1WVcxbGN5QnBaaUJoY0hCeWIzQnlhV0YwWlZ4dUx5OGdSWGhoYlhCc1pUb2dkSEpoYm5OcGRHbHZiaTF3Y205d1pYSjBlUzF1WVcxbGN5Z29kSEpoYm5ObWIzSnRMQ0JqYjJ4dmNpd2dZbUZqYTJkeWIzVnVaQ2tzSUcxdmVpa2dMVDRnTFcxdmVpMTBjbUZ1YzJadmNtMHNJR052Ykc5eUxDQmlZV05yWjNKdmRXNWtYRzR2THlvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2k4dlhHNUFablZ1WTNScGIyNGdkSEpoYm5OcGRHbHZiaTF3Y205d1pYSjBlUzF1WVcxbGN5Z2tjSEp2Y0hNc0lDUjJaVzVrYjNJNklHWmhiSE5sS1NCN1hHNGdJQ1J1WlhjdGNISnZjSE02SUNncE8xeHVYRzRnSUVCbFlXTm9JQ1J3Y205d0lHbHVJQ1J3Y205d2N5QjdYRzRnSUNBZ0pHNWxkeTF3Y205d2N6b2dZWEJ3Wlc1a0tDUnVaWGN0Y0hKdmNITXNJSFJ5WVc1emFYUnBiMjR0Y0hKdmNHVnlkSGt0Ym1GdFpTZ2tjSEp2Y0N3Z0pIWmxibVJ2Y2lrc0lHTnZiVzFoS1R0Y2JpQWdmVnh1WEc0Z0lFQnlaWFIxY200Z0pHNWxkeTF3Y205d2N6dGNibjFjYmx4dVFHWjFibU4wYVc5dUlIUnlZVzV6YVhScGIyNHRjSEp2Y0dWeWRIa3RibUZ0WlNna2NISnZjQ3dnSkhabGJtUnZjam9nWm1Gc2MyVXBJSHRjYmlBZ0x5OGdjSFYwSUc5MGFHVnlJSEJ5YjNCbGNuUnBaWE1nZEdoaGRDQnVaV1ZrSUhSdklHSmxJSEJ5WldacGVHVmtJR2hsY21VZ1lYTjNaV3hzWEc0Z0lFQnBaaUFrZG1WdVpHOXlJR0Z1WkNBa2NISnZjQ0E5UFNCMGNtRnVjMlp2Y20wZ2UxeHVJQ0FnSUVCeVpYUjFjbTRnZFc1eGRXOTBaU2duTFNjckpIWmxibVJ2Y2lzbkxTY3JKSEJ5YjNBcE8xeHVJQ0I5WEc0Z0lFQmxiSE5sSUh0Y2JpQWdJQ0JBY21WMGRYSnVJQ1J3Y205d08xeHVJQ0I5WEc1OVhHNGlMQW9KQ1NKQVkyaGhjbk5sZENCY0lsVlVSaTA0WENJN1hHNWNiaTh2THlCRGIyNTJaWEowY3lCemFHOXlkR2hoYm1RZ2RHOGdkR2hsSURRdGRtRnNkV1VnYzNsdWRHRjRMbHh1THk4dlhHNHZMeThnUUhCaGNtRnRJSHRNYVhOMGZTQWtjMmh2Y25Sb1lXNWtYRzR2THk5Y2JpOHZMeUJBWlhoaGJYQnNaU0J6WTNOeklDMGdWWE5oWjJWY2JpOHZMeUFnSUM1bGJHVnRaVzUwSUh0Y2JpOHZMeUFnSUNBZ2JXRnlaMmx1T2lCMWJuQmhZMnNvTVdWdElESmxiU2s3WEc0dkx5OGdJQ0I5WEc0dkx5OWNiaTh2THlCQVpYaGhiWEJzWlNCamMzTWdMU0JEVTFNZ1QzVjBjSFYwWEc0dkx5OGdJQ0F1Wld4bGJXVnVkQ0I3WEc0dkx5OGdJQ0FnSUcxaGNtZHBiam9nTVdWdElESmxiU0F4WlcwZ01tVnRPMXh1THk4dklDQWdmVnh1WEc1QVpuVnVZM1JwYjI0Z2RXNXdZV05yS0NSemFHOXlkR2hoYm1RcElIdGNiaUFnUUdsbUlHeGxibWQwYUNna2MyaHZjblJvWVc1a0tTQTlQU0F4SUh0Y2JpQWdJQ0JBY21WMGRYSnVJRzUwYUNna2MyaHZjblJvWVc1a0xDQXhLU0J1ZEdnb0pITm9iM0owYUdGdVpDd2dNU2tnYm5Sb0tDUnphRzl5ZEdoaGJtUXNJREVwSUc1MGFDZ2tjMmh2Y25Sb1lXNWtMQ0F4S1R0Y2JpQWdmU0JBWld4elpTQnBaaUJzWlc1bmRHZ29KSE5vYjNKMGFHRnVaQ2tnUFQwZ01pQjdYRzRnSUNBZ1FISmxkSFZ5YmlCdWRHZ29KSE5vYjNKMGFHRnVaQ3dnTVNrZ2JuUm9LQ1J6YUc5eWRHaGhibVFzSURJcElHNTBhQ2drYzJodmNuUm9ZVzVrTENBeEtTQnVkR2dvSkhOb2IzSjBhR0Z1WkN3Z01pazdYRzRnSUgwZ1FHVnNjMlVnYVdZZ2JHVnVaM1JvS0NSemFHOXlkR2hoYm1RcElEMDlJRE1nZTF4dUlDQWdJRUJ5WlhSMWNtNGdiblJvS0NSemFHOXlkR2hoYm1Rc0lERXBJRzUwYUNna2MyaHZjblJvWVc1a0xDQXlLU0J1ZEdnb0pITm9iM0owYUdGdVpDd2dNeWtnYm5Sb0tDUnphRzl5ZEdoaGJtUXNJRElwTzF4dUlDQjlJRUJsYkhObElIdGNiaUFnSUNCQWNtVjBkWEp1SUNSemFHOXlkR2hoYm1RN1hHNGdJSDFjYm4xY2JpSXNDZ2tKSWk4dklGTmpZV3hwYm1jZ1ZtRnlhV0ZpYkdWelhHNGtaMjlzWkdWdU9pQWdJQ0FnSUNBZ0lDQWdNUzQyTVRnN1hHNGtiV2x1YjNJdGMyVmpiMjVrT2lBZ0lDQWdNUzR3TmpjN1hHNGtiV0ZxYjNJdGMyVmpiMjVrT2lBZ0lDQWdNUzR4TWpVN1hHNGtiV2x1YjNJdGRHaHBjbVE2SUNBZ0lDQWdNUzR5TzF4dUpHMWhhbTl5TFhSb2FYSmtPaUFnSUNBZ0lERXVNalU3WEc0a2NHVnlabVZqZEMxbWIzVnlkR2c2SUNBZ01TNHpNek03WEc0a1lYVm5iV1Z1ZEdWa0xXWnZkWEowYURvZ01TNDBNVFE3WEc0a2NHVnlabVZqZEMxbWFXWjBhRG9nSUNBZ01TNDFPMXh1SkcxcGJtOXlMWE5wZUhSb09pQWdJQ0FnSURFdU5qdGNiaVJ0WVdwdmNpMXphWGgwYURvZ0lDQWdJQ0F4TGpZMk56dGNiaVJ0YVc1dmNpMXpaWFpsYm5Sb09pQWdJQ0F4TGpjM09EdGNiaVJ0WVdwdmNpMXpaWFpsYm5Sb09pQWdJQ0F4TGpnM05UdGNiaVJ2WTNSaGRtVTZJQ0FnSUNBZ0lDQWdJQ0F5TzF4dUpHMWhhbTl5TFhSbGJuUm9PaUFnSUNBZ0lESXVOVHRjYmlSdFlXcHZjaTFsYkdWMlpXNTBhRG9nSUNBeUxqWTJOenRjYmlSdFlXcHZjaTEwZDJWc1puUm9PaUFnSUNBek8xeHVKR1J2ZFdKc1pTMXZZM1JoZG1VNklDQWdJRFE3WEc1Y2JpUnRiMlIxYkdGeUxYTmpZV3hsTFhKaGRHbHZPaUFrY0dWeVptVmpkQzFtYjNWeWRHZ2dJV1JsWm1GMWJIUTdYRzRrYlc5a2RXeGhjaTF6WTJGc1pTMWlZWE5sT2lCbGJTZ2taVzB0WW1GelpTa2dJV1JsWm1GMWJIUTdYRzVjYmtCbWRXNWpkR2x2YmlCdGIyUjFiR0Z5TFhOallXeGxLQ1JwYm1OeVpXMWxiblFzSUNSMllXeDFaVG9nSkcxdlpIVnNZWEl0YzJOaGJHVXRZbUZ6WlN3Z0pISmhkR2x2T2lBa2JXOWtkV3hoY2kxelkyRnNaUzF5WVhScGJ5a2dlMXh1SUNBa2RqRTZJRzUwYUNna2RtRnNkV1VzSURFcE8xeHVJQ0FrZGpJNklHNTBhQ2drZG1Gc2RXVXNJR3hsYm1kMGFDZ2tkbUZzZFdVcEtUdGNiaUFnSkhaaGJIVmxPaUFrZGpFN1hHNWNiaUFnTHk4Z2MyTmhiR1VnSkhZeUlIUnZJR3AxYzNRZ1lXSnZkbVVnSkhZeFhHNGdJRUIzYUdsc1pTQWtkaklnUGlBa2RqRWdlMXh1SUNBZ0lDUjJNam9nS0NSMk1pQXZJQ1J5WVhScGJ5azdJQzh2SUhkcGJHd2dZbVVnYjJabUxXSjVMVEZjYmlBZ2ZWeHVJQ0JBZDJocGJHVWdKSFl5SUR3Z0pIWXhJSHRjYmlBZ0lDQWtkakk2SUNna2RqSWdLaUFrY21GMGFXOHBPeUF2THlCM2FXeHNJR1pwZUNCdlptWXRZbmt0TVZ4dUlDQjlYRzVjYmlBZ0x5OGdZMmhsWTJzZ1FVWlVSVklnYzJOaGJHbHVaeUFrZGpJZ2RHOGdjSEpsZG1WdWRDQmtiM1ZpYkdVdFkyOTFiblJwYm1jZ1kyOXlibVZ5TFdOaGMyVmNiaUFnSkdSdmRXSnNaUzF6ZEhKaGJtUmxaRG9nSkhZeUlENGdKSFl4TzF4dVhHNGdJRUJwWmlBa2FXNWpjbVZ0Wlc1MElENGdNQ0I3WEc0Z0lDQWdRR1p2Y2lBa2FTQm1jbTl0SURFZ2RHaHliM1ZuYUNBa2FXNWpjbVZ0Wlc1MElIdGNiaUFnSUNBZ0lFQnBaaUFrWkc5MVlteGxMWE4wY21GdVpHVmtJR0Z1WkNBb0pIWXhJQ29nSkhKaGRHbHZLU0ErSUNSMk1pQjdYRzRnSUNBZ0lDQWdJQ1IyWVd4MVpUb2dKSFl5TzF4dUlDQWdJQ0FnSUNBa2RqSTZJQ2drZGpJZ0tpQWtjbUYwYVc4cE8xeHVJQ0FnSUNBZ2ZTQkFaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDUjJNVG9nS0NSMk1TQXFJQ1J5WVhScGJ5azdYRzRnSUNBZ0lDQWdJQ1IyWVd4MVpUb2dKSFl4TzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ2ZWeHVYRzRnSUVCcFppQWthVzVqY21WdFpXNTBJRHdnTUNCN1hHNGdJQ0FnTHk4Z1lXUnFkWE4wSUNSMk1pQjBieUJxZFhOMElHSmxiRzkzSUNSMk1WeHVJQ0FnSUVCcFppQWtaRzkxWW14bExYTjBjbUZ1WkdWa0lIdGNiaUFnSUNBZ0lDUjJNam9nS0NSMk1pQXZJQ1J5WVhScGJ5azdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1FHWnZjaUFrYVNCbWNtOXRJQ1JwYm1OeVpXMWxiblFnZEdoeWIzVm5hQ0F0TVNCN1hHNGdJQ0FnSUNCQWFXWWdKR1J2ZFdKc1pTMXpkSEpoYm1SbFpDQmhibVFnS0NSMk1TQXZJQ1J5WVhScGJ5a2dQQ0FrZGpJZ2UxeHVJQ0FnSUNBZ0lDQWtkbUZzZFdVNklDUjJNanRjYmlBZ0lDQWdJQ0FnSkhZeU9pQW9KSFl5SUM4Z0pISmhkR2x2S1R0Y2JpQWdJQ0FnSUgwZ1FHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBa2RqRTZJQ2drZGpFZ0x5QWtjbUYwYVc4cE8xeHVJQ0FnSUNBZ0lDQWtkbUZzZFdVNklDUjJNVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0JBY21WMGRYSnVJQ1IyWVd4MVpUdGNibjFjYmlJc0Nna0pJaTh2S2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xTHk5Y2JpOHZJRWhsYkhCbGNpQm1kVzVqZEdsdmJpQm1iM0lnYzNSeUxYUnZMVzUxYlNCbWJpNWNiaTh2SUZOdmRYSmpaVG9nYUhSMGNEb3ZMM05oYzNOdFpXbHpkR1Z5TG1OdmJTOW5hWE4wTHprMk5EYzBNRGhjYmk4dktpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUx5OWNia0JtZFc1amRHbHZiaUJmWTI5dWRtVnlkQzExYm1sMGN5Z2tiblZ0WW1WeUxDQWtkVzVwZENrZ2UxeHVJQ0FrYzNSeWFXNW5jem9nWENKd2VGd2lMQ0JjSW1OdFhDSXNJRndpYlcxY0lpd2dYQ0lsWENJc0lGd2lZMmhjSWl3Z1hDSndhV05oWENJc0lGd2lhVzVjSWl3Z1hDSmxiVndpTENCY0luSmxiVndpTENCY0luQjBYQ0lzSUZ3aWNHTmNJaXdnWENKbGVGd2lMQ0JjSW5aM1hDSXNJRndpZG1oY0lpd2dYQ0oyYldsdVhDSXNJRndpZG0xaGVGd2lMQ0JjSW1SbFoxd2lMQ0JjSW5KaFpGd2lMQ0JjSW1keVlXUmNJaXdnWENKMGRYSnVYQ0k3WEc0Z0lDUjFibWwwY3pvZ0lDQXhjSGdzSURGamJTd2dNVzF0TENBeEpTd2dNV05vTENBeGNHbGpZU3dnTVdsdUxDQXhaVzBzSURGeVpXMHNJREZ3ZEN3Z01YQmpMQ0F4Wlhnc0lERjJkeXdnTVhab0xDQXhkbTFwYml3Z01YWnRZWGdzSURGa1pXY3NJREZ5WVdRc0lERm5jbUZrTENBeGRIVnlianRjYmlBZ0pHbHVaR1Y0T2lCcGJtUmxlQ2drYzNSeWFXNW5jeXdnSkhWdWFYUXBPMXh1WEc0Z0lFQnBaaUJ1YjNRZ0pHbHVaR1Y0SUh0Y2JpQWdJQ0JBZDJGeWJpQmNJbFZ1YTI1dmQyNGdkVzVwZENCZ0kzc2tkVzVwZEgxZ0xsd2lPMXh1SUNBZ0lFQnlaWFIxY200Z1ptRnNjMlU3WEc0Z0lIMWNibHh1SUNCQWFXWWdkSGx3WlMxdlppZ2tiblZ0WW1WeUtTQWhQU0JjSW01MWJXSmxjbHdpSUh0Y2JpQWdJQ0JBZDJGeWJpQmNJbUFqZXlSdWRXMWlaWEo5SUdseklHNXZkQ0JoSUc1MWJXSmxjbUJjSWp0Y2JpQWdJQ0JBY21WMGRYSnVJR1poYkhObE8xeHVJQ0I5WEc1Y2JpQWdRSEpsZEhWeWJpQWtiblZ0WW1WeUlDb2diblJvS0NSMWJtbDBjeXdnSkdsdVpHVjRLVHRjYm4xY2JpSXNDZ2tKSWtCamFHRnljMlYwSUZ3aVZWUkdMVGhjSWp0Y2JseHVMeTh2SUVScGNtVmpkR2x2Ym1Gc0xYQnliM0JsY25SNUlHMXBlR2x1Y3lCaGNtVWdjMmh2Y25Sb1lXNWtjeUJtYjNJZ2QzSnBkR2x1WnlCd2NtOXdaWEowYVdWeklHeHBhMlVnZEdobElHWnZiR3h2ZDJsdVoxeHVMeTh2WEc0dkx5OGdRR2xuYm05eVpTQlpiM1VnWTJGdUlHRnNjMjhnZFhObElHQm1ZV3h6WldBZ2FXNXpkR1ZoWkNCdlppQmdiblZzYkdBdVhHNHZMeTljYmk4dkx5QkFjR0Z5WVcwZ2UweHBjM1I5SUNSMllXeHpYRzR2THk4Z0lDQk1hWE4wSUc5bUlHUnBjbVZqZEdsdmJtRnNJSFpoYkhWbGMxeHVMeTh2WEc0dkx5OGdRR1Y0WVcxd2JHVWdjMk56Y3lBdElGVnpZV2RsWEc0dkx5OGdJQ0F1Wld4bGJXVnVkQ0I3WEc0dkx5OGdJQ0FnSUVCcGJtTnNkV1JsSUdKdmNtUmxjaTF6ZEhsc1pTaGtiM1IwWldRZ2JuVnNiQ2s3WEc0dkx5OGdJQ0FnSUVCcGJtTnNkV1JsSUcxaGNtZHBiaWh1ZFd4c0lEQWdNVEJ3ZUNrN1hHNHZMeThnSUNCOVhHNHZMeTljYmk4dkx5QkFaWGhoYlhCc1pTQmpjM01nTFNCRFUxTWdUM1YwY0hWMFhHNHZMeThnSUNBdVpXeGxiV1Z1ZENCN1hHNHZMeThnSUNBZ0lHSnZjbVJsY2kxaWIzUjBiMjB0YzNSNWJHVTZJR1J2ZEhSbFpEdGNiaTh2THlBZ0lDQWdZbTl5WkdWeUxYUnZjQzF6ZEhsc1pUb2daRzkwZEdWa08xeHVMeTh2SUNBZ0lDQnRZWEpuYVc0dFltOTBkRzl0T2lBeE1IQjRPMXh1THk4dklDQWdJQ0J0WVhKbmFXNHRiR1ZtZERvZ01EdGNiaTh2THlBZ0lDQWdiV0Z5WjJsdUxYSnBaMmgwT2lBd08xeHVMeTh2SUNBZ2ZWeHVMeTh2WEc0dkx5OGdRSEpsY1hWcGNtVWdlMloxYm1OMGFXOXVmU0JqYjI1MFlXbHVjeTFtWVd4emVWeHVMeTh2WEc0dkx5OGdRSEpsZEhWeWJpQjdUR2x6ZEgxY2JseHVRR1oxYm1OMGFXOXVJR052Ykd4aGNITmxMV1JwY21WamRHbHZibUZzY3lna2RtRnNjeWtnZTF4dUlDQWtiM1YwY0hWME9pQnVkV3hzTzF4dVhHNGdJQ1JoT2lCdWRHZ29KSFpoYkhNc0lERXBPMXh1SUNBa1lqb2dhV1lvYkdWdVozUm9LQ1IyWVd4ektTQThJRElzSUNSaExDQnVkR2dvSkhaaGJITXNJRElwS1R0Y2JpQWdKR002SUdsbUtHeGxibWQwYUNna2RtRnNjeWtnUENBekxDQWtZU3dnYm5Sb0tDUjJZV3h6TENBektTazdYRzRnSUNSa09pQnBaaWhzWlc1bmRHZ29KSFpoYkhNcElEd2dNaXdnSkdFc0lHNTBhQ2drZG1Gc2N5d2dhV1lvYkdWdVozUm9LQ1IyWVd4ektTQThJRFFzSURJc0lEUXBLU2s3WEc1Y2JpQWdRR2xtSUNSaElEMDlJREFnZXlBa1lUb2dNRHNnZlZ4dUlDQkFhV1lnSkdJZ1BUMGdNQ0I3SUNSaU9pQXdPeUI5WEc0Z0lFQnBaaUFrWXlBOVBTQXdJSHNnSkdNNklEQTdJSDFjYmlBZ1FHbG1JQ1JrSUQwOUlEQWdleUFrWkRvZ01Ec2dmVnh1WEc0Z0lFQnBaaUFrWVNBOVBTQWtZaUJoYm1RZ0pHRWdQVDBnSkdNZ1lXNWtJQ1JoSUQwOUlDUmtJSHNnSkc5MWRIQjFkRG9nSkdFN0lDQWdJQ0FnSUNBZ0lIMWNiaUFnUUdWc2MyVWdhV1lnSkdFZ1BUMGdKR01nWVc1a0lDUmlJRDA5SUNSa0lDQWdJQ0FnSUNBZ2V5QWtiM1YwY0hWME9pQWtZU0FrWWpzZ0lDQWdJQ0FnZlZ4dUlDQkFaV3h6WlNCcFppQWtZaUE5UFNBa1pDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I3SUNSdmRYUndkWFE2SUNSaElDUmlJQ1JqT3lBZ0lDQjlYRzRnSUVCbGJITmxJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIc2dKRzkxZEhCMWREb2dKR0VnSkdJZ0pHTWdKR1E3SUgxY2JseHVJQ0JBY21WMGRYSnVJQ1J2ZFhSd2RYUTdYRzU5WEc1Y2JpOHZMeUJQZFhSd2RYUWdaR2x5WldOMGFXOXVZV3dnY0hKdmNHVnlkR2xsY3l3Z1ptOXlJR2x1YzNSaGJtTmxJR0J0WVhKbmFXNWdMbHh1THk4dlhHNHZMeThnUUdGalkyVnpjeUJ3Y21sMllYUmxYRzR2THk5Y2JpOHZMeUJBY0dGeVlXMGdlMU4wY21sdVozMGdKSEJ5WlZ4dUx5OHZJQ0FnVUhKbFptbDRJSFJ2SUhWelpWeHVMeTh2SUVCd1lYSmhiU0I3VTNSeWFXNW5mU0FrYzNWbVhHNHZMeThnSUNCVGRXWm1hWGdnZEc4Z2RYTmxYRzR2THk4Z1FIQmhjbUZ0SUh0TWFYTjBmU0FrZG1Gc2MxeHVMeTh2SUNBZ1RHbHpkQ0J2WmlCMllXeDFaWE5jYmk4dkwxeHVMeTh2SUVCeVpYRjFhWEpsSUh0bWRXNWpkR2x2Ym4wZ1kyOXNiR0Z3YzJVdFpHbHlaV04wYVc5dVlXeHpYRzR2THk4Z1FISmxjWFZwY21VZ2UyWjFibU4wYVc5dWZTQmpiMjUwWVdsdWN5MW1ZV3h6ZVZ4dVhHNUFiV2w0YVc0Z1pHbHlaV04wYVc5dVlXd3RjSEp2Y0dWeWRIa29KSEJ5WlN3Z0pITjFaaXdnSkhaaGJITXBJSHRjYmlBZ0x5OGdVSEp2Y0dWeWRIa2dUbUZ0WlhOY2JpQWdKSFJ2Y0RvZ0lDQWdKSEJ5WlNBcklGd2lMWFJ2Y0Z3aUlDQWdJQ3NnYVdZb0pITjFaaXdnWENJdEkzc2tjM1ZtZlZ3aUxDQmNJbHdpS1R0Y2JpQWdKR0p2ZEhSdmJUb2dKSEJ5WlNBcklGd2lMV0p2ZEhSdmJWd2lJQ3NnYVdZb0pITjFaaXdnWENJdEkzc2tjM1ZtZlZ3aUxDQmNJbHdpS1R0Y2JpQWdKR3hsWm5RNklDQWdKSEJ5WlNBcklGd2lMV3hsWm5SY0lpQWdJQ3NnYVdZb0pITjFaaXdnWENJdEkzc2tjM1ZtZlZ3aUxDQmNJbHdpS1R0Y2JpQWdKSEpwWjJoME9pQWdKSEJ5WlNBcklGd2lMWEpwWjJoMFhDSWdJQ3NnYVdZb0pITjFaaXdnWENJdEkzc2tjM1ZtZlZ3aUxDQmNJbHdpS1R0Y2JpQWdKR0ZzYkRvZ0lDQWdKSEJ5WlNBcklDQWdJQ0FnSUNBZ0lDQWdJR2xtS0NSemRXWXNJRndpTFNON0pITjFabjFjSWl3Z1hDSmNJaWs3WEc1Y2JpQWdKSFpoYkhNNklHTnZiR3hoY0hObExXUnBjbVZqZEdsdmJtRnNjeWdrZG1Gc2N5azdYRzVjYmlBZ1FHbG1JR052Ym5SaGFXNXpMV1poYkhONUtDUjJZV3h6S1NCN1hHNGdJQ0FnUUdsbUlHNTBhQ2drZG1Gc2N5d2dNU2tnZXlBamV5UjBiM0I5T2lCdWRHZ29KSFpoYkhNc0lERXBPeUI5WEc1Y2JpQWdJQ0JBYVdZZ2JHVnVaM1JvS0NSMllXeHpLU0E5UFNBeElIdGNiaUFnSUNBZ0lFQnBaaUJ1ZEdnb0pIWmhiSE1zSURFcElIc2dJM3NrY21sbmFIUjlPaUJ1ZEdnb0pIWmhiSE1zSURFcE95QjlYRzRnSUNBZ2ZTQkFaV3h6WlNCN1hHNGdJQ0FnSUNCQWFXWWdiblJvS0NSMllXeHpMQ0F5S1NCN0lDTjdKSEpwWjJoMGZUb2diblJvS0NSMllXeHpMQ0F5S1RzZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUVCcFppQnNaVzVuZEdnb0pIWmhiSE1wSUQwOUlESWdlMXh1SUNBZ0lDQWdRR2xtSUc1MGFDZ2tkbUZzY3l3Z01Ta2dleUFqZXlSaWIzUjBiMjE5T2lCdWRHZ29KSFpoYkhNc0lERXBPeUI5WEc0Z0lDQWdJQ0JBYVdZZ2JuUm9LQ1IyWVd4ekxDQXlLU0I3SUNON0pHeGxablI5T2lBZ0lHNTBhQ2drZG1Gc2N5d2dNaWs3SUgxY2JpQWdJQ0I5SUVCbGJITmxJR2xtSUd4bGJtZDBhQ2drZG1Gc2N5a2dQVDBnTXlCN1hHNGdJQ0FnSUNCQWFXWWdiblJvS0NSMllXeHpMQ0F6S1NCN0lDTjdKR0p2ZEhSdmJYMDZJRzUwYUNna2RtRnNjeXdnTXlrN0lIMWNiaUFnSUNBZ0lFQnBaaUJ1ZEdnb0pIWmhiSE1zSURJcElIc2dJM3NrYkdWbWRIMDZJQ0FnYm5Sb0tDUjJZV3h6TENBeUtUc2dmVnh1SUNBZ0lIMGdRR1ZzYzJVZ2FXWWdiR1Z1WjNSb0tDUjJZV3h6S1NBOVBTQTBJSHRjYmlBZ0lDQWdJRUJwWmlCdWRHZ29KSFpoYkhNc0lETXBJSHNnSTNza1ltOTBkRzl0ZlRvZ2JuUm9LQ1IyWVd4ekxDQXpLVHNnZlZ4dUlDQWdJQ0FnUUdsbUlHNTBhQ2drZG1Gc2N5d2dOQ2tnZXlBamV5UnNaV1owZlRvZ0lDQnVkR2dvSkhaaGJITXNJRFFwT3lCOVhHNGdJQ0FnZlZ4dUlDQjlJRUJsYkhObElIdGNiaUFnSUNBamV5UmhiR3g5T2lBa2RtRnNjenRjYmlBZ2ZWeHVmVnh1SWl3S0NRa2lMeThnVlhObFpDQm1iM0lnWTNKbFlYUnBibWNnZEdobElITnZkWEpqWlNCemRISnBibWNnWm05eUlHWnZiblJ6SUhWemFXNW5JRUJtYjI1MExXWmhZMlZjYmk4dklGSmxabVZ5Wlc1alpUb2dhSFIwY0RvdkwyZHZieTVuYkM5U2RURmlTMUJjYmx4dVFHWjFibU4wYVc5dUlHWnZiblF0ZFhKc0xYQnlaV1pwZUdWeUtDUmhjM05sZEMxd2FYQmxiR2x1WlNrZ2UxeHVJQ0JBYVdZZ0pHRnpjMlYwTFhCcGNHVnNhVzVsSUQwOUlIUnlkV1VnZTF4dUlDQWdJRUJ5WlhSMWNtNGdabTl1ZEMxMWNtdzdYRzRnSUgwZ1FHVnNjMlVnZTF4dUlDQWdJRUJ5WlhSMWNtNGdkWEpzTzF4dUlDQjlYRzU5WEc1Y2JrQm1kVzVqZEdsdmJpQm1iMjUwTFhOdmRYSmpaUzFrWldOc1lYSmhkR2x2YmloY2JpQWdKR1p2Ym5RdFptRnRhV3g1TEZ4dUlDQWtabWxzWlMxd1lYUm9MRnh1SUNBa1lYTnpaWFF0Y0dsd1pXeHBibVVzWEc0Z0lDUm1hV3hsTFdadmNtMWhkSE1zWEc0Z0lDUm1iMjUwTFhWeWJDa2dlMXh1WEc0Z0lDUnpjbU02SUNncE8xeHVYRzRnSUNSbWIzSnRZWFJ6TFcxaGNEb2dLRnh1SUNBZ0lHVnZkRG9nSUNCY0lpTjdKR1pwYkdVdGNHRjBhSDB1Wlc5MFB5TnBaV1pwZUZ3aUlHWnZjbTFoZENoY0ltVnRZbVZrWkdWa0xXOXdaVzUwZVhCbFhDSXBMRnh1SUNBZ0lIZHZabVl5T2lCY0lpTjdKR1pwYkdVdGNHRjBhSDB1ZDI5bVpqSmNJaUJtYjNKdFlYUW9YQ0ozYjJabU1sd2lLU3hjYmlBZ0lDQjNiMlptT2lBZ1hDSWpleVJtYVd4bExYQmhkR2g5TG5kdlptWmNJaUJtYjNKdFlYUW9YQ0ozYjJabVhDSXBMRnh1SUNBZ0lIUjBaam9nSUNCY0lpTjdKR1pwYkdVdGNHRjBhSDB1ZEhSbVhDSWdabTl5YldGMEtGd2lkSEoxWlhSNWNHVmNJaWtzWEc0Z0lDQWdjM1puT2lBZ0lGd2lJM3NrWm1sc1pTMXdZWFJvZlM1emRtY2pJM3NrWm05dWRDMW1ZVzFwYkhsOVhDSWdabTl5YldGMEtGd2ljM1puWENJcFhHNGdJQ2s3WEc1Y2JpQWdRR1ZoWTJnZ0pHdGxlU3dnSkhaaGJIVmxjeUJwYmlBa1ptOXliV0YwY3kxdFlYQWdlMXh1SUNBZ0lFQnBaaUJqYjI1MFlXbHVjeWdrWm1sc1pTMW1iM0p0WVhSekxDQWthMlY1S1NCN1hHNGdJQ0FnSUNBa1ptbHNaUzF3WVhSb09pQnVkR2dvSkhaaGJIVmxjeXdnTVNrN1hHNGdJQ0FnSUNBa1ptOXVkQzFtYjNKdFlYUTZJRzUwYUNna2RtRnNkV1Z6TENBeUtUdGNibHh1SUNBZ0lDQWdRR2xtSUNSaGMzTmxkQzF3YVhCbGJHbHVaU0E5UFNCMGNuVmxJSHRjYmlBZ0lDQWdJQ0FnSkhOeVl6b2dZWEJ3Wlc1a0tDUnpjbU1zSUdadmJuUXRkWEpzS0NSbWFXeGxMWEJoZEdncElDUm1iMjUwTFdadmNtMWhkQ3dnWTI5dGJXRXBPMXh1SUNBZ0lDQWdmU0JBWld4elpTQjdYRzRnSUNBZ0lDQWdJQ1J6Y21NNklHRndjR1Z1WkNna2MzSmpMQ0IxY213b0pHWnBiR1V0Y0dGMGFDa2dKR1p2Ym5RdFptOXliV0YwTENCamIyMXRZU2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnUUhKbGRIVnliaUFrYzNKak8xeHVmVnh1SWl3S0NRa2lRR1oxYm1OMGFXOXVJRjluY21Ga2FXVnVkQzF3YjNOcGRHbHZibk10Y0dGeWMyVnlLQ1JuY21Ga2FXVnVkQzEwZVhCbExDQWtaM0poWkdsbGJuUXRjRzl6YVhScGIyNXpLU0I3WEc0Z0lFQnBaaUFrWjNKaFpHbGxiblF0Y0c5emFYUnBiMjV6WEc0Z0lHRnVaQ0FvSkdkeVlXUnBaVzUwTFhSNWNHVWdQVDBnYkdsdVpXRnlLVnh1SUNCaGJtUWdLSFI1Y0dVdGIyWW9KR2R5WVdScFpXNTBMWEJ2YzJsMGFXOXVjeWtnSVQwZ1kyOXNiM0lwSUh0Y2JpQWdJQ0FrWjNKaFpHbGxiblF0Y0c5emFYUnBiMjV6T2lCZmJHbHVaV0Z5TFhCdmMybDBhVzl1Y3kxd1lYSnpaWElvSkdkeVlXUnBaVzUwTFhCdmMybDBhVzl1Y3lrN1hHNGdJSDFjYmlBZ1FHVnNjMlVnYVdZZ0pHZHlZV1JwWlc1MExYQnZjMmwwYVc5dWMxeHVJQ0JoYm1RZ0tDUm5jbUZrYVdWdWRDMTBlWEJsSUQwOUlISmhaR2xoYkNsY2JpQWdZVzVrSUNoMGVYQmxMVzltS0NSbmNtRmthV1Z1ZEMxd2IzTnBkR2x2Ym5NcElDRTlJR052Ykc5eUtTQjdYRzRnSUNBZ0pHZHlZV1JwWlc1MExYQnZjMmwwYVc5dWN6b2dYM0poWkdsaGJDMXdiM05wZEdsdmJuTXRjR0Z5YzJWeUtDUm5jbUZrYVdWdWRDMXdiM05wZEdsdmJuTXBPMXh1SUNCOVhHNGdJRUJ5WlhSMWNtNGdKR2R5WVdScFpXNTBMWEJ2YzJsMGFXOXVjenRjYm4xY2JpSXNDZ2tKSWk4dklGQnlhWFpoZEdVZ1puVnVZM1JwYjI0Z1ptOXlJR3hwYm1WaGNpMW5jbUZrYVdWdWRDMXdZWEp6WlhKY2JrQm1kVzVqZEdsdmJpQmZiR2x1WldGeUxXRnVaMnhsTFhCaGNuTmxjaWdrYVcxaFoyVXNJQ1JtYVhKemRDMTJZV3dzSUNSd2NtVm1hWGdzSUNSemRXWm1hWGdwSUh0Y2JpQWdKRzltWm5ObGREb2diblZzYkR0Y2JpQWdKSFZ1YVhRdGMyaHZjblE2SUNCemRISXRjMnhwWTJVb0pHWnBjbk4wTFhaaGJDd2djM1J5TFd4bGJtZDBhQ2drWm1seWMzUXRkbUZzS1NBdElESXNJSE4wY2kxc1pXNW5kR2dvSkdacGNuTjBMWFpoYkNrcE8xeHVJQ0FrZFc1cGRDMXNiMjVuT2lBZ0lITjBjaTF6YkdsalpTZ2tabWx5YzNRdGRtRnNMQ0J6ZEhJdGJHVnVaM1JvS0NSbWFYSnpkQzEyWVd3cElDMGdNeXdnYzNSeUxXeGxibWQwYUNna1ptbHljM1F0ZG1Gc0tTazdYRzVjYmlBZ1FHbG1JQ2drZFc1cGRDMXNiMjVuSUQwOUlGd2laM0poWkZ3aUtTQnZjbHh1SUNBZ0lDQWdLQ1IxYm1sMExXeHZibWNnUFQwZ1hDSjBkWEp1WENJcElIdGNiaUFnSUNBa2IyWm1jMlYwT2lCcFppZ2tkVzVwZEMxc2IyNW5JRDA5SUZ3aVozSmhaRndpTENBdE1UQXdaM0poWkNBcUlETXNJQzB3TGpjMWRIVnliaWs3WEc0Z0lIMWNibHh1SUNCQVpXeHpaU0JwWmlBb0pIVnVhWFF0YzJodmNuUWdQVDBnWENKa1pXZGNJaWtnYjNKY2JpQWdJQ0FnSUNBZ0lDQWdLQ1IxYm1sMExYTm9iM0owSUQwOUlGd2ljbUZrWENJcElIdGNiaUFnSUNBa2IyWm1jMlYwT2lCcFppZ2tkVzVwZEMxemFHOXlkQ0E5UFNCY0ltUmxaMXdpTENBdE9UQWdLaUF6TENBeExqWnlZV1FwTzF4dUlDQjlYRzVjYmlBZ1FHbG1JQ1J2Wm1aelpYUWdlMXh1SUNBZ0lDUnVkVzA2SUY5emRISXRkRzh0Ym5WdEtDUm1hWEp6ZEMxMllXd3BPMXh1WEc0Z0lDQWdRSEpsZEhWeWJpQW9YRzRnSUNBZ0lDQjNaV0pyYVhRdGFXMWhaMlU2SUMxM1pXSnJhWFF0SUNzZ0pIQnlaV1pwZUNBcklDZ2tiMlptYzJWMElDMGdKRzUxYlNrZ0t5QWtjM1ZtWm1sNExGeHVJQ0FnSUNBZ2MzQmxZeTFwYldGblpUb2dKR2x0WVdkbFhHNGdJQ0FnS1R0Y2JpQWdmVnh1ZlZ4dUlpd0tDUWtpUUdaMWJtTjBhVzl1SUY5c2FXNWxZWEl0WjNKaFpHbGxiblF0Y0dGeWMyVnlLQ1JwYldGblpTa2dlMXh1SUNBa2FXMWhaMlU2SUhWdWNYVnZkR1VvSkdsdFlXZGxLVHRjYmlBZ0pHZHlZV1JwWlc1MGN6b2dLQ2s3WEc0Z0lDUnpkR0Z5ZERvZ2MzUnlMV2x1WkdWNEtDUnBiV0ZuWlN3Z1hDSW9YQ0lwTzF4dUlDQWtaVzVrT2lCemRISXRhVzVrWlhnb0pHbHRZV2RsTENCY0lpeGNJaWs3WEc0Z0lDUm1hWEp6ZEMxMllXdzZJSE4wY2kxemJHbGpaU2drYVcxaFoyVXNJQ1J6ZEdGeWRDQXJJREVzSUNSbGJtUWdMU0F4S1R0Y2JseHVJQ0FrY0hKbFptbDRPaUJ6ZEhJdGMyeHBZMlVvSkdsdFlXZGxMQ0F4TENBa2MzUmhjblFwTzF4dUlDQWtjM1ZtWm1sNE9pQnpkSEl0YzJ4cFkyVW9KR2x0WVdkbExDQWtaVzVrTENCemRISXRiR1Z1WjNSb0tDUnBiV0ZuWlNrcE8xeHVYRzRnSUNSb1lYTXRiWFZzZEdsd2JHVXRkbUZzY3pvZ2MzUnlMV2x1WkdWNEtDUm1hWEp6ZEMxMllXd3NJRndpSUZ3aUtUdGNiaUFnSkdoaGN5MXphVzVuYkdVdGNHOXphWFJwYjI0NklIVnVjWFZ2ZEdVb1gzQnZjMmwwYVc5dUxXWnNhWEJ3WlhJb0pHWnBjbk4wTFhaaGJDa2dLeUJjSWx3aUtUdGNiaUFnSkdoaGN5MWhibWRzWlRvZ2FYTXRiblZ0WW1WeUtITjBjaTF6YkdsalpTZ2tabWx5YzNRdGRtRnNMQ0F4TENBeEtTazdYRzVjYmlBZ1FHbG1JQ1JvWVhNdGJYVnNkR2x3YkdVdGRtRnNjeUI3WEc0Z0lDQWdKR2R5WVdScFpXNTBjem9nWDJ4cGJtVmhjaTF6YVdSbExXTnZjbTVsY2kxd1lYSnpaWElvSkdsdFlXZGxMQ0FrWm1seWMzUXRkbUZzTENBa2NISmxabWw0TENBa2MzVm1abWw0TENBa2FHRnpMVzExYkhScGNHeGxMWFpoYkhNcE8xeHVJQ0I5WEc1Y2JpQWdRR1ZzYzJVZ2FXWWdKR2hoY3kxemFXNW5iR1V0Y0c5emFYUnBiMjRnSVQwZ1hDSmNJaUI3WEc0Z0lDQWdKSEJ2Y3pvZ2RXNXhkVzkwWlNna2FHRnpMWE5wYm1kc1pTMXdiM05wZEdsdmJpQXJJRndpWENJcE8xeHVYRzRnSUNBZ0pHZHlZV1JwWlc1MGN6b2dLRnh1SUNBZ0lDQWdkMlZpYTJsMExXbHRZV2RsT2lBdGQyVmlhMmwwTFNBcklDUnBiV0ZuWlN4Y2JpQWdJQ0FnSUhOd1pXTXRhVzFoWjJVNklDUndjbVZtYVhnZ0t5QmNJblJ2SUZ3aUlDc2dKSEJ2Y3lBcklDUnpkV1ptYVhoY2JpQWdJQ0FwTzF4dUlDQjlYRzVjYmlBZ1FHVnNjMlVnYVdZZ0pHaGhjeTFoYm1kc1pTQjdYRzRnSUNBZ0x5OGdVbTkwWVhSbElHUmxaM0psWlNCbWIzSWdkMlZpYTJsMFhHNGdJQ0FnSkdkeVlXUnBaVzUwY3pvZ1gyeHBibVZoY2kxaGJtZHNaUzF3WVhKelpYSW9KR2x0WVdkbExDQWtabWx5YzNRdGRtRnNMQ0FrY0hKbFptbDRMQ0FrYzNWbVptbDRLVHRjYmlBZ2ZWeHVYRzRnSUVCbGJITmxJSHRjYmlBZ0lDQWtaM0poWkdsbGJuUnpPaUFvWEc0Z0lDQWdJQ0IzWldKcmFYUXRhVzFoWjJVNklDMTNaV0pyYVhRdElDc2dKR2x0WVdkbExGeHVJQ0FnSUNBZ2MzQmxZeTFwYldGblpUb2dKR2x0WVdkbFhHNGdJQ0FnS1R0Y2JpQWdmVnh1WEc0Z0lFQnlaWFIxY200Z0pHZHlZV1JwWlc1MGN6dGNibjFjYmlJc0Nna0pJa0JtZFc1amRHbHZiaUJmYkdsdVpXRnlMWEJ2YzJsMGFXOXVjeTF3WVhKelpYSW9KSEJ2Y3lrZ2UxeHVJQ0FrZEhsd1pUb2dkSGx3WlMxdlppaHVkR2dvSkhCdmN5d2dNU2twTzF4dUlDQWtjM0JsWXpvZ2JuVnNiRHRjYmlBZ0pHUmxaM0psWlRvZ2JuVnNiRHRjYmlBZ0pITnBaR1U2SUc1MWJHdzdYRzRnSUNSamIzSnVaWEk2SUc1MWJHdzdYRzRnSUNSc1pXNW5kR2c2SUd4bGJtZDBhQ2drY0c5ektUdGNiaUFnTHk4Z1VHRnljMlVnVTJsa1pTQmhibVFnWTI5eWJtVnlJSEJ2YzJsMGFXOXVjMXh1SUNCQWFXWWdLQ1JzWlc1bmRHZ2dQaUF4S1NCN1hHNGdJQ0FnUUdsbUlHNTBhQ2drY0c5ekxDQXhLU0E5UFNCY0luUnZYQ0lnZXlBdkx5Qk9aWGRsY2lCemVXNTBZWGhjYmlBZ0lDQWdJQ1J6YVdSbE9pQnVkR2dvSkhCdmN5d2dNaWs3WEc1Y2JpQWdJQ0FnSUVCcFppQWtiR1Z1WjNSb0lEMDlJRElnZXlBdkx5QmxaeTRnZEc4Z2RHOXdYRzRnSUNBZ0lDQWdJQzh2SUZOM1lYQWdabTl5SUdKaFkydDNZWEprY3lCamIyMXdZWFJoWW1sc2FYUjVYRzRnSUNBZ0lDQWdJQ1JrWldkeVpXVTZJRjl3YjNOcGRHbHZiaTFtYkdsd2NHVnlLRzUwYUNna2NHOXpMQ0F5S1NrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCQVpXeHpaU0JwWmlBa2JHVnVaM1JvSUQwOUlETWdleUF2THlCbFp5NGdkRzhnZEc5d0lHeGxablJjYmlBZ0lDQWdJQ0FnSkdOdmNtNWxjam9nYm5Sb0tDUndiM01zSURNcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdJQ0JBWld4elpTQnBaaUFrYkdWdVozUm9JRDA5SURJZ2V5QXZMeUJQYkdSbGNpQnplVzUwWVhnZ0tGd2lkRzl3SUd4bFpuUmNJaWxjYmlBZ0lDQWdJQ1J6YVdSbE9pQmZjRzl6YVhScGIyNHRabXhwY0hCbGNpaHVkR2dvSkhCdmN5d2dNU2twTzF4dUlDQWdJQ0FnSkdOdmNtNWxjam9nWDNCdmMybDBhVzl1TFdac2FYQndaWElvYm5Sb0tDUndiM01zSURJcEtUdGNiaUFnSUNCOVhHNWNiaUFnSUNCQWFXWWdLRndpSTNza2MybGtaWDBnSTNza1kyOXlibVZ5ZlZ3aUlEMDlJRndpYkdWbWRDQjBiM0JjSWlrZ2IzSWdLRndpSTNza2MybGtaWDBnSTNza1kyOXlibVZ5ZlZ3aUlEMDlJRndpZEc5d0lHeGxablJjSWlrZ2UxeHVJQ0FnSUNBZ0pHUmxaM0psWlRvZ1gzQnZjMmwwYVc5dUxXWnNhWEJ3WlhJb0kzc2tjMmxrWlgwcElGOXdiM05wZEdsdmJpMW1iR2x3Y0dWeUtDTjdKR052Y201bGNuMHBPMXh1SUNBZ0lIMWNiaUFnSUNCQVpXeHpaU0JwWmlBb1hDSWpleVJ6YVdSbGZTQWpleVJqYjNKdVpYSjlYQ0lnUFQwZ1hDSnlhV2RvZENCMGIzQmNJaWtnYjNJZ0tGd2lJM3NrYzJsa1pYMGdJM3NrWTI5eWJtVnlmVndpSUQwOUlGd2lkRzl3SUhKcFoyaDBYQ0lwSUh0Y2JpQWdJQ0FnSUNSa1pXZHlaV1U2SUY5d2IzTnBkR2x2YmkxbWJHbHdjR1Z5S0NON0pITnBaR1Y5S1NCZmNHOXphWFJwYjI0dFpteHBjSEJsY2lnamV5UmpiM0p1WlhKOUtUdGNiaUFnSUNCOVhHNGdJQ0FnUUdWc2MyVWdhV1lnS0Z3aUkzc2tjMmxrWlgwZ0kzc2tZMjl5Ym1WeWZWd2lJRDA5SUZ3aWNtbG5hSFFnWW05MGRHOXRYQ0lwSUc5eUlDaGNJaU43SkhOcFpHVjlJQ043SkdOdmNtNWxjbjFjSWlBOVBTQmNJbUp2ZEhSdmJTQnlhV2RvZEZ3aUtTQjdYRzRnSUNBZ0lDQWtaR1ZuY21WbE9pQmZjRzl6YVhScGIyNHRabXhwY0hCbGNpZ2pleVJ6YVdSbGZTa2dYM0J2YzJsMGFXOXVMV1pzYVhCd1pYSW9JM3NrWTI5eWJtVnlmU2s3WEc0Z0lDQWdmVnh1SUNBZ0lFQmxiSE5sSUdsbUlDaGNJaU43SkhOcFpHVjlJQ043SkdOdmNtNWxjbjFjSWlBOVBTQmNJbXhsWm5RZ1ltOTBkRzl0WENJcElHOXlJQ2hjSWlON0pITnBaR1Y5SUNON0pHTnZjbTVsY24xY0lpQTlQU0JjSW1KdmRIUnZiU0JzWldaMFhDSXBJSHRjYmlBZ0lDQWdJQ1JrWldkeVpXVTZJRjl3YjNOcGRHbHZiaTFtYkdsd2NHVnlLQ043SkhOcFpHVjlLU0JmY0c5emFYUnBiMjR0Wm14cGNIQmxjaWdqZXlSamIzSnVaWEo5S1R0Y2JpQWdJQ0I5WEc0Z0lDQWdKSE53WldNNklIUnZJQ1J6YVdSbElDUmpiM0p1WlhJN1hHNGdJSDFjYmlBZ1FHVnNjMlVnYVdZZ0pHeGxibWQwYUNBOVBTQXhJSHRjYmlBZ0lDQXZMeUJUZDJGd0lHWnZjaUJpWVdOcmQyRnlaSE1nWTI5dGNHRjBZV0pwYkdsMGVWeHVJQ0FnSUVCcFppQWtkSGx3WlNBOVBTQnpkSEpwYm1jZ2UxeHVJQ0FnSUNBZ0pHUmxaM0psWlRvZ0pIQnZjenRjYmlBZ0lDQWdJQ1J6Y0dWak9pQjBieUJmY0c5emFYUnBiMjR0Wm14cGNIQmxjaWdrY0c5ektUdGNiaUFnSUNCOVhHNGdJQ0FnUUdWc2MyVWdlMXh1SUNBZ0lDQWdKR1JsWjNKbFpUb2dMVEkzTUNBdElDUndiM003SUM4dmNtOTBZWFJsSUhSb1pTQm5jbUZrYVdWdWRDQnZjSEJ2YzJsMFpTQm1jbTl0SUhOd1pXTmNiaUFnSUNBZ0lDUnpjR1ZqT2lBa2NHOXpPMXh1SUNBZ0lIMWNiaUFnZlZ4dUlDQWtaR1ZuY21WbE9pQjFibkYxYjNSbEtDUmtaV2R5WldVZ0t5QmNJaXhjSWlrN1hHNGdJQ1J6Y0dWak9pQWdJSFZ1Y1hWdmRHVW9KSE53WldNZ0t5QmNJaXhjSWlrN1hHNGdJRUJ5WlhSMWNtNGdKR1JsWjNKbFpTQWtjM0JsWXp0Y2JuMWNibHh1UUdaMWJtTjBhVzl1SUY5d2IzTnBkR2x2YmkxbWJHbHdjR1Z5S0NSd2IzTXBJSHRjYmlBZ1FISmxkSFZ5YmlCcFppZ2tjRzl6SUQwOUlHeGxablFzSUhKcFoyaDBMQ0J1ZFd4c0tWeHVJQ0FnSUNBZ0lDQWdhV1lvSkhCdmN5QTlQU0J5YVdkb2RDd2diR1ZtZEN3Z2JuVnNiQ2xjYmlBZ0lDQWdJQ0FnSUdsbUtDUndiM01nUFQwZ2RHOXdMQ0JpYjNSMGIyMHNJRzUxYkd3cFhHNGdJQ0FnSUNBZ0lDQnBaaWdrY0c5eklEMDlJR0p2ZEhSdmJTd2dkRzl3TENCdWRXeHNLVHRjYm4xY2JpSXNDZ2tKSWk4dklGQnlhWFpoZEdVZ1puVnVZM1JwYjI0Z1ptOXlJR3hwYm1WaGNpMW5jbUZrYVdWdWRDMXdZWEp6WlhKY2JrQm1kVzVqZEdsdmJpQmZiR2x1WldGeUxYTnBaR1V0WTI5eWJtVnlMWEJoY25ObGNpZ2thVzFoWjJVc0lDUm1hWEp6ZEMxMllXd3NJQ1J3Y21WbWFYZ3NJQ1J6ZFdabWFYZ3NJQ1JvWVhNdGJYVnNkR2x3YkdVdGRtRnNjeWtnZTF4dUlDQWtkbUZzTFRFNklITjBjaTF6YkdsalpTZ2tabWx5YzNRdGRtRnNMQ0F4TENBa2FHRnpMVzExYkhScGNHeGxMWFpoYkhNZ0xTQXhLVHRjYmlBZ0pIWmhiQzB5T2lCemRISXRjMnhwWTJVb0pHWnBjbk4wTFhaaGJDd2dKR2hoY3kxdGRXeDBhWEJzWlMxMllXeHpJQ3NnTVN3Z2MzUnlMV3hsYm1kMGFDZ2tabWx5YzNRdGRtRnNLU2s3WEc0Z0lDUjJZV3d0TXpvZ2JuVnNiRHRjYmlBZ0pHaGhjeTEyWVd3dE16b2djM1J5TFdsdVpHVjRLQ1IyWVd3dE1pd2dYQ0lnWENJcE8xeHVYRzRnSUVCcFppQWthR0Z6TFhaaGJDMHpJSHRjYmlBZ0lDQWtkbUZzTFRNNklITjBjaTF6YkdsalpTZ2tkbUZzTFRJc0lDUm9ZWE10ZG1Gc0xUTWdLeUF4TENCemRISXRiR1Z1WjNSb0tDUjJZV3d0TWlrcE8xeHVJQ0FnSUNSMllXd3RNam9nYzNSeUxYTnNhV05sS0NSMllXd3RNaXdnTVN3Z0pHaGhjeTEyWVd3dE15QXRJREVwTzF4dUlDQjlYRzVjYmlBZ0pIQnZjem9nWDNCdmMybDBhVzl1TFdac2FYQndaWElvSkhaaGJDMHhLU0JmY0c5emFYUnBiMjR0Wm14cGNIQmxjaWdrZG1Gc0xUSXBJRjl3YjNOcGRHbHZiaTFtYkdsd2NHVnlLQ1IyWVd3dE15azdYRzRnSUNSd2IzTTZJSFZ1Y1hWdmRHVW9KSEJ2Y3lBcklGd2lYQ0lwTzF4dVhHNGdJQzh2SUZWelpTQnZiR1FnYzNCbFl5Qm1iM0lnZDJWaWEybDBYRzRnSUVCcFppQWtkbUZzTFRFZ1BUMGdYQ0owYjF3aUlIdGNiaUFnSUNCQWNtVjBkWEp1SUNoY2JpQWdJQ0FnSUhkbFltdHBkQzFwYldGblpUb2dMWGRsWW10cGRDMGdLeUFrY0hKbFptbDRJQ3NnSkhCdmN5QXJJQ1J6ZFdabWFYZ3NYRzRnSUNBZ0lDQnpjR1ZqTFdsdFlXZGxPaUFrYVcxaFoyVmNiaUFnSUNBcE8xeHVJQ0I5WEc1Y2JpQWdMeThnUW5KcGJtY2dkR2hsSUdOdlpHVWdkWEFnZEc4Z2MzQmxZMXh1SUNCQVpXeHpaU0I3WEc0Z0lDQWdRSEpsZEhWeWJpQW9YRzRnSUNBZ0lDQjNaV0pyYVhRdGFXMWhaMlU2SUMxM1pXSnJhWFF0SUNzZ0pHbHRZV2RsTEZ4dUlDQWdJQ0FnYzNCbFl5MXBiV0ZuWlRvZ0pIQnlaV1pwZUNBcklGd2lkRzhnWENJZ0t5QWtjRzl6SUNzZ0pITjFabVpwZUZ4dUlDQWdJQ2s3WEc0Z0lIMWNibjFjYmlJc0Nna0pJa0JtZFc1amRHbHZiaUJmY21Ga2FXRnNMV0Z5Wnkxd1lYSnpaWElvSkdjeExDQWtaeklzSUNSd2IzTXNJQ1J6YUdGd1pTMXphWHBsS1NCN1hHNGdJRUJsWVdOb0lDUjJZV3gxWlNCcGJpQWtaekVzSUNSbk1pQjdYRzRnSUNBZ0pHWnBjbk4wTFhaaGJEb2diblJvS0NSMllXeDFaU3dnTVNrN1hHNGdJQ0FnSkhCdmN5MTBlWEJsT2lBZ2RIbHdaUzF2Wmlna1ptbHljM1F0ZG1Gc0tUdGNiaUFnSUNBa2MzQmxZeTFoZEMxcGJtUmxlRG9nYm5Wc2JEdGNibHh1SUNBZ0lDOHZJRVJsZEdWeWJXbHVaU0JwWmlCemNHVmpJSGRoY3lCd1lYTnpaV1FnZEc4Z2JXbDRhVzVjYmlBZ0lDQkFhV1lnZEhsd1pTMXZaaWdrZG1Gc2RXVXBJRDA5SUd4cGMzUWdlMXh1SUNBZ0lDQWdKSE53WldNdFlYUXRhVzVrWlhnNklHbG1LR2x1WkdWNEtDUjJZV3gxWlN3Z1lYUXBMQ0JwYm1SbGVDZ2tkbUZzZFdVc0lHRjBLU3dnWm1Gc2MyVXBPMXh1SUNBZ0lIMWNiaUFnSUNCQWFXWWdKSE53WldNdFlYUXRhVzVrWlhnZ2UxeHVJQ0FnSUNBZ1FHbG1JQ1J6Y0dWakxXRjBMV2x1WkdWNElENGdNU0I3WEc0Z0lDQWdJQ0FnSUVCbWIzSWdKR2tnWm5KdmJTQXhJSFJvY205MVoyZ2dLQ1J6Y0dWakxXRjBMV2x1WkdWNElDMGdNU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDUnphR0Z3WlMxemFYcGxPaUFrYzJoaGNHVXRjMmw2WlNCdWRHZ29KSFpoYkhWbExDQWthU2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ1FHWnZjaUFrYVNCbWNtOXRJQ2drYzNCbFl5MWhkQzFwYm1SbGVDQXJJREVwSUhSb2NtOTFaMmdnYkdWdVozUm9LQ1IyWVd4MVpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNSd2IzTTZJQ1J3YjNNZ2JuUm9LQ1IyWVd4MVpTd2dKR2twTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCQVpXeHpaU0JwWmlBa2MzQmxZeTFoZEMxcGJtUmxlQ0E5UFNBeElIdGNiaUFnSUNBZ0lDQWdRR1p2Y2lBa2FTQm1jbTl0SUNna2MzQmxZeTFoZEMxcGJtUmxlQ0FySURFcElIUm9jbTkxWjJnZ2JHVnVaM1JvS0NSMllXeDFaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDUndiM002SUNSd2IzTWdiblJvS0NSMllXeDFaU3dnSkdrcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQWtaekU2SUc1MWJHdzdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5OGdTV1lnYm05MElITndaV01nWTJGc1kzVnNZWFJsSUdOdmNuSmxZM1FnZG1Gc2RXVnpYRzRnSUNBZ1FHVnNjMlVnZTF4dUlDQWdJQ0FnUUdsbUlDZ2tjRzl6TFhSNWNHVWdJVDBnWTI5c2IzSXBJRzl5SUNna1ptbHljM1F0ZG1Gc0lDRTlJRndpZEhKaGJuTndZWEpsYm5SY0lpa2dlMXh1SUNBZ0lDQWdJQ0JBYVdZZ0tDUndiM010ZEhsd1pTQTlQU0J1ZFcxaVpYSXBYRzRnSUNBZ0lDQWdJRzl5SUNna1ptbHljM1F0ZG1Gc0lEMDlJRndpWTJWdWRHVnlYQ0lwWEc0Z0lDQWdJQ0FnSUc5eUlDZ2tabWx5YzNRdGRtRnNJRDA5SUZ3aWRHOXdYQ0lwWEc0Z0lDQWdJQ0FnSUc5eUlDZ2tabWx5YzNRdGRtRnNJRDA5SUZ3aWNtbG5hSFJjSWlsY2JpQWdJQ0FnSUNBZ2IzSWdLQ1JtYVhKemRDMTJZV3dnUFQwZ1hDSmliM1IwYjIxY0lpbGNiaUFnSUNBZ0lDQWdiM0lnS0NSbWFYSnpkQzEyWVd3Z1BUMGdYQ0pzWldaMFhDSXBJSHRjYmx4dUlDQWdJQ0FnSUNBZ0lDUndiM002SUNSMllXeDFaVHRjYmx4dUlDQWdJQ0FnSUNBZ0lFQnBaaUFrY0c5eklEMDlJQ1JuTVNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FrWnpFNklHNTFiR3c3WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnUUdWc2MyVWdhV1pjYmlBZ0lDQWdJQ0FnSUNBZ0tDUm1hWEp6ZEMxMllXd2dQVDBnWENKbGJHeHBjSE5sWENJcFhHNGdJQ0FnSUNBZ0lHOXlJQ2drWm1seWMzUXRkbUZzSUQwOUlGd2lZMmx5WTJ4bFhDSXBYRzRnSUNBZ0lDQWdJRzl5SUNna1ptbHljM1F0ZG1Gc0lEMDlJRndpWTJ4dmMyVnpkQzF6YVdSbFhDSXBYRzRnSUNBZ0lDQWdJRzl5SUNna1ptbHljM1F0ZG1Gc0lEMDlJRndpWTJ4dmMyVnpkQzFqYjNKdVpYSmNJaWxjYmlBZ0lDQWdJQ0FnYjNJZ0tDUm1hWEp6ZEMxMllXd2dQVDBnWENKbVlYSjBhR1Z6ZEMxemFXUmxYQ0lwWEc0Z0lDQWdJQ0FnSUc5eUlDZ2tabWx5YzNRdGRtRnNJRDA5SUZ3aVptRnlkR2hsYzNRdFkyOXlibVZ5WENJcFhHNGdJQ0FnSUNBZ0lHOXlJQ2drWm1seWMzUXRkbUZzSUQwOUlGd2lZMjl1ZEdGcGJsd2lLVnh1SUNBZ0lDQWdJQ0J2Y2lBb0pHWnBjbk4wTFhaaGJDQTlQU0JjSW1OdmRtVnlYQ0lwSUh0Y2JseHVJQ0FnSUNBZ0lDQWdJQ1J6YUdGd1pTMXphWHBsT2lBa2RtRnNkV1U3WEc1Y2JpQWdJQ0FnSUNBZ0lDQkFhV1lnSkhaaGJIVmxJRDA5SUNSbk1TQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBa1p6RTZJRzUxYkd3N1hHNGdJQ0FnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUNBZ1FHVnNjMlVnYVdZZ0pIWmhiSFZsSUQwOUlDUm5NaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWtaekk2SUc1MWJHdzdYRzRnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQjlYRzRnSUVCeVpYUjFjbTRnSkdjeExDQWtaeklzSUNSd2IzTXNJQ1J6YUdGd1pTMXphWHBsTzF4dWZWeHVJaXdLQ1FraVFHWjFibU4wYVc5dUlGOXlZV1JwWVd3dGNHOXphWFJwYjI1ekxYQmhjbk5sY2lna1ozSmhaR2xsYm5RdGNHOXpLU0I3WEc0Z0lDUnphR0Z3WlMxemFYcGxPaUJ1ZEdnb0pHZHlZV1JwWlc1MExYQnZjeXdnTVNrN1hHNGdJQ1J3YjNNNklDQWdJQ0FnSUNCdWRHZ29KR2R5WVdScFpXNTBMWEJ2Y3l3Z01pazdYRzRnSUNSemFHRndaUzF6YVhwbExYTndaV002SUY5emFHRndaUzF6YVhwbExYTjBjbWx3Y0dWeUtDUnphR0Z3WlMxemFYcGxLVHRjYmx4dUlDQWtjSEpsTFhOd1pXTTZJSFZ1Y1hWdmRHVW9hV1lvSkhCdmN5d2dYQ0lqZXlSd2IzTjlMQ0JjSWl3Z2JuVnNiQ2twWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdkVzV4ZFc5MFpTaHBaaWdrYzJoaGNHVXRjMmw2WlN3Z1hDSWpleVJ6YUdGd1pTMXphWHBsZlN4Y0lpd2diblZzYkNrcE8xeHVJQ0FrY0c5ekxYTndaV002SUdsbUtDUndiM01zSUZ3aVlYUWdJM3NrY0c5emZWd2lMQ0J1ZFd4c0tUdGNibHh1SUNBa2MzQmxZem9nWENJamV5UnphR0Z3WlMxemFYcGxMWE53WldOOUlDTjdKSEJ2Y3kxemNHVmpmVndpTzF4dVhHNGdJQzh2SUVGa1pDQmpiMjF0WVZ4dUlDQkFhV1lnS0NSemNHVmpJQ0U5SUZ3aUlDQmNJaWtnZTF4dUlDQWdJQ1J6Y0dWak9pQmNJaU43SkhOd1pXTjlMRndpTzF4dUlDQjlYRzVjYmlBZ1FISmxkSFZ5YmlBa2NISmxMWE53WldNZ0pITndaV003WEc1OVhHNGlMQW9KQ1NKQVpuVnVZM1JwYjI0Z1gzSmhaR2xoYkMxbmNtRmthV1Z1ZEMxd1lYSnpaWElvSkdsdFlXZGxLU0I3WEc0Z0lDUnBiV0ZuWlRvZ2RXNXhkVzkwWlNna2FXMWhaMlVwTzF4dUlDQWtaM0poWkdsbGJuUnpPaUFvS1R0Y2JpQWdKSE4wWVhKME9pQnpkSEl0YVc1a1pYZ29KR2x0WVdkbExDQmNJaWhjSWlrN1hHNGdJQ1JsYm1RNklITjBjaTFwYm1SbGVDZ2thVzFoWjJVc0lGd2lMRndpS1R0Y2JpQWdKR1pwY25OMExYWmhiRG9nYzNSeUxYTnNhV05sS0NScGJXRm5aU3dnSkhOMFlYSjBJQ3NnTVN3Z0pHVnVaQ0F0SURFcE8xeHVYRzRnSUNSd2NtVm1hWGc2SUhOMGNpMXpiR2xqWlNna2FXMWhaMlVzSURFc0lDUnpkR0Z5ZENrN1hHNGdJQ1J6ZFdabWFYZzZJSE4wY2kxemJHbGpaU2drYVcxaFoyVXNJQ1JsYm1Rc0lITjBjaTFzWlc1bmRHZ29KR2x0WVdkbEtTazdYRzVjYmlBZ0pHbHpMWE53WldNdGMzbHVkR0Y0T2lCemRISXRhVzVrWlhnb0pHWnBjbk4wTFhaaGJDd2dYQ0poZEZ3aUtUdGNibHh1SUNCQWFXWWdKR2x6TFhOd1pXTXRjM2x1ZEdGNElHRnVaQ0FrYVhNdGMzQmxZeTF6ZVc1MFlYZ2dQaUF4SUh0Y2JpQWdJQ0FrYTJWNWQyOXlaRG9nYzNSeUxYTnNhV05sS0NSbWFYSnpkQzEyWVd3c0lERXNJQ1JwY3kxemNHVmpMWE41Ym5SaGVDQXRJRElwTzF4dUlDQWdJQ1J3YjNNNklITjBjaTF6YkdsalpTZ2tabWx5YzNRdGRtRnNMQ0FrYVhNdGMzQmxZeTF6ZVc1MFlYZ2dLeUF6TENCemRISXRiR1Z1WjNSb0tDUm1hWEp6ZEMxMllXd3BLVHRjYmlBZ0lDQWtjRzl6T2lCaGNIQmxibVFvSkhCdmN5d2dKR3RsZVhkdmNtUXNJR052YlcxaEtUdGNibHh1SUNBZ0lDUm5jbUZrYVdWdWRITTZJQ2hjYmlBZ0lDQWdJSGRsWW10cGRDMXBiV0ZuWlRvZ0xYZGxZbXRwZEMwZ0t5QWtjSEpsWm1sNElDc2dKSEJ2Y3lBcklDUnpkV1ptYVhnc1hHNGdJQ0FnSUNCemNHVmpMV2x0WVdkbE9pQWthVzFoWjJWY2JpQWdJQ0FwTzF4dUlDQjlYRzVjYmlBZ1FHVnNjMlVnYVdZZ0pHbHpMWE53WldNdGMzbHVkR0Y0SUQwOUlERWdlMXh1SUNBZ0lDUndiM002SUhOMGNpMXpiR2xqWlNna1ptbHljM1F0ZG1Gc0xDQWthWE10YzNCbFl5MXplVzUwWVhnZ0t5QXpMQ0J6ZEhJdGJHVnVaM1JvS0NSbWFYSnpkQzEyWVd3cEtUdGNibHh1SUNBZ0lDUm5jbUZrYVdWdWRITTZJQ2hjYmlBZ0lDQWdJSGRsWW10cGRDMXBiV0ZuWlRvZ0xYZGxZbXRwZEMwZ0t5QWtjSEpsWm1sNElDc2dKSEJ2Y3lBcklDUnpkV1ptYVhnc1hHNGdJQ0FnSUNCemNHVmpMV2x0WVdkbE9pQWthVzFoWjJWY2JpQWdJQ0FwTzF4dUlDQjlYRzVjYmlBZ1FHVnNjMlVnYVdZZ2MzUnlMV2x1WkdWNEtDUnBiV0ZuWlN3Z1hDSmpiM1psY2x3aUtTQnZjaUJ6ZEhJdGFXNWtaWGdvSkdsdFlXZGxMQ0JjSW1OdmJuUmhhVzVjSWlrZ2UxeHVJQ0FnSUVCM1lYSnVJRndpVW1Ga2FXRnNMV2R5WVdScFpXNTBJRzVsWldSeklIUnZJR0psSUhWd1pHRjBaV1FnZEc4Z1kyOXVabTl5YlNCMGJ5QnNZWFJsYzNRZ2MzQmxZeTVjSWp0Y2JseHVJQ0FnSUNSbmNtRmthV1Z1ZEhNNklDaGNiaUFnSUNBZ0lIZGxZbXRwZEMxcGJXRm5aVG9nYm5Wc2JDeGNiaUFnSUNBZ0lITndaV010YVcxaFoyVTZJQ1JwYldGblpWeHVJQ0FnSUNrN1hHNGdJSDFjYmx4dUlDQkFaV3h6WlNCN1hHNGdJQ0FnSkdkeVlXUnBaVzUwY3pvZ0tGeHVJQ0FnSUNBZ2QyVmlhMmwwTFdsdFlXZGxPaUF0ZDJWaWEybDBMU0FySUNScGJXRm5aU3hjYmlBZ0lDQWdJSE53WldNdGFXMWhaMlU2SUNScGJXRm5aVnh1SUNBZ0lDazdYRzRnSUgxY2JseHVJQ0JBY21WMGRYSnVJQ1JuY21Ga2FXVnVkSE03WEc1OVhHNGlMQW9KQ1NJdkx5QlZjMlZ5SUdadmNpQnNhVzVsWVhJZ1lXNWtJSEpoWkdsaGJDQm5jbUZrYVdWdWRITWdkMmwwYUdsdUlHSmhZMnRuY205MWJtUXRhVzFoWjJVZ2IzSWdZbTl5WkdWeUxXbHRZV2RsSUhCeWIzQmxjblJwWlhOY2JseHVRR1oxYm1OMGFXOXVJRjl5Wlc1a1pYSXRaM0poWkdsbGJuUnpLQ1JuY21Ga2FXVnVkQzF3YjNOcGRHbHZibk1zSUNSbmNtRmthV1Z1ZEhNc0lDUm5jbUZrYVdWdWRDMTBlWEJsTENBa2RtVnVaRzl5T2lCbVlXeHpaU2tnZTF4dUlDQWtjSEpsTFhOd1pXTTZJRzUxYkd3N1hHNGdJQ1J6Y0dWak9pQnVkV3hzTzF4dUlDQWtkbVZ1Wkc5eUxXZHlZV1JwWlc1MGN6b2diblZzYkR0Y2JpQWdRR2xtSUNSbmNtRmthV1Z1ZEMxMGVYQmxJRDA5SUd4cGJtVmhjaUI3WEc0Z0lDQWdRR2xtSUNSbmNtRmthV1Z1ZEMxd2IzTnBkR2x2Ym5NZ2UxeHVJQ0FnSUNBZ0pIQnlaUzF6Y0dWak9pQnVkR2dvSkdkeVlXUnBaVzUwTFhCdmMybDBhVzl1Y3l3Z01TazdYRzRnSUNBZ0lDQWtjM0JsWXpvZ0lDQWdJRzUwYUNna1ozSmhaR2xsYm5RdGNHOXphWFJwYjI1ekxDQXlLVHRjYmlBZ0lDQjlYRzRnSUgxY2JpQWdRR1ZzYzJVZ2FXWWdKR2R5WVdScFpXNTBMWFI1Y0dVZ1BUMGdjbUZrYVdGc0lIdGNiaUFnSUNBa2NISmxMWE53WldNNklHNTBhQ2drWjNKaFpHbGxiblF0Y0c5emFYUnBiMjV6TENBeEtUdGNiaUFnSUNBa2MzQmxZem9nSUNBZ0lHNTBhQ2drWjNKaFpHbGxiblF0Y0c5emFYUnBiMjV6TENBeUtUdGNiaUFnZlZ4dVhHNGdJRUJwWmlBa2RtVnVaRzl5SUh0Y2JpQWdJQ0FrZG1WdVpHOXlMV2R5WVdScFpXNTBjem9nTFNON0pIWmxibVJ2Y24wdEkzc2taM0poWkdsbGJuUXRkSGx3WlgwdFozSmhaR2xsYm5Rb0kzc2tjSEpsTFhOd1pXTjlJQ1JuY21Ga2FXVnVkSE1wTzF4dUlDQjlYRzRnSUVCbGJITmxJR2xtSUNSMlpXNWtiM0lnUFQwZ1ptRnNjMlVnZTF4dUlDQWdJQ1IyWlc1a2IzSXRaM0poWkdsbGJuUnpPaUJjSWlON0pHZHlZV1JwWlc1MExYUjVjR1Y5TFdkeVlXUnBaVzUwS0NON0pITndaV045SUNON0pHZHlZV1JwWlc1MGMzMHBYQ0k3WEc0Z0lDQWdKSFpsYm1SdmNpMW5jbUZrYVdWdWRITTZJSFZ1Y1hWdmRHVW9KSFpsYm1SdmNpMW5jbUZrYVdWdWRITXBPMXh1SUNCOVhHNGdJRUJ5WlhSMWNtNGdKSFpsYm1SdmNpMW5jbUZrYVdWdWRITTdYRzU5WEc0aUxBb0pDU0pBWm5WdVkzUnBiMjRnWDNOb1lYQmxMWE5wZW1VdGMzUnlhWEJ3WlhJb0pITm9ZWEJsTFhOcGVtVXBJSHRjYmlBZ0pITm9ZWEJsTFhOcGVtVXRjM0JsWXpvZ2JuVnNiRHRjYmlBZ1FHVmhZMmdnSkhaaGJIVmxJR2x1SUNSemFHRndaUzF6YVhwbElIdGNiaUFnSUNCQWFXWWdLQ1IyWVd4MVpTQTlQU0JjSW1OdmRtVnlYQ0lwSUc5eUlDZ2tkbUZzZFdVZ1BUMGdYQ0pqYjI1MFlXbHVYQ0lwSUh0Y2JpQWdJQ0FnSUNSMllXeDFaVG9nYm5Wc2JEdGNiaUFnSUNCOVhHNGdJQ0FnSkhOb1lYQmxMWE5wZW1VdGMzQmxZem9nWENJamV5UnphR0Z3WlMxemFYcGxMWE53WldOOUlDTjdKSFpoYkhWbGZWd2lPMXh1SUNCOVhHNGdJRUJ5WlhSMWNtNGdKSE5vWVhCbExYTnBlbVV0YzNCbFl6dGNibjFjYmlJc0Nna0pJaTh2S2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xTHk5Y2JpOHZJRWhsYkhCbGNpQm1kVzVqZEdsdmJpQm1iM0lnYkdsdVpXRnlMM0poWkdsaGJDMW5jbUZrYVdWdWRDMXdZWEp6WlhKekxseHVMeThnVTI5MWNtTmxPaUJvZEhSd09pOHZjMkZ6YzIxbGFYTjBaWEl1WTI5dEwyZHBjM1F2T1RZME56UXdPRnh1THk4cUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvdkwxeHVRR1oxYm1OMGFXOXVJRjl6ZEhJdGRHOHRiblZ0S0NSemRISnBibWNwSUh0Y2JpQWdMeThnVFdGMGNtbGpaWE5jYmlBZ0pITjBjbWx1WjNNNklGd2lNRndpSUZ3aU1Wd2lJRndpTWx3aUlGd2lNMXdpSUZ3aU5Gd2lJRndpTlZ3aUlGd2lObHdpSUZ3aU4xd2lJRndpT0Z3aUlGd2lPVndpTzF4dUlDQWtiblZ0WW1WeWN6b2dJREFnSUNBeElDQWdNaUFnSURNZ0lDQTBJQ0FnTlNBZ0lEWWdJQ0EzSUNBZ09DQWdJRGs3WEc1Y2JpQWdMeThnVW1WemRXeDBYRzRnSUNSeVpYTjFiSFE2SURBN1hHNGdJQ1JrYVhacFpHVnlPaUF3TzF4dUlDQWtiV2x1ZFhNNklHWmhiSE5sTzF4dVhHNGdJQzh2SUV4dmIzQnBibWNnZEdoeWIzVm5hQ0JoYkd3Z1kyaGhjbUZqZEdWeWMxeHVJQ0JBWm05eUlDUnBJR1p5YjIwZ01TQjBhSEp2ZFdkb0lITjBjaTFzWlc1bmRHZ29KSE4wY21sdVp5a2dlMXh1SUNBZ0lDUmphR0Z5WVdOMFpYSTZJSE4wY2kxemJHbGpaU2drYzNSeWFXNW5MQ0FrYVN3Z0pHa3BPMXh1SUNBZ0lDUnBibVJsZURvZ2FXNWtaWGdvSkhOMGNtbHVaM01zSUNSamFHRnlZV04wWlhJcE8xeHVYRzRnSUNBZ1FHbG1JQ1JqYUdGeVlXTjBaWElnUFQwZ1hDSXRYQ0lnZTF4dUlDQWdJQ0FnSkcxcGJuVnpPaUIwY25WbE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUVCbGJITmxJR2xtSUNSamFHRnlZV04wWlhJZ1BUMGdYQ0l1WENJZ2UxeHVJQ0FnSUNBZ0pHUnBkbWxrWlhJNklERTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1FHVnNjMlVnZTF4dUlDQWdJQ0FnUUdsbUlHNXZkQ0FrYVc1a1pYZ2dlMXh1SUNBZ0lDQWdJQ0FrY21WemRXeDBPaUJwWmlna2JXbHVkWE1zSUNSeVpYTjFiSFFnS2lBdE1Td2dKSEpsYzNWc2RDazdYRzRnSUNBZ0lDQWdJRUJ5WlhSMWNtNGdYMk52Ym5abGNuUXRkVzVwZEhNb0pISmxjM1ZzZEN3Z2MzUnlMWE5zYVdObEtDUnpkSEpwYm1jc0lDUnBLU2s3WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNSdWRXMWlaWEk2SUc1MGFDZ2tiblZ0WW1WeWN5d2dKR2x1WkdWNEtUdGNibHh1SUNBZ0lDQWdRR2xtSUNSa2FYWnBaR1Z5SUQwOUlEQWdlMXh1SUNBZ0lDQWdJQ0FrY21WemRXeDBPaUFrY21WemRXeDBJQ29nTVRBN1hHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lFQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0x5OGdUVzkyWlNCMGFHVWdaR1ZqYVcxaGJDQmtiM1FnZEc4Z2RHaGxJR3hsWm5SY2JpQWdJQ0FnSUNBZ0pHUnBkbWxrWlhJNklDUmthWFpwWkdWeUlDb2dNVEE3WEc0Z0lDQWdJQ0FnSUNSdWRXMWlaWEk2SUNSdWRXMWlaWElnTHlBa1pHbDJhV1JsY2p0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0pISmxjM1ZzZERvZ0pISmxjM1ZzZENBcklDUnVkVzFpWlhJN1hHNGdJQ0FnZlZ4dUlDQjlYRzRnSUVCeVpYUjFjbTRnYVdZb0pHMXBiblZ6TENBa2NtVnpkV3gwSUNvZ0xURXNJQ1J5WlhOMWJIUXBPMXh1ZlZ4dUlpd0tDUWtpTHk4Z2FIUjBjRG92TDNkM2R5NTNNeTV2Y21jdlZGSXZZM056TXkxaGJtbHRZWFJwYjI1ekx5TjBhR1V0WVc1cGJXRjBhVzl1TFc1aGJXVXRjSEp2Y0dWeWRIa3RYRzR2THlCRllXTm9JRzltSUhSb1pYTmxJRzFwZUdsdWN5QnpkWEJ3YjNKMElHTnZiVzFoSUhObGNHRnlZWFJsWkNCc2FYTjBjeUJ2WmlCMllXeDFaWE1zSUhkb2FXTm9JR0ZzYkc5M2N5QmthV1ptWlhKbGJuUWdkSEpoYm5OcGRHbHZibk1nWm05eUlHbHVaR2wyYVdSMVlXd2djSEp2Y0dWeWRHbGxjeUIwYnlCaVpTQmtaWE5qY21saVpXUWdhVzRnWVNCemFXNW5iR1VnYzNSNWJHVWdjblZzWlM0Z1JXRmphQ0IyWVd4MVpTQnBiaUIwYUdVZ2JHbHpkQ0JqYjNKeVpYTndiMjVrY3lCMGJ5QjBhR1VnZG1Gc2RXVWdZWFFnZEdoaGRDQnpZVzFsSUhCdmMybDBhVzl1SUdsdUlIUm9aU0J2ZEdobGNpQndjbTl3WlhKMGFXVnpMbHh1WEc1QWJXbDRhVzRnWVc1cGJXRjBhVzl1S0NSaGJtbHRZWFJwYjI1ekxpNHVLU0I3WEc0Z0lFQnBibU5zZFdSbElIQnlaV1pwZUdWeUtHRnVhVzFoZEdsdmJpd2dKR0Z1YVcxaGRHbHZibk1zSUhkbFltdHBkQ0J0YjNvZ2MzQmxZeWs3WEc1OVhHNWNia0J0YVhocGJpQmhibWx0WVhScGIyNHRibUZ0WlNna2JtRnRaWE11TGk0cElIdGNiaUFnUUdsdVkyeDFaR1VnY0hKbFptbDRaWElvWVc1cGJXRjBhVzl1TFc1aGJXVXNJQ1J1WVcxbGN5d2dkMlZpYTJsMElHMXZlaUJ6Y0dWaktUdGNibjFjYmx4dVFHMXBlR2x1SUdGdWFXMWhkR2x2Ymkxa2RYSmhkR2x2Ymlna2RHbHRaWE11TGk0cElIdGNiaUFnUUdsdVkyeDFaR1VnY0hKbFptbDRaWElvWVc1cGJXRjBhVzl1TFdSMWNtRjBhVzl1TENBa2RHbHRaWE1zSUhkbFltdHBkQ0J0YjNvZ2MzQmxZeWs3WEc1OVhHNWNia0J0YVhocGJpQmhibWx0WVhScGIyNHRkR2x0YVc1bkxXWjFibU4wYVc5dUtDUnRiM1JwYjI1ekxpNHVLU0I3WEc0Z0lDOHZJR1ZoYzJVZ2ZDQnNhVzVsWVhJZ2ZDQmxZWE5sTFdsdUlId2daV0Z6WlMxdmRYUWdmQ0JsWVhObExXbHVMVzkxZEZ4dUlDQkFhVzVqYkhWa1pTQndjbVZtYVhobGNpaGhibWx0WVhScGIyNHRkR2x0YVc1bkxXWjFibU4wYVc5dUxDQWtiVzkwYVc5dWN5d2dkMlZpYTJsMElHMXZlaUJ6Y0dWaktUdGNibjFjYmx4dVFHMXBlR2x1SUdGdWFXMWhkR2x2YmkxcGRHVnlZWFJwYjI0dFkyOTFiblFvSkhaaGJIVmxjeTR1TGlrZ2UxeHVJQ0F2THlCcGJtWnBibWwwWlNCOElEeHVkVzFpWlhJK1hHNGdJRUJwYm1Oc2RXUmxJSEJ5WldacGVHVnlLR0Z1YVcxaGRHbHZiaTFwZEdWeVlYUnBiMjR0WTI5MWJuUXNJQ1IyWVd4MVpYTXNJSGRsWW10cGRDQnRiM29nYzNCbFl5azdYRzU5WEc1Y2JrQnRhWGhwYmlCaGJtbHRZWFJwYjI0dFpHbHlaV04wYVc5dUtDUmthWEpsWTNScGIyNXpMaTR1S1NCN1hHNGdJQzh2SUc1dmNtMWhiQ0I4SUdGc2RHVnlibUYwWlZ4dUlDQkFhVzVqYkhWa1pTQndjbVZtYVhobGNpaGhibWx0WVhScGIyNHRaR2x5WldOMGFXOXVMQ0FrWkdseVpXTjBhVzl1Y3l3Z2QyVmlhMmwwSUcxdmVpQnpjR1ZqS1R0Y2JuMWNibHh1UUcxcGVHbHVJR0Z1YVcxaGRHbHZiaTF3YkdGNUxYTjBZWFJsS0NSemRHRjBaWE11TGk0cElIdGNiaUFnTHk4Z2NuVnVibWx1WnlCOElIQmhkWE5sWkZ4dUlDQkFhVzVqYkhWa1pTQndjbVZtYVhobGNpaGhibWx0WVhScGIyNHRjR3hoZVMxemRHRjBaU3dnSkhOMFlYUmxjeXdnZDJWaWEybDBJRzF2ZWlCemNHVmpLVHRjYm4xY2JseHVRRzFwZUdsdUlHRnVhVzFoZEdsdmJpMWtaV3hoZVNna2RHbHRaWE11TGk0cElIdGNiaUFnUUdsdVkyeDFaR1VnY0hKbFptbDRaWElvWVc1cGJXRjBhVzl1TFdSbGJHRjVMQ0FrZEdsdFpYTXNJSGRsWW10cGRDQnRiM29nYzNCbFl5azdYRzU5WEc1Y2JrQnRhWGhwYmlCaGJtbHRZWFJwYjI0dFptbHNiQzF0YjJSbEtDUnRiMlJsY3k0dUxpa2dlMXh1SUNBdkx5QnViMjVsSUh3Z1ptOXlkMkZ5WkhNZ2ZDQmlZV05yZDJGeVpITWdmQ0JpYjNSb1hHNGdJRUJwYm1Oc2RXUmxJSEJ5WldacGVHVnlLR0Z1YVcxaGRHbHZiaTFtYVd4c0xXMXZaR1VzSUNSdGIyUmxjeXdnZDJWaWEybDBJRzF2ZWlCemNHVmpLVHRjYm4xY2JpSXNDZ2tKSWtCdGFYaHBiaUJoY0hCbFlYSmhibU5sS0NSMllXeDFaU2tnZTF4dUlDQkFhVzVqYkhWa1pTQndjbVZtYVhobGNpaGhjSEJsWVhKaGJtTmxMQ0FrZG1Gc2RXVXNJSGRsWW10cGRDQnRiM29nYlhNZ2J5QnpjR1ZqS1R0Y2JuMWNiaUlzQ2drSklrQnRhWGhwYmlCaVlXTnJabUZqWlMxMmFYTnBZbWxzYVhSNUtDUjJhWE5wWW1sc2FYUjVLU0I3WEc0Z0lFQnBibU5zZFdSbElIQnlaV1pwZUdWeUtHSmhZMnRtWVdObExYWnBjMmxpYVd4cGRIa3NJQ1IyYVhOcFltbHNhWFI1TENCM1pXSnJhWFFnYzNCbFl5azdYRzU5WEc0aUxBb0pDU0l2THlvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2k4dlhHNHZMeUJDWVdOclozSnZkVzVrSUhCeWIzQmxjblI1SUdadmNpQmhaR1JwYm1jZ2JYVnNkR2x3YkdVZ1ltRmphMmR5YjNWdVpITWdkWE5wYm1jZ2MyaHZjblJvWVc1a1hHNHZMeUJ1YjNSaGRHbHZiaTVjYmk4dktpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUx5OWNibHh1UUcxcGVHbHVJR0poWTJ0bmNtOTFibVFvSkdKaFkydG5jbTkxYm1SekxpNHVLU0I3WEc0Z0lDUjNaV0pyYVhRdFltRmphMmR5YjNWdVpITTZJQ2dwTzF4dUlDQWtjM0JsWXkxaVlXTnJaM0p2ZFc1a2N6b2dLQ2s3WEc1Y2JpQWdRR1ZoWTJnZ0pHSmhZMnRuY205MWJtUWdhVzRnSkdKaFkydG5jbTkxYm1SeklIdGNiaUFnSUNBa2QyVmlhMmwwTFdKaFkydG5jbTkxYm1RNklDZ3BPMXh1SUNBZ0lDUnpjR1ZqTFdKaFkydG5jbTkxYm1RNklDZ3BPMXh1SUNBZ0lDUmlZV05yWjNKdmRXNWtMWFI1Y0dVNklIUjVjR1V0YjJZb0pHSmhZMnRuY205MWJtUXBPMXh1WEc0Z0lDQWdRR2xtSUNSaVlXTnJaM0p2ZFc1a0xYUjVjR1VnUFQwZ2MzUnlhVzVuSUc5eUlDUmlZV05yWjNKdmRXNWtMWFI1Y0dVZ1BUMGdiR2x6ZENCN1hHNGdJQ0FnSUNBa1ltRmphMmR5YjNWdVpDMXpkSEk2SUdsbUtDUmlZV05yWjNKdmRXNWtMWFI1Y0dVZ1BUMGdiR2x6ZEN3Z2JuUm9LQ1JpWVdOclozSnZkVzVrTENBeEtTd2dKR0poWTJ0bmNtOTFibVFwTzF4dVhHNGdJQ0FnSUNBa2RYSnNMWE4wY2pvZ0lDQWdJQ0FnYzNSeUxYTnNhV05sS0NSaVlXTnJaM0p2ZFc1a0xYTjBjaXdnTVN3Z015azdYRzRnSUNBZ0lDQWtaM0poWkdsbGJuUXRkSGx3WlRvZ2MzUnlMWE5zYVdObEtDUmlZV05yWjNKdmRXNWtMWE4wY2l3Z01Td2dOaWs3WEc1Y2JpQWdJQ0FnSUVCcFppQWtkWEpzTFhOMGNpQTlQU0JjSW5WeWJGd2lJSHRjYmlBZ0lDQWdJQ0FnSkhkbFltdHBkQzFpWVdOclozSnZkVzVrT2lBa1ltRmphMmR5YjNWdVpEdGNiaUFnSUNBZ0lDQWdKSE53WldNdFltRmphMmR5YjNWdVpEb2dJQ0FrWW1GamEyZHliM1Z1WkR0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ1FHVnNjMlVnYVdZZ0pHZHlZV1JwWlc1MExYUjVjR1VnUFQwZ1hDSnNhVzVsWVhKY0lpQjdYRzRnSUNBZ0lDQWdJQ1JuY21Ga2FXVnVkSE02SUY5c2FXNWxZWEl0WjNKaFpHbGxiblF0Y0dGeWMyVnlLRndpSTNza1ltRmphMmR5YjNWdVpIMWNJaWs3WEc0Z0lDQWdJQ0FnSUNSM1pXSnJhWFF0WW1GamEyZHliM1Z1WkRvZ2JXRndMV2RsZENna1ozSmhaR2xsYm5SekxDQjNaV0pyYVhRdGFXMWhaMlVwTzF4dUlDQWdJQ0FnSUNBa2MzQmxZeTFpWVdOclozSnZkVzVrT2lBZ0lHMWhjQzFuWlhRb0pHZHlZV1JwWlc1MGN5d2djM0JsWXkxcGJXRm5aU2s3WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUVCbGJITmxJR2xtSUNSbmNtRmthV1Z1ZEMxMGVYQmxJRDA5SUZ3aWNtRmthV0ZzWENJZ2UxeHVJQ0FnSUNBZ0lDQWtaM0poWkdsbGJuUnpPaUJmY21Ga2FXRnNMV2R5WVdScFpXNTBMWEJoY25ObGNpaGNJaU43SkdKaFkydG5jbTkxYm1SOVhDSXBPMXh1SUNBZ0lDQWdJQ0FrZDJWaWEybDBMV0poWTJ0bmNtOTFibVE2SUcxaGNDMW5aWFFvSkdkeVlXUnBaVzUwY3l3Z2QyVmlhMmwwTFdsdFlXZGxLVHRjYmlBZ0lDQWdJQ0FnSkhOd1pXTXRZbUZqYTJkeWIzVnVaRG9nSUNCdFlYQXRaMlYwS0NSbmNtRmthV1Z1ZEhNc0lITndaV010YVcxaFoyVXBPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0JBWld4elpTQjdYRzRnSUNBZ0lDQWdJQ1IzWldKcmFYUXRZbUZqYTJkeWIzVnVaRG9nSkdKaFkydG5jbTkxYm1RN1hHNGdJQ0FnSUNBZ0lDUnpjR1ZqTFdKaFkydG5jbTkxYm1RNklDQWdKR0poWTJ0bmNtOTFibVE3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1WEc0Z0lDQWdRR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0pIZGxZbXRwZEMxaVlXTnJaM0p2ZFc1a09pQWtZbUZqYTJkeWIzVnVaRHRjYmlBZ0lDQWdJQ1J6Y0dWakxXSmhZMnRuY205MWJtUTZJQ0FnSkdKaFkydG5jbTkxYm1RN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnSkhkbFltdHBkQzFpWVdOclozSnZkVzVrY3pvZ1lYQndaVzVrS0NSM1pXSnJhWFF0WW1GamEyZHliM1Z1WkhNc0lDUjNaV0pyYVhRdFltRmphMmR5YjNWdVpDd2dZMjl0YldFcE8xeHVJQ0FnSUNSemNHVmpMV0poWTJ0bmNtOTFibVJ6T2lBZ0lHRndjR1Z1WkNna2MzQmxZeTFpWVdOclozSnZkVzVrY3l3Z0lDQWtjM0JsWXkxaVlXTnJaM0p2ZFc1a0xDQWdJR052YlcxaEtUdGNiaUFnZlZ4dVhHNGdJR0poWTJ0bmNtOTFibVE2SUNSM1pXSnJhWFF0WW1GamEyZHliM1Z1WkhNN1hHNGdJR0poWTJ0bmNtOTFibVE2SUNSemNHVmpMV0poWTJ0bmNtOTFibVJ6TzF4dWZWeHVJaXdLQ1FraUx5OHFLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3ZMMXh1THk4Z1FtRmphMmR5YjNWdVpDMXBiV0ZuWlNCd2NtOXdaWEowZVNCbWIzSWdZV1JrYVc1bklHMTFiSFJwY0d4bElHSmhZMnRuY205MWJtUWdhVzFoWjJWeklIZHBkR2hjYmk4dklHZHlZV1JwWlc1MGN5d2diM0lnWm05eUlITjBjbWx1WjJsdVp5QnRkV3gwYVhCc1pTQm5jbUZrYVdWdWRITWdkRzluWlhSb1pYSXVYRzR2THlvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2k4dlhHNWNia0J0YVhocGJpQmlZV05yWjNKdmRXNWtMV2x0WVdkbEtDUnBiV0ZuWlhNdUxpNHBJSHRjYmlBZ0pIZGxZbXRwZEMxcGJXRm5aWE02SUNncE8xeHVJQ0FrYzNCbFl5MXBiV0ZuWlhNNklDZ3BPMXh1WEc0Z0lFQmxZV05vSUNScGJXRm5aU0JwYmlBa2FXMWhaMlZ6SUh0Y2JpQWdJQ0FrZDJWaWEybDBMV2x0WVdkbE9pQW9LVHRjYmlBZ0lDQWtjM0JsWXkxcGJXRm5aVG9nS0NrN1hHNWNiaUFnSUNCQWFXWWdLSFI1Y0dVdGIyWW9KR2x0WVdkbEtTQTlQU0J6ZEhKcGJtY3BJSHRjYmlBZ0lDQWdJQ1IxY213dGMzUnlPaUFnSUNBZ0lDQnpkSEl0YzJ4cFkyVW9KR2x0WVdkbExDQXhMQ0F6S1R0Y2JpQWdJQ0FnSUNSbmNtRmthV1Z1ZEMxMGVYQmxPaUJ6ZEhJdGMyeHBZMlVvSkdsdFlXZGxMQ0F4TENBMktUdGNibHh1SUNBZ0lDQWdRR2xtSUNSMWNtd3RjM1J5SUQwOUlGd2lkWEpzWENJZ2UxeHVJQ0FnSUNBZ0lDQWtkMlZpYTJsMExXbHRZV2RsT2lBa2FXMWhaMlU3WEc0Z0lDQWdJQ0FnSUNSemNHVmpMV2x0WVdkbE9pQWdJQ1JwYldGblpUdGNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdRR1ZzYzJVZ2FXWWdKR2R5WVdScFpXNTBMWFI1Y0dVZ1BUMGdYQ0pzYVc1bFlYSmNJaUI3WEc0Z0lDQWdJQ0FnSUNSbmNtRmthV1Z1ZEhNNklGOXNhVzVsWVhJdFozSmhaR2xsYm5RdGNHRnljMlZ5S0NScGJXRm5aU2s3WEc0Z0lDQWdJQ0FnSUNSM1pXSnJhWFF0YVcxaFoyVTZJQ0J0WVhBdFoyVjBLQ1JuY21Ga2FXVnVkSE1zSUhkbFltdHBkQzFwYldGblpTazdYRzRnSUNBZ0lDQWdJQ1J6Y0dWakxXbHRZV2RsT2lBZ0lDQnRZWEF0WjJWMEtDUm5jbUZrYVdWdWRITXNJSE53WldNdGFXMWhaMlVwTzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCQVpXeHpaU0JwWmlBa1ozSmhaR2xsYm5RdGRIbHdaU0E5UFNCY0luSmhaR2xoYkZ3aUlIdGNiaUFnSUNBZ0lDQWdKR2R5WVdScFpXNTBjem9nWDNKaFpHbGhiQzFuY21Ga2FXVnVkQzF3WVhKelpYSW9KR2x0WVdkbEtUdGNiaUFnSUNBZ0lDQWdKSGRsWW10cGRDMXBiV0ZuWlRvZ2JXRndMV2RsZENna1ozSmhaR2xsYm5SekxDQjNaV0pyYVhRdGFXMWhaMlVwTzF4dUlDQWdJQ0FnSUNBa2MzQmxZeTFwYldGblpUb2dJQ0J0WVhBdFoyVjBLQ1JuY21Ga2FXVnVkSE1zSUhOd1pXTXRhVzFoWjJVcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUNSM1pXSnJhWFF0YVcxaFoyVnpPaUJoY0hCbGJtUW9KSGRsWW10cGRDMXBiV0ZuWlhNc0lDUjNaV0pyYVhRdGFXMWhaMlVzSUdOdmJXMWhLVHRjYmlBZ0lDQWtjM0JsWXkxcGJXRm5aWE02SUNBZ1lYQndaVzVrS0NSemNHVmpMV2x0WVdkbGN5d2dJQ0FrYzNCbFl5MXBiV0ZuWlN3Z0lDQmpiMjF0WVNrN1hHNGdJSDFjYmx4dUlDQmlZV05yWjNKdmRXNWtMV2x0WVdkbE9pQWtkMlZpYTJsMExXbHRZV2RsY3p0Y2JpQWdZbUZqYTJkeWIzVnVaQzFwYldGblpUb2dKSE53WldNdGFXMWhaMlZ6TzF4dWZWeHVJaXdLQ1FraVFHMXBlR2x1SUdKdmNtUmxjaTFwYldGblpTZ2tZbTl5WkdWeWN5NHVMaWtnZTF4dUlDQWtkMlZpYTJsMExXSnZjbVJsY25NNklDZ3BPMXh1SUNBa2MzQmxZeTFpYjNKa1pYSnpPaUFvS1R0Y2JseHVJQ0JBWldGamFDQWtZbTl5WkdWeUlHbHVJQ1JpYjNKa1pYSnpJSHRjYmlBZ0lDQWtkMlZpYTJsMExXSnZjbVJsY2pvZ0tDazdYRzRnSUNBZ0pITndaV010WW05eVpHVnlPaUFvS1R0Y2JpQWdJQ0FrWW05eVpHVnlMWFI1Y0dVNklIUjVjR1V0YjJZb0pHSnZjbVJsY2lrN1hHNWNiaUFnSUNCQWFXWWdKR0p2Y21SbGNpMTBlWEJsSUQwOUlITjBjbWx1WnlCdmNpQnNhWE4wSUh0Y2JpQWdJQ0FnSUNSaWIzSmtaWEl0YzNSeU9pQnBaaWdrWW05eVpHVnlMWFI1Y0dVZ1BUMGdiR2x6ZEN3Z2JuUm9LQ1JpYjNKa1pYSXNJREVwTENBa1ltOXlaR1Z5S1R0Y2JseHVJQ0FnSUNBZ0pIVnliQzF6ZEhJNklDQWdJQ0FnSUhOMGNpMXpiR2xqWlNna1ltOXlaR1Z5TFhOMGNpd2dNU3dnTXlrN1hHNGdJQ0FnSUNBa1ozSmhaR2xsYm5RdGRIbHdaVG9nYzNSeUxYTnNhV05sS0NSaWIzSmtaWEl0YzNSeUxDQXhMQ0EyS1R0Y2JseHVJQ0FnSUNBZ1FHbG1JQ1IxY213dGMzUnlJRDA5SUZ3aWRYSnNYQ0lnZTF4dUlDQWdJQ0FnSUNBa2QyVmlhMmwwTFdKdmNtUmxjam9nSkdKdmNtUmxjanRjYmlBZ0lDQWdJQ0FnSkhOd1pXTXRZbTl5WkdWeU9pQWdJQ1JpYjNKa1pYSTdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJRUJsYkhObElHbG1JQ1JuY21Ga2FXVnVkQzEwZVhCbElEMDlJRndpYkdsdVpXRnlYQ0lnZTF4dUlDQWdJQ0FnSUNBa1ozSmhaR2xsYm5Sek9pQmZiR2x1WldGeUxXZHlZV1JwWlc1MExYQmhjbk5sY2loY0lpTjdKR0p2Y21SbGNuMWNJaWs3WEc0Z0lDQWdJQ0FnSUNSM1pXSnJhWFF0WW05eVpHVnlPaUJ0WVhBdFoyVjBLQ1JuY21Ga2FXVnVkSE1zSUhkbFltdHBkQzFwYldGblpTazdYRzRnSUNBZ0lDQWdJQ1J6Y0dWakxXSnZjbVJsY2pvZ0lDQnRZWEF0WjJWMEtDUm5jbUZrYVdWdWRITXNJSE53WldNdGFXMWhaMlVwTzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCQVpXeHpaU0JwWmlBa1ozSmhaR2xsYm5RdGRIbHdaU0E5UFNCY0luSmhaR2xoYkZ3aUlIdGNiaUFnSUNBZ0lDQWdKR2R5WVdScFpXNTBjem9nWDNKaFpHbGhiQzFuY21Ga2FXVnVkQzF3WVhKelpYSW9YQ0lqZXlSaWIzSmtaWEo5WENJcE8xeHVJQ0FnSUNBZ0lDQWtkMlZpYTJsMExXSnZjbVJsY2pvZ2JXRndMV2RsZENna1ozSmhaR2xsYm5SekxDQjNaV0pyYVhRdGFXMWhaMlVwTzF4dUlDQWdJQ0FnSUNBa2MzQmxZeTFpYjNKa1pYSTZJQ0FnYldGd0xXZGxkQ2drWjNKaFpHbGxiblJ6TENCemNHVmpMV2x0WVdkbEtUdGNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdRR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWtkMlZpYTJsMExXSnZjbVJsY2pvZ0pHSnZjbVJsY2p0Y2JpQWdJQ0FnSUNBZ0pITndaV010WW05eVpHVnlPaUFnSUNSaWIzSmtaWEk3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1WEc0Z0lDQWdRR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0pIZGxZbXRwZEMxaWIzSmtaWEk2SUNSaWIzSmtaWEk3WEc0Z0lDQWdJQ0FrYzNCbFl5MWliM0prWlhJNklDQWdKR0p2Y21SbGNqdGNiaUFnSUNCOVhHNWNiaUFnSUNBa2QyVmlhMmwwTFdKdmNtUmxjbk02SUdGd2NHVnVaQ2drZDJWaWEybDBMV0p2Y21SbGNuTXNJQ1IzWldKcmFYUXRZbTl5WkdWeUxDQmpiMjF0WVNrN1hHNGdJQ0FnSkhOd1pXTXRZbTl5WkdWeWN6b2dJQ0JoY0hCbGJtUW9KSE53WldNdFltOXlaR1Z5Y3l3Z0lDQWtjM0JsWXkxaWIzSmtaWElzSUNBZ1kyOXRiV0VwTzF4dUlDQjlYRzVjYmlBZ0xYZGxZbXRwZEMxaWIzSmtaWEl0YVcxaFoyVTZJQ1IzWldKcmFYUXRZbTl5WkdWeWN6dGNiaUFnSUNBZ0lDQWdJQ0JpYjNKa1pYSXRhVzFoWjJVNklDUnpjR1ZqTFdKdmNtUmxjbk03WEc0Z0lDQWdJQ0FnSUNBZ1ltOXlaR1Z5TFhOMGVXeGxPaUJ6YjJ4cFpEdGNibjFjYmx4dUx5OUZlR0Z0Y0d4bGN6cGNiaTh2SUVCcGJtTnNkV1JsSUdKdmNtUmxjaTFwYldGblpTaDFjbXdvWENKcGJXRm5aUzV3Ym1kY0lpa3BPMXh1THk4Z1FHbHVZMngxWkdVZ1ltOXlaR1Z5TFdsdFlXZGxLSFZ5YkNoY0ltbHRZV2RsTG5CdVoxd2lLU0F5TUNCemRISmxkR05vS1R0Y2JpOHZJRUJwYm1Oc2RXUmxJR0p2Y21SbGNpMXBiV0ZuWlNoc2FXNWxZWEl0WjNKaFpHbGxiblFvTkRWa1pXY3NJRzl5WVc1blpTd2dlV1ZzYkc5M0tTazdYRzR2THlCQWFXNWpiSFZrWlNCaWIzSmtaWEl0YVcxaFoyVW9iR2x1WldGeUxXZHlZV1JwWlc1MEtEUTFaR1ZuTENCdmNtRnVaMlVzSUhsbGJHeHZkeWtnYzNSeVpYUmphQ2s3WEc0dkx5QkFhVzVqYkhWa1pTQmliM0prWlhJdGFXMWhaMlVvYkdsdVpXRnlMV2R5WVdScFpXNTBLRFExWkdWbkxDQnZjbUZ1WjJVc0lIbGxiR3h2ZHlrZ01qQWdNekFnTkRBZ05UQWdjM1J5WlhSamFDQnliM1Z1WkNrN1hHNHZMeUJBYVc1amJIVmtaU0JpYjNKa1pYSXRhVzFoWjJVb2NtRmthV0ZzTFdkeVlXUnBaVzUwS0hSdmNDd2dZMjkyWlhJc0lHOXlZVzVuWlN3Z2VXVnNiRzkzTENCdmNtRnVaMlVwS1R0Y2JpSXNDZ2tKSWtCdGFYaHBiaUJqWVd4aktDUndjbTl3WlhKMGVTd2dKSFpoYkhWbEtTQjdYRzRnSUNON0pIQnliM0JsY25SNWZUb2dMWGRsWW10cGRDMWpZV3hqS0NON0pIWmhiSFZsZlNrN1hHNGdJQ043SkhCeWIzQmxjblI1ZlRvZ1kyRnNZeWdqZXlSMllXeDFaWDBwTzF4dWZWeHVJaXdLQ1FraVFHMXBlR2x1SUdOdmJIVnRibk1vSkdGeVp6b2dZWFYwYnlrZ2UxeHVJQ0F2THlBOFkyOXNkVzF1TFdOdmRXNTBQaUI4ZkNBOFkyOXNkVzF1TFhkcFpIUm9QbHh1SUNCQWFXNWpiSFZrWlNCd2NtVm1hWGhsY2loamIyeDFiVzV6TENBa1lYSm5MQ0IzWldKcmFYUWdiVzk2SUhOd1pXTXBPMXh1ZlZ4dVhHNUFiV2w0YVc0Z1kyOXNkVzF1TFdOdmRXNTBLQ1JwYm5RNklHRjFkRzhwSUh0Y2JpQWdMeThnWVhWMGJ5QjhmQ0JwYm5SbFoyVnlYRzRnSUVCcGJtTnNkV1JsSUhCeVpXWnBlR1Z5S0dOdmJIVnRiaTFqYjNWdWRDd2dKR2x1ZEN3Z2QyVmlhMmwwSUcxdmVpQnpjR1ZqS1R0Y2JuMWNibHh1UUcxcGVHbHVJR052YkhWdGJpMW5ZWEFvSkd4bGJtZDBhRG9nYm05eWJXRnNLU0I3WEc0Z0lDOHZJRzV2Y20xaGJDQjhmQ0JzWlc1bmRHaGNiaUFnUUdsdVkyeDFaR1VnY0hKbFptbDRaWElvWTI5c2RXMXVMV2RoY0N3Z0pHeGxibWQwYUN3Z2QyVmlhMmwwSUcxdmVpQnpjR1ZqS1R0Y2JuMWNibHh1UUcxcGVHbHVJR052YkhWdGJpMW1hV3hzS0NSaGNtYzZJR0YxZEc4cElIdGNiaUFnTHk4Z1lYVjBieUI4ZkNCc1pXNW5kR2hjYmlBZ1FHbHVZMngxWkdVZ2NISmxabWw0WlhJb1kyOXNkVzF1TFdacGJHd3NJQ1JoY21jc0lIZGxZbXRwZENCdGIzb2djM0JsWXlrN1hHNTlYRzVjYmtCdGFYaHBiaUJqYjJ4MWJXNHRjblZzWlNna1lYSm5LU0I3WEc0Z0lDOHZJRHhpYjNKa1pYSXRkMmxrZEdnK0lIeDhJRHhpYjNKa1pYSXRjM1I1YkdVK0lIeDhJRHhqYjJ4dmNqNWNiaUFnUUdsdVkyeDFaR1VnY0hKbFptbDRaWElvWTI5c2RXMXVMWEoxYkdVc0lDUmhjbWNzSUhkbFltdHBkQ0J0YjNvZ2MzQmxZeWs3WEc1OVhHNWNia0J0YVhocGJpQmpiMngxYlc0dGNuVnNaUzFqYjJ4dmNpZ2tZMjlzYjNJcElIdGNiaUFnUUdsdVkyeDFaR1VnY0hKbFptbDRaWElvWTI5c2RXMXVMWEoxYkdVdFkyOXNiM0lzSUNSamIyeHZjaXdnZDJWaWEybDBJRzF2ZWlCemNHVmpLVHRjYm4xY2JseHVRRzFwZUdsdUlHTnZiSFZ0YmkxeWRXeGxMWE4wZVd4bEtDUnpkSGxzWlRvZ2JtOXVaU2tnZTF4dUlDQXZMeUJ1YjI1bElId2dhR2xrWkdWdUlId2daR0Z6YUdWa0lId2daRzkwZEdWa0lId2daRzkxWW14bElId2daM0p2YjNabElId2dhVzV6WlhRZ2ZDQnBibk5sZENCOElHOTFkSE5sZENCOElISnBaR2RsSUh3Z2MyOXNhV1JjYmlBZ1FHbHVZMngxWkdVZ2NISmxabWw0WlhJb1kyOXNkVzF1TFhKMWJHVXRjM1I1YkdVc0lDUnpkSGxzWlN3Z2QyVmlhMmwwSUcxdmVpQnpjR1ZqS1R0Y2JuMWNibHh1UUcxcGVHbHVJR052YkhWdGJpMXlkV3hsTFhkcFpIUm9JQ2drZDJsa2RHZzZJRzV2Ym1VcElIdGNiaUFnUUdsdVkyeDFaR1VnY0hKbFptbDRaWElvWTI5c2RXMXVMWEoxYkdVdGQybGtkR2dzSUNSM2FXUjBhQ3dnZDJWaWEybDBJRzF2ZWlCemNHVmpLVHRjYm4xY2JseHVRRzFwZUdsdUlHTnZiSFZ0YmkxemNHRnVLQ1JoY21jNklHNXZibVVwSUh0Y2JpQWdMeThnYm05dVpTQjhmQ0JoYkd4Y2JpQWdRR2x1WTJ4MVpHVWdjSEpsWm1sNFpYSW9ZMjlzZFcxdUxYTndZVzRzSUNSaGNtY3NJSGRsWW10cGRDQnRiM29nYzNCbFl5azdYRzU5WEc1Y2JrQnRhWGhwYmlCamIyeDFiVzR0ZDJsa2RHZ29KR3hsYm1kMGFEb2dZWFYwYnlrZ2UxeHVJQ0F2THlCaGRYUnZJSHg4SUd4bGJtZDBhRnh1SUNCQWFXNWpiSFZrWlNCd2NtVm1hWGhsY2loamIyeDFiVzR0ZDJsa2RHZ3NJQ1JzWlc1bmRHZ3NJSGRsWW10cGRDQnRiM29nYzNCbFl5azdYRzU5WEc0aUxBb0pDU0pBYldsNGFXNGdabWxzZEdWeUtDUm1kVzVqZEdsdmJqb2dibTl1WlNrZ2UxeHVJQ0F2THlBOFptbHNkR1Z5TFdaMWJtTjBhVzl1UGlCYlBHWnBiSFJsY2kxbWRXNWpkR2x2YmwwcUlId2dibTl1WlZ4dUlDQkFhVzVqYkhWa1pTQndjbVZtYVhobGNpaG1hV3gwWlhJc0lDUm1kVzVqZEdsdmJpd2dkMlZpYTJsMElITndaV01wTzF4dWZWeHVJaXdLQ1FraUx5OGdRMU5UTXlCR2JHVjRhV0pzWlNCQ2IzZ2dUVzlrWld3Z1lXNWtJSEJ5YjNCbGNuUjVJR1JsWm1GMWJIUnpYRzVjYmk4dklFTjFjM1J2YlNCemFHOXlkR2hoYm1RZ2JtOTBZWFJwYjI0Z1ptOXlJR1pzWlhoaWIzaGNia0J0YVhocGJpQmliM2dvSkc5eWFXVnVkRG9nYVc1c2FXNWxMV0Y0YVhNc0lDUndZV05yT2lCemRHRnlkQ3dnSkdGc2FXZHVPaUJ6ZEhKbGRHTm9LU0I3WEc0Z0lFQnBibU5zZFdSbElHUnBjM0JzWVhrdFltOTRPMXh1SUNCQWFXNWpiSFZrWlNCaWIzZ3RiM0pwWlc1MEtDUnZjbWxsYm5RcE8xeHVJQ0JBYVc1amJIVmtaU0JpYjNndGNHRmpheWdrY0dGamF5azdYRzRnSUVCcGJtTnNkV1JsSUdKdmVDMWhiR2xuYmlna1lXeHBaMjRwTzF4dWZWeHVYRzVBYldsNGFXNGdaR2x6Y0d4aGVTMWliM2dnZTF4dUlDQmthWE53YkdGNU9pQXRkMlZpYTJsMExXSnZlRHRjYmlBZ1pHbHpjR3hoZVRvZ0xXMXZlaTFpYjNnN1hHNGdJR1JwYzNCc1lYazZJQzF0Y3kxbWJHVjRZbTk0T3lBdkx5QkpSU0F4TUZ4dUlDQmthWE53YkdGNU9pQmliM2c3WEc1OVhHNWNia0J0YVhocGJpQmliM2d0YjNKcFpXNTBLQ1J2Y21sbGJuUTZJR2x1YkdsdVpTMWhlR2x6S1NCN1hHNHZMeUJvYjNKcGVtOXVkR0ZzZkhabGNuUnBZMkZzZkdsdWJHbHVaUzFoZUdsemZHSnNiMk5yTFdGNGFYTjhhVzVvWlhKcGRGeHVJQ0JBYVc1amJIVmtaU0J3Y21WbWFYaGxjaWhpYjNndGIzSnBaVzUwTENBa2IzSnBaVzUwTENCM1pXSnJhWFFnYlc5NklITndaV01wTzF4dWZWeHVYRzVBYldsNGFXNGdZbTk0TFhCaFkyc29KSEJoWTJzNklITjBZWEowS1NCN1hHNHZMeUJ6ZEdGeWRIeGxibVI4WTJWdWRHVnlmR3AxYzNScFpubGNiaUFnUUdsdVkyeDFaR1VnY0hKbFptbDRaWElvWW05NExYQmhZMnNzSUNSd1lXTnJMQ0IzWldKcmFYUWdiVzk2SUhOd1pXTXBPMXh1SUNBdGJYTXRabXhsZUMxd1lXTnJPaUFrY0dGamF6c2dMeThnU1VVZ01UQmNibjFjYmx4dVFHMXBlR2x1SUdKdmVDMWhiR2xuYmlna1lXeHBaMjQ2SUhOMGNtVjBZMmdwSUh0Y2JpOHZJSE4wWVhKMGZHVnVaSHhqWlc1MFpYSjhZbUZ6Wld4cGJtVjhjM1J5WlhSamFGeHVJQ0JBYVc1amJIVmtaU0J3Y21WbWFYaGxjaWhpYjNndFlXeHBaMjRzSUNSaGJHbG5iaXdnZDJWaWEybDBJRzF2ZWlCemNHVmpLVHRjYmlBZ0xXMXpMV1pzWlhndFlXeHBaMjQ2SUNSaGJHbG5ianNnTHk4Z1NVVWdNVEJjYm4xY2JseHVRRzFwZUdsdUlHSnZlQzFrYVhKbFkzUnBiMjRvSkdScGNtVmpkR2x2YmpvZ2JtOXliV0ZzS1NCN1hHNHZMeUJ1YjNKdFlXeDhjbVYyWlhKelpYeHBibWhsY21sMFhHNGdJRUJwYm1Oc2RXUmxJSEJ5WldacGVHVnlLR0p2ZUMxa2FYSmxZM1JwYjI0c0lDUmthWEpsWTNScGIyNHNJSGRsWW10cGRDQnRiM29nYzNCbFl5azdYRzRnSUMxdGN5MW1iR1Y0TFdScGNtVmpkR2x2YmpvZ0pHUnBjbVZqZEdsdmJqc2dMeThnU1VVZ01UQmNibjFjYmx4dVFHMXBlR2x1SUdKdmVDMXNhVzVsY3lna2JHbHVaWE02SUhOcGJtZHNaU2tnZTF4dUx5OGdjMmx1WjJ4bGZHMTFiSFJwY0d4bFhHNGdJRUJwYm1Oc2RXUmxJSEJ5WldacGVHVnlLR0p2ZUMxc2FXNWxjeXdnSkd4cGJtVnpMQ0IzWldKcmFYUWdiVzk2SUhOd1pXTXBPMXh1ZlZ4dVhHNUFiV2w0YVc0Z1ltOTRMVzl5WkdsdVlXd3RaM0p2ZFhBb0pHbHVkRG9nTVNrZ2UxeHVJQ0JBYVc1amJIVmtaU0J3Y21WbWFYaGxjaWhpYjNndGIzSmthVzVoYkMxbmNtOTFjQ3dnSkdsdWRDd2dkMlZpYTJsMElHMXZlaUJ6Y0dWaktUdGNiaUFnTFcxekxXWnNaWGd0YjNKa1pYSTZJQ1JwYm5RN0lDOHZJRWxGSURFd1hHNTlYRzVjYmtCdGFYaHBiaUJpYjNndFpteGxlQ2drZG1Gc2RXVTZJREFwSUh0Y2JpQWdRR2x1WTJ4MVpHVWdjSEpsWm1sNFpYSW9ZbTk0TFdac1pYZ3NJQ1IyWVd4MVpTd2dkMlZpYTJsMElHMXZlaUJ6Y0dWaktUdGNiaUFnTFcxekxXWnNaWGc2SUNSMllXeDFaVHNnTHk4Z1NVVWdNVEJjYm4xY2JseHVRRzFwZUdsdUlHSnZlQzFtYkdWNExXZHliM1Z3S0NScGJuUTZJREVwSUh0Y2JpQWdRR2x1WTJ4MVpHVWdjSEpsWm1sNFpYSW9ZbTk0TFdac1pYZ3RaM0p2ZFhBc0lDUnBiblFzSUhkbFltdHBkQ0J0YjNvZ2MzQmxZeWs3WEc1OVhHNWNiaTh2SUVOVFV6TWdSbXhsZUdsaWJHVWdRbTk0SUUxdlpHVnNJR0Z1WkNCd2NtOXdaWEowZVNCa1pXWmhkV3gwYzF4dUx5OGdWVzVwWm1sbFpDQmhkSFJ5YVdKMWRHVnpJR1p2Y2lBeU1EQTVMQ0F5TURFeExDQmhibVFnTWpBeE1pQm1iR0YyYjNWeWN5NWNibHh1THk4Z01qQXdPU0F0SUdScGMzQnNZWGtnS0dKdmVDQjhJR2x1YkdsdVpTMWliM2dwWEc0dkx5QXlNREV4SUMwZ1pHbHpjR3hoZVNBb1pteGxlR0p2ZUNCOElHbHViR2x1WlMxbWJHVjRZbTk0S1Z4dUx5OGdNakF4TWlBdElHUnBjM0JzWVhrZ0tHWnNaWGdnZkNCcGJteHBibVV0Wm14bGVDbGNia0J0YVhocGJpQmthWE53YkdGNUtDUjJZV3gxWlNrZ2UxeHVMeThnWm14bGVDQjhJR2x1YkdsdVpTMW1iR1Y0WEc0Z0lFQnBaaUFrZG1Gc2RXVWdQVDBnWENKbWJHVjRYQ0lnZTF4dUlDQWdJQzh2SURJd01EbGNiaUFnSUNCa2FYTndiR0Y1T2lBdGQyVmlhMmwwTFdKdmVEdGNiaUFnSUNCa2FYTndiR0Y1T2lBdGJXOTZMV0p2ZUR0Y2JpQWdJQ0JrYVhOd2JHRjVPaUJpYjNnN1hHNWNiaUFnSUNBdkx5QXlNREV5WEc0Z0lDQWdaR2x6Y0d4aGVUb2dMWGRsWW10cGRDMW1iR1Y0TzF4dUlDQWdJR1JwYzNCc1lYazZJQzF0YjNvdFpteGxlRHRjYmlBZ0lDQmthWE53YkdGNU9pQXRiWE10Wm14bGVHSnZlRHNnTHk4Z01qQXhNU0FvU1VVZ01UQXBYRzRnSUNBZ1pHbHpjR3hoZVRvZ1pteGxlRHRjYmlBZ2ZTQkFaV3h6WlNCcFppQWtkbUZzZFdVZ1BUMGdYQ0pwYm14cGJtVXRabXhsZUZ3aUlIdGNiaUFnSUNCa2FYTndiR0Y1T2lBdGQyVmlhMmwwTFdsdWJHbHVaUzFpYjNnN1hHNGdJQ0FnWkdsemNHeGhlVG9nTFcxdmVpMXBibXhwYm1VdFltOTRPMXh1SUNBZ0lHUnBjM0JzWVhrNklHbHViR2x1WlMxaWIzZzdYRzVjYmlBZ0lDQmthWE53YkdGNU9pQXRkMlZpYTJsMExXbHViR2x1WlMxbWJHVjRPMXh1SUNBZ0lHUnBjM0JzWVhrNklDMXRiM290YVc1c2FXNWxMV1pzWlhnN1hHNGdJQ0FnWkdsemNHeGhlVG9nTFcxekxXbHViR2x1WlMxbWJHVjRZbTk0TzF4dUlDQWdJR1JwYzNCc1lYazZJR2x1YkdsdVpTMW1iR1Y0TzF4dUlDQjlJRUJsYkhObElIdGNiaUFnSUNCa2FYTndiR0Y1T2lBa2RtRnNkV1U3WEc0Z0lIMWNibjFjYmx4dUx5OGdNakF3T1NBdElHSnZlQzFtYkdWNElDaHBiblJsWjJWeUtWeHVMeThnTWpBeE1TQXRJR1pzWlhnZ0tHUmxZMmx0WVd3Z2ZDQjNhV1IwYUNCa1pXTnBiV0ZzS1Z4dUx5OGdNakF4TWlBdElHWnNaWGdnS0dsdWRHVm5aWElnYVc1MFpXZGxjaUIzYVdSMGFDbGNia0J0YVhocGJpQm1iR1Y0S0NSMllXeDFaU2tnZTF4dVhHNGdJQzh2SUVkeVlXSWdabXhsZUMxbmNtOTNJR1p2Y2lCdmJHUmxjaUJpY205M2MyVnljeTVjYmlBZ0pHWnNaWGd0WjNKdmR6b2diblJvS0NSMllXeDFaU3dnTVNrN1hHNWNiaUFnTHk4Z01qQXdPVnh1SUNCQWFXNWpiSFZrWlNCd2NtVm1hWGhsY2loaWIzZ3RabXhsZUN3Z0pHWnNaWGd0WjNKdmR5d2dkMlZpYTJsMElHMXZlaUJ6Y0dWaktUdGNibHh1SUNBdkx5QXlNREV4SUNoSlJTQXhNQ2tzSURJd01USmNiaUFnUUdsdVkyeDFaR1VnY0hKbFptbDRaWElvWm14bGVDd2dKSFpoYkhWbExDQjNaV0pyYVhRZ2JXOTZJRzF6SUhOd1pXTXBPMXh1ZlZ4dVhHNHZMeUF5TURBNUlDMGdZbTk0TFc5eWFXVnVkQ0FvSUdodmNtbDZiMjUwWVd3Z2ZDQjJaWEowYVdOaGJDQjhJR2x1YkdsdVpTMWhlR2x6SUh3Z1lteHZZMnN0WVhocGN5bGNiaTh2SUNBZ0lDQWdMU0JpYjNndFpHbHlaV04wYVc5dUlDaHViM0p0WVd3Z2ZDQnlaWFpsY25ObEtWeHVMeThnTWpBeE1TQXRJR1pzWlhndFpHbHlaV04wYVc5dUlDaHliM2NnZkNCeWIzY3RjbVYyWlhKelpTQjhJR052YkhWdGJpQjhJR052YkhWdGJpMXlaWFpsY25ObEtWeHVMeThnTWpBeE1pQXRJR1pzWlhndFpHbHlaV04wYVc5dUlDaHliM2NnZkNCeWIzY3RjbVYyWlhKelpTQjhJR052YkhWdGJpQjhJR052YkhWdGJpMXlaWFpsY25ObEtWeHVRRzFwZUdsdUlHWnNaWGd0WkdseVpXTjBhVzl1S0NSMllXeDFaVG9nY205M0tTQjdYRzVjYmlBZ0x5OGdRV3gwSUhaaGJIVmxjeTVjYmlBZ0pIWmhiSFZsTFRJd01EazZJQ1IyWVd4MVpUdGNiaUFnSkhaaGJIVmxMVEl3TVRFNklDUjJZV3gxWlR0Y2JpQWdKR1JwY21WamRHbHZiam9nYm05eWJXRnNPMXh1WEc0Z0lFQnBaaUFrZG1Gc2RXVWdQVDBnY205M0lIdGNiaUFnSUNBa2RtRnNkV1V0TWpBd09Ub2dhRzl5YVhwdmJuUmhiRHRjYmlBZ2ZTQkFaV3h6WlNCcFppQWtkbUZzZFdVZ1BUMGdYQ0p5YjNjdGNtVjJaWEp6WlZ3aUlIdGNiaUFnSUNBa2RtRnNkV1V0TWpBd09Ub2dhRzl5YVhwdmJuUmhiRHRjYmlBZ0lDQWtaR2x5WldOMGFXOXVPaUJ5WlhabGNuTmxPMXh1SUNCOUlFQmxiSE5sSUdsbUlDUjJZV3gxWlNBOVBTQmpiMngxYlc0Z2UxeHVJQ0FnSUNSMllXeDFaUzB5TURBNU9pQjJaWEowYVdOaGJEdGNiaUFnZlNCQVpXeHpaU0JwWmlBa2RtRnNkV1VnUFQwZ1hDSmpiMngxYlc0dGNtVjJaWEp6WlZ3aUlIdGNiaUFnSUNBa2RtRnNkV1V0TWpBd09Ub2dkbVZ5ZEdsallXdzdYRzRnSUNBZ0pHUnBjbVZqZEdsdmJqb2djbVYyWlhKelpUdGNiaUFnZlZ4dVhHNGdJQzh2SURJd01EbGNiaUFnUUdsdVkyeDFaR1VnY0hKbFptbDRaWElvWW05NExXOXlhV1Z1ZEN3Z0pIWmhiSFZsTFRJd01Ea3NJSGRsWW10cGRDQnRiM29nYzNCbFl5azdYRzRnSUVCcGJtTnNkV1JsSUhCeVpXWnBlR1Z5S0dKdmVDMWthWEpsWTNScGIyNHNJQ1JrYVhKbFkzUnBiMjRzSUhkbFltdHBkQ0J0YjNvZ2MzQmxZeWs3WEc1Y2JpQWdMeThnTWpBeE1seHVJQ0JBYVc1amJIVmtaU0J3Y21WbWFYaGxjaWhtYkdWNExXUnBjbVZqZEdsdmJpd2dKSFpoYkhWbExDQjNaV0pyYVhRZ2JXOTZJSE53WldNcE8xeHVYRzRnSUM4dklESXdNVEVnS0VsRklERXdLVnh1SUNBdGJYTXRabXhsZUMxa2FYSmxZM1JwYjI0NklDUjJZV3gxWlR0Y2JuMWNibHh1THk4Z01qQXdPU0F0SUdKdmVDMXNhVzVsY3lBb2MybHVaMnhsSUh3Z2JYVnNkR2x3YkdVcFhHNHZMeUF5TURFeElDMGdabXhsZUMxM2NtRndJQ2h1YjNkeVlYQWdmQ0IzY21Gd0lId2dkM0poY0MxeVpYWmxjbk5sS1Z4dUx5OGdNakF4TWlBdElHWnNaWGd0ZDNKaGNDQW9ibTkzY21Gd0lId2dkM0poY0NCOElIZHlZWEF0Y21WMlpYSnpaU2xjYmtCdGFYaHBiaUJtYkdWNExYZHlZWEFvSkhaaGJIVmxPaUJ1YjNkeVlYQXBJSHRjYmlBZ0x5OGdRV3gwSUhaaGJIVmxjMXh1SUNBa1lXeDBMWFpoYkhWbE9pQWtkbUZzZFdVN1hHNGdJRUJwWmlBa2RtRnNkV1VnUFQwZ2JtOTNjbUZ3SUh0Y2JpQWdJQ0FrWVd4MExYWmhiSFZsT2lCemFXNW5iR1U3WEc0Z0lIMGdRR1ZzYzJVZ2FXWWdKSFpoYkhWbElEMDlJSGR5WVhBZ2UxeHVJQ0FnSUNSaGJIUXRkbUZzZFdVNklHMTFiSFJwY0d4bE8xeHVJQ0I5SUVCbGJITmxJR2xtSUNSMllXeDFaU0E5UFNCY0luZHlZWEF0Y21WMlpYSnpaVndpSUh0Y2JpQWdJQ0FrWVd4MExYWmhiSFZsT2lCdGRXeDBhWEJzWlR0Y2JpQWdmVnh1WEc0Z0lFQnBibU5zZFdSbElIQnlaV1pwZUdWeUtHSnZlQzFzYVc1bGN5d2dKR0ZzZEMxMllXeDFaU3dnZDJWaWEybDBJRzF2ZWlCemNHVmpLVHRjYmlBZ1FHbHVZMngxWkdVZ2NISmxabWw0WlhJb1pteGxlQzEzY21Gd0xDQWtkbUZzZFdVc0lIZGxZbXRwZENCdGIzb2diWE1nYzNCbFl5azdYRzU5WEc1Y2JpOHZJREl3TURrZ0xTQlVUMFJQT2lCd1lYSnpaU0IyWVd4MVpYTWdhVzUwYnlCbWJHVjRMV1JwY21WamRHbHZiaTltYkdWNExYZHlZWEJjYmk4dklESXdNVEVnTFNCVVQwUlBPaUJ3WVhKelpTQjJZV3gxWlhNZ2FXNTBieUJtYkdWNExXUnBjbVZqZEdsdmJpOW1iR1Y0TFhkeVlYQmNiaTh2SURJd01USWdMU0JtYkdWNExXWnNiM2NnS0dac1pYZ3RaR2x5WldOMGFXOXVJSHg4SUdac1pYZ3RkM0poY0NsY2JrQnRhWGhwYmlCbWJHVjRMV1pzYjNjb0pIWmhiSFZsS1NCN1hHNGdJRUJwYm1Oc2RXUmxJSEJ5WldacGVHVnlLR1pzWlhndFpteHZkeXdnSkhaaGJIVmxMQ0IzWldKcmFYUWdiVzk2SUhOd1pXTXBPMXh1ZlZ4dVhHNHZMeUF5TURBNUlDMGdZbTk0TFc5eVpHbHVZV3d0WjNKdmRYQWdLR2x1ZEdWblpYSXBYRzR2THlBeU1ERXhJQzBnWm14bGVDMXZjbVJsY2lBb2FXNTBaV2RsY2lsY2JpOHZJREl3TVRJZ0xTQnZjbVJsY2lBb2FXNTBaV2RsY2lsY2JrQnRhWGhwYmlCdmNtUmxjaWdrYVc1ME9pQXdLU0I3WEc0Z0lDOHZJREl3TURsY2JpQWdRR2x1WTJ4MVpHVWdjSEpsWm1sNFpYSW9ZbTk0TFc5eVpHbHVZV3d0WjNKdmRYQXNJQ1JwYm5Rc0lIZGxZbXRwZENCdGIzb2djM0JsWXlrN1hHNWNiaUFnTHk4Z01qQXhNbHh1SUNCQWFXNWpiSFZrWlNCd2NtVm1hWGhsY2lodmNtUmxjaXdnSkdsdWRDd2dkMlZpYTJsMElHMXZlaUJ6Y0dWaktUdGNibHh1SUNBdkx5QXlNREV4SUNoSlJTQXhNQ2xjYmlBZ0xXMXpMV1pzWlhndGIzSmtaWEk2SUNScGJuUTdYRzU5WEc1Y2JpOHZJREl3TVRJZ0xTQm1iR1Y0TFdkeWIzY2dLRzUxYldKbGNpbGNia0J0YVhocGJpQm1iR1Y0TFdkeWIzY29KRzUxYldKbGNqb2dNQ2tnZTF4dUlDQkFhVzVqYkhWa1pTQndjbVZtYVhobGNpaG1iR1Y0TFdkeWIzY3NJQ1J1ZFcxaVpYSXNJSGRsWW10cGRDQnRiM29nYzNCbFl5azdYRzRnSUMxdGN5MW1iR1Y0TFhCdmMybDBhWFpsT2lBa2JuVnRZbVZ5TzF4dWZWeHVYRzR2THlBeU1ERXlJQzBnWm14bGVDMXphSEpwYm1zZ0tHNTFiV0psY2lsY2JrQnRhWGhwYmlCbWJHVjRMWE5vY21sdWF5Z2tiblZ0WW1WeU9pQXhLU0I3WEc0Z0lFQnBibU5zZFdSbElIQnlaV1pwZUdWeUtHWnNaWGd0YzJoeWFXNXJMQ0FrYm5WdFltVnlMQ0IzWldKcmFYUWdiVzk2SUhOd1pXTXBPMXh1SUNBdGJYTXRabXhsZUMxdVpXZGhkR2wyWlRvZ0pHNTFiV0psY2p0Y2JuMWNibHh1THk4Z01qQXhNaUF0SUdac1pYZ3RZbUZ6YVhNZ0tHNTFiV0psY2lsY2JrQnRhWGhwYmlCbWJHVjRMV0poYzJsektDUjNhV1IwYURvZ1lYVjBieWtnZTF4dUlDQkFhVzVqYkhWa1pTQndjbVZtYVhobGNpaG1iR1Y0TFdKaGMybHpMQ0FrZDJsa2RHZ3NJSGRsWW10cGRDQnRiM29nYzNCbFl5azdYRzRnSUMxdGN5MW1iR1Y0TFhCeVpXWmxjbkpsWkMxemFYcGxPaUFrZDJsa2RHZzdYRzU5WEc1Y2JpOHZJREl3TURrZ0xTQmliM2d0Y0dGamF5QW9jM1JoY25RZ2ZDQmxibVFnZkNCalpXNTBaWElnZkNCcWRYTjBhV1o1S1Z4dUx5OGdNakF4TVNBdElHWnNaWGd0Y0dGamF5QW9jM1JoY25RZ2ZDQmxibVFnZkNCalpXNTBaWElnZkNCcWRYTjBhV1o1S1Z4dUx5OGdNakF4TWlBdElHcDFjM1JwWm5rdFkyOXVkR1Z1ZENBb1pteGxlQzF6ZEdGeWRDQjhJR1pzWlhndFpXNWtJSHdnWTJWdWRHVnlJSHdnYzNCaFkyVXRZbVYwZDJWbGJpQjhJSE53WVdObExXRnliM1Z1WkNsY2JrQnRhWGhwYmlCcWRYTjBhV1o1TFdOdmJuUmxiblFvSkhaaGJIVmxPaUJtYkdWNExYTjBZWEowS1NCN1hHNWNiaUFnTHk4Z1FXeDBJSFpoYkhWbGN5NWNiaUFnSkdGc2RDMTJZV3gxWlRvZ0pIWmhiSFZsTzF4dUlDQkFhV1lnSkhaaGJIVmxJRDA5SUZ3aVpteGxlQzF6ZEdGeWRGd2lJSHRjYmlBZ0lDQWtZV3gwTFhaaGJIVmxPaUJ6ZEdGeWREdGNiaUFnZlNCQVpXeHpaU0JwWmlBa2RtRnNkV1VnUFQwZ1hDSm1iR1Y0TFdWdVpGd2lJSHRjYmlBZ0lDQWtZV3gwTFhaaGJIVmxPaUJsYm1RN1hHNGdJSDBnUUdWc2MyVWdhV1lnSkhaaGJIVmxJRDA5SUZ3aWMzQmhZMlV0WW1WMGQyVmxibHdpSUh0Y2JpQWdJQ0FrWVd4MExYWmhiSFZsT2lCcWRYTjBhV1o1TzF4dUlDQjlJRUJsYkhObElHbG1JQ1IyWVd4MVpTQTlQU0JjSW5Od1lXTmxMV0Z5YjNWdVpGd2lJSHRjYmlBZ0lDQWtZV3gwTFhaaGJIVmxPaUJrYVhOMGNtbGlkWFJsTzF4dUlDQjlYRzVjYmlBZ0x5OGdNakF3T1Z4dUlDQkFhVzVqYkhWa1pTQndjbVZtYVhobGNpaGliM2d0Y0dGamF5d2dKR0ZzZEMxMllXeDFaU3dnZDJWaWEybDBJRzF2ZWlCemNHVmpLVHRjYmx4dUlDQXZMeUF5TURFeVhHNGdJRUJwYm1Oc2RXUmxJSEJ5WldacGVHVnlLR3AxYzNScFpua3RZMjl1ZEdWdWRDd2dKSFpoYkhWbExDQjNaV0pyYVhRZ2JXOTZJRzF6SUc4Z2MzQmxZeWs3WEc1Y2JpQWdMeThnTWpBeE1TQW9TVVVnTVRBcFhHNGdJQzF0Y3kxbWJHVjRMWEJoWTJzNklDUmhiSFF0ZG1Gc2RXVTdYRzU5WEc1Y2JpOHZJREl3TURrZ0xTQmliM2d0WVd4cFoyNGdLSE4wWVhKMElId2daVzVrSUh3Z1kyVnVkR1Z5SUh3Z1ltRnpaV3hwYm1VZ2ZDQnpkSEpsZEdOb0tWeHVMeThnTWpBeE1TQXRJR1pzWlhndFlXeHBaMjRnS0hOMFlYSjBJSHdnWlc1a0lId2dZMlZ1ZEdWeUlId2dZbUZ6Wld4cGJtVWdmQ0J6ZEhKbGRHTm9LVnh1THk4Z01qQXhNaUF0SUdGc2FXZHVMV2wwWlcxeklDaG1iR1Y0TFhOMFlYSjBJSHdnWm14bGVDMWxibVFnZkNCalpXNTBaWElnZkNCaVlYTmxiR2x1WlNCOElITjBjbVYwWTJncFhHNUFiV2w0YVc0Z1lXeHBaMjR0YVhSbGJYTW9KSFpoYkhWbE9pQnpkSEpsZEdOb0tTQjdYRzVjYmlBZ0pHRnNkQzEyWVd4MVpUb2dKSFpoYkhWbE8xeHVYRzRnSUVCcFppQWtkbUZzZFdVZ1BUMGdYQ0ptYkdWNExYTjBZWEowWENJZ2UxeHVJQ0FnSUNSaGJIUXRkbUZzZFdVNklITjBZWEowTzF4dUlDQjlJRUJsYkhObElHbG1JQ1IyWVd4MVpTQTlQU0JjSW1ac1pYZ3RaVzVrWENJZ2UxeHVJQ0FnSUNSaGJIUXRkbUZzZFdVNklHVnVaRHRjYmlBZ2ZWeHVYRzRnSUM4dklESXdNRGxjYmlBZ1FHbHVZMngxWkdVZ2NISmxabWw0WlhJb1ltOTRMV0ZzYVdkdUxDQWtZV3gwTFhaaGJIVmxMQ0IzWldKcmFYUWdiVzk2SUhOd1pXTXBPMXh1WEc0Z0lDOHZJREl3TVRKY2JpQWdRR2x1WTJ4MVpHVWdjSEpsWm1sNFpYSW9ZV3hwWjI0dGFYUmxiWE1zSUNSMllXeDFaU3dnZDJWaWEybDBJRzF2ZWlCdGN5QnZJSE53WldNcE8xeHVYRzRnSUM4dklESXdNVEVnS0VsRklERXdLVnh1SUNBdGJYTXRabXhsZUMxaGJHbG5iam9nSkdGc2RDMTJZV3gxWlR0Y2JuMWNibHh1THk4Z01qQXhNU0F0SUdac1pYZ3RhWFJsYlMxaGJHbG5iaUFvWVhWMGJ5QjhJSE4wWVhKMElId2daVzVrSUh3Z1kyVnVkR1Z5SUh3Z1ltRnpaV3hwYm1VZ2ZDQnpkSEpsZEdOb0tWeHVMeThnTWpBeE1pQXRJR0ZzYVdkdUxYTmxiR1lnS0dGMWRHOGdmQ0JtYkdWNExYTjBZWEowSUh3Z1pteGxlQzFsYm1RZ2ZDQmpaVzUwWlhJZ2ZDQmlZWE5sYkdsdVpTQjhJSE4wY21WMFkyZ3BYRzVBYldsNGFXNGdZV3hwWjI0dGMyVnNaaWdrZG1Gc2RXVTZJR0YxZEc4cElIdGNibHh1SUNBa2RtRnNkV1V0TWpBeE1Ub2dKSFpoYkhWbE8xeHVJQ0JBYVdZZ0pIWmhiSFZsSUQwOUlGd2labXhsZUMxemRHRnlkRndpSUh0Y2JpQWdJQ0FrZG1Gc2RXVXRNakF4TVRvZ2MzUmhjblE3WEc0Z0lIMGdRR1ZzYzJVZ2FXWWdKSFpoYkhWbElEMDlJRndpWm14bGVDMWxibVJjSWlCN1hHNGdJQ0FnSkhaaGJIVmxMVEl3TVRFNklHVnVaRHRjYmlBZ2ZWeHVYRzRnSUM4dklESXdNVEpjYmlBZ1FHbHVZMngxWkdVZ2NISmxabWw0WlhJb1lXeHBaMjR0YzJWc1ppd2dKSFpoYkhWbExDQjNaV0pyYVhRZ2JXOTZJSE53WldNcE8xeHVYRzRnSUM4dklESXdNVEVnS0VsRklERXdLVnh1SUNBdGJYTXRabXhsZUMxcGRHVnRMV0ZzYVdkdU9pQWtkbUZzZFdVdE1qQXhNVHRjYm4xY2JseHVMeThnTWpBeE1TQXRJR1pzWlhndGJHbHVaUzF3WVdOcklDaHpkR0Z5ZENCOElHVnVaQ0I4SUdObGJuUmxjaUI4SUdwMWMzUnBabmtnZkNCa2FYTjBjbWxpZFhSbElId2djM1J5WlhSamFDbGNiaTh2SURJd01USWdMU0JoYkdsbmJpMWpiMjUwWlc1MElDaG1iR1Y0TFhOMFlYSjBJSHdnWm14bGVDMWxibVFnZkNCalpXNTBaWElnZkNCemNHRmpaUzFpWlhSM1pXVnVJSHdnYzNCaFkyVXRZWEp2ZFc1a0lId2djM1J5WlhSamFDbGNia0J0YVhocGJpQmhiR2xuYmkxamIyNTBaVzUwS0NSMllXeDFaVG9nYzNSeVpYUmphQ2tnZTF4dVhHNGdJQ1IyWVd4MVpTMHlNREV4T2lBa2RtRnNkV1U3WEc0Z0lFQnBaaUFrZG1Gc2RXVWdQVDBnWENKbWJHVjRMWE4wWVhKMFhDSWdlMXh1SUNBZ0lDUjJZV3gxWlMweU1ERXhPaUJ6ZEdGeWREdGNiaUFnZlNCQVpXeHpaU0JwWmlBa2RtRnNkV1VnUFQwZ1hDSm1iR1Y0TFdWdVpGd2lJSHRjYmlBZ0lDQWtkbUZzZFdVdE1qQXhNVG9nWlc1a08xeHVJQ0I5SUVCbGJITmxJR2xtSUNSMllXeDFaU0E5UFNCY0luTndZV05sTFdKbGRIZGxaVzVjSWlCN1hHNGdJQ0FnSkhaaGJIVmxMVEl3TVRFNklHcDFjM1JwWm5rN1hHNGdJSDBnUUdWc2MyVWdhV1lnSkhaaGJIVmxJRDA5SUZ3aWMzQmhZMlV0WVhKdmRXNWtYQ0lnZTF4dUlDQWdJQ1IyWVd4MVpTMHlNREV4T2lCa2FYTjBjbWxpZFhSbE8xeHVJQ0I5WEc1Y2JpQWdMeThnTWpBeE1seHVJQ0JBYVc1amJIVmtaU0J3Y21WbWFYaGxjaWhoYkdsbmJpMWpiMjUwWlc1MExDQWtkbUZzZFdVc0lIZGxZbXRwZENCdGIzb2djM0JsWXlrN1hHNWNiaUFnTHk4Z01qQXhNU0FvU1VVZ01UQXBYRzRnSUMxdGN5MW1iR1Y0TFd4cGJtVXRjR0ZqYXpvZ0pIWmhiSFZsTFRJd01URTdYRzU5WEc0aUxBb0pDU0pBYldsNGFXNGdabTl1ZEMxbVlXTmxLRnh1SUNBa1ptOXVkQzFtWVcxcGJIa3NYRzRnSUNSbWFXeGxMWEJoZEdnc1hHNGdJQ1IzWldsbmFIUTZJRzV2Y20xaGJDeGNiaUFnSkhOMGVXeGxPaUJ1YjNKdFlXd3NYRzRnSUNSaGMzTmxkQzF3YVhCbGJHbHVaVG9nSkdGemMyVjBMWEJwY0dWc2FXNWxMRnh1SUNBa1ptbHNaUzFtYjNKdFlYUnpPaUJsYjNRZ2QyOW1aaklnZDI5bVppQjBkR1lnYzNabktTQjdYRzVjYmlBZ0pHWnZiblF0ZFhKc0xYQnlaV1pwZURvZ1ptOXVkQzExY213dGNISmxabWw0WlhJb0pHRnpjMlYwTFhCcGNHVnNhVzVsS1R0Y2JseHVJQ0JBWm05dWRDMW1ZV05sSUh0Y2JpQWdJQ0JtYjI1MExXWmhiV2xzZVRvZ0pHWnZiblF0Wm1GdGFXeDVPMXh1SUNBZ0lHWnZiblF0YzNSNWJHVTZJQ1J6ZEhsc1pUdGNiaUFnSUNCbWIyNTBMWGRsYVdkb2REb2dKSGRsYVdkb2REdGNibHh1SUNBZ0lITnlZem9nWm05dWRDMXpiM1Z5WTJVdFpHVmpiR0Z5WVhScGIyNG9YRzRnSUNBZ0lDQWtabTl1ZEMxbVlXMXBiSGtzWEc0Z0lDQWdJQ0FrWm1sc1pTMXdZWFJvTEZ4dUlDQWdJQ0FnSkdGemMyVjBMWEJwY0dWc2FXNWxMRnh1SUNBZ0lDQWdKR1pwYkdVdFptOXliV0YwY3l4Y2JpQWdJQ0FnSUNSbWIyNTBMWFZ5YkMxd2NtVm1hWGhjYmlBZ0lDQXBPMXh1SUNCOVhHNTlYRzRpTEFvSkNTSkFiV2w0YVc0Z1ptOXVkQzFtWldGMGRYSmxMWE5sZEhScGJtZHpLQ1J6WlhSMGFXNW5jeTR1TGlrZ2UxeHVJQ0JBYVdZZ2JHVnVaM1JvS0NSelpYUjBhVzVuY3lrZ1BUMGdNQ0I3SUNSelpYUjBhVzVuY3pvZ2JtOXVaVHNnZlZ4dUlDQkFhVzVqYkhWa1pTQndjbVZtYVhobGNpaG1iMjUwTFdabFlYUjFjbVV0YzJWMGRHbHVaM01zSUNSelpYUjBhVzVuY3l3Z2QyVmlhMmwwSUcxdmVpQnRjeUJ6Y0dWaktUdGNibjFjYmlJc0Nna0pJaTh2SUVocFJGQkpJRzFwZUdsdUxpQkVaV1poZFd4MElIWmhiSFZsSUhObGRDQjBieUF4TGpNZ2RHOGdkR0Z5WjJWMElFZHZiMmRzWlNCT1pYaDFjeUEzSUNob2RIUndPaTh2WW1waGJtZHZMbU52YlM5aGNuUnBZMnhsY3k5dGFXNHRaR1YyYVdObExYQnBlR1ZzTFhKaGRHbHZMeWxjYmtCdGFYaHBiaUJvYVdSd2FTZ2tjbUYwYVc4NklERXVNeWtnZTF4dUlDQkFiV1ZrYVdFZ2IyNXNlU0J6WTNKbFpXNGdZVzVrSUNndGQyVmlhMmwwTFcxcGJpMWtaWFpwWTJVdGNHbDRaV3d0Y21GMGFXODZJQ1J5WVhScGJ5a3NYRzRnSUc5dWJIa2djMk55WldWdUlHRnVaQ0FvYldsdUxTMXRiM290WkdWMmFXTmxMWEJwZUdWc0xYSmhkR2x2T2lBa2NtRjBhVzhwTEZ4dUlDQnZibXg1SUhOamNtVmxiaUJoYm1RZ0tDMXZMVzFwYmkxa1pYWnBZMlV0Y0dsNFpXd3RjbUYwYVc4NklDTjdKSEpoZEdsdmZTOHhLU3hjYmlBZ2IyNXNlU0J6WTNKbFpXNGdZVzVrSUNodGFXNHRjbVZ6YjJ4MWRHbHZiam9nY205MWJtUW9KSEpoZEdsdklDb2dPVFprY0drcEtTeGNiaUFnYjI1c2VTQnpZM0psWlc0Z1lXNWtJQ2h0YVc0dGNtVnpiMngxZEdsdmJqb2dKSEpoZEdsdklDb2dNV1J3Y0hncElIdGNiaUFnSUNCQVkyOXVkR1Z1ZER0Y2JpQWdmVnh1ZlZ4dUlpd0tDUWtpUUcxcGVHbHVJR2g1Y0dobGJuTW9KR2g1Y0dobGJtRjBhVzl1T2lCdWIyNWxLU0I3WEc0Z0lDOHZJRzV2Ym1VZ2ZDQnRZVzUxWVd3Z2ZDQmhkWFJ2WEc0Z0lFQnBibU5zZFdSbElIQnlaV1pwZUdWeUtHaDVjR2hsYm5Nc0lDUm9lWEJvWlc1aGRHbHZiaXdnZDJWaWEybDBJRzF2ZWlCdGN5QnpjR1ZqS1R0Y2JuMWNiaUlzQ2drSklrQnRhWGhwYmlCcGJXRm5aUzF5Wlc1a1pYSnBibWNnS0NSdGIyUmxPbUYxZEc4cElIdGNibHh1SUNCQWFXWWdLQ1J0YjJSbElEMDlJR055YVhOd0xXVmtaMlZ6S1NCN1hHNGdJQ0FnTFcxekxXbHVkR1Z5Y0c5c1lYUnBiMjR0Ylc5a1pUb2dibVZoY21WemRDMXVaV2xuYUdKdmNqc2dMeThnU1VVNEsxeHVJQ0FnSUdsdFlXZGxMWEpsYm1SbGNtbHVaem9nTFcxdmVpMWpjbWx6Y0MxbFpHZGxjenRjYmlBZ0lDQnBiV0ZuWlMxeVpXNWtaWEpwYm1jNklDMXZMV055YVhOd0xXVmtaMlZ6TzF4dUlDQWdJR2x0WVdkbExYSmxibVJsY21sdVp6b2dMWGRsWW10cGRDMXZjSFJwYldsNlpTMWpiMjUwY21GemREdGNiaUFnSUNCcGJXRm5aUzF5Wlc1a1pYSnBibWM2SUdOeWFYTndMV1ZrWjJWek8xeHVJQ0I5WEc1Y2JpQWdRR1ZzYzJVZ2UxeHVJQ0FnSUdsdFlXZGxMWEpsYm1SbGNtbHVaem9nSkcxdlpHVTdYRzRnSUgxY2JuMWNiaUlzQ2drSklpOHZJRUZrWkhNZ2EyVjVabkpoYldWeklHSnNiMk5yY3lCbWIzSWdjM1Z3Y0c5eWRHVmtJSEJ5WldacGVHVnpMQ0J5WlcxdmRtbHVaeUJ5WldSMWJtUmhiblFnY0hKbFptbDRaWE1nYVc0Z2RHaGxJR0pzYjJOckozTWdZMjl1ZEdWdWRGeHVRRzFwZUdsdUlHdGxlV1p5WVcxbGN5Z2tibUZ0WlNrZ2UxeHVJQ0FrYjNKcFoybHVZV3d0Y0hKbFptbDRMV1p2Y2kxM1pXSnJhWFE2SUNBZ0lDUndjbVZtYVhndFptOXlMWGRsWW10cGREdGNiaUFnSkc5eWFXZHBibUZzTFhCeVpXWnBlQzFtYjNJdGJXOTZhV3hzWVRvZ0lDQWtjSEpsWm1sNExXWnZjaTF0YjNwcGJHeGhPMXh1SUNBa2IzSnBaMmx1WVd3dGNISmxabWw0TFdadmNpMXRhV055YjNOdlpuUTZJQ1J3Y21WbWFYZ3RabTl5TFcxcFkzSnZjMjltZER0Y2JpQWdKRzl5YVdkcGJtRnNMWEJ5WldacGVDMW1iM0l0YjNCbGNtRTZJQ0FnSUNBa2NISmxabWw0TFdadmNpMXZjR1Z5WVR0Y2JpQWdKRzl5YVdkcGJtRnNMWEJ5WldacGVDMW1iM0l0YzNCbFl6b2dJQ0FnSUNBa2NISmxabWw0TFdadmNpMXpjR1ZqTzF4dVhHNGdJRUJwWmlBa2IzSnBaMmx1WVd3dGNISmxabWw0TFdadmNpMTNaV0pyYVhRZ2UxeHVJQ0FnSUVCcGJtTnNkV1JsSUdScGMyRmliR1V0Y0hKbFptbDRMV1p2Y2kxaGJHd29LVHRjYmlBZ0lDQWtjSEpsWm1sNExXWnZjaTEzWldKcmFYUTZJSFJ5ZFdVZ0lXZHNiMkpoYkR0Y2JpQWdJQ0JBTFhkbFltdHBkQzFyWlhsbWNtRnRaWE1nSTNza2JtRnRaWDBnZTF4dUlDQWdJQ0FnUUdOdmJuUmxiblE3WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnUUdsbUlDUnZjbWxuYVc1aGJDMXdjbVZtYVhndFptOXlMVzF2ZW1sc2JHRWdlMXh1SUNBZ0lFQnBibU5zZFdSbElHUnBjMkZpYkdVdGNISmxabWw0TFdadmNpMWhiR3dvS1R0Y2JpQWdJQ0FrY0hKbFptbDRMV1p2Y2kxdGIzcHBiR3hoT2lCMGNuVmxJQ0ZuYkc5aVlXdzdYRzRnSUNBZ1FDMXRiM290YTJWNVpuSmhiV1Z6SUNON0pHNWhiV1Y5SUh0Y2JpQWdJQ0FnSUVCamIyNTBaVzUwTzF4dUlDQWdJSDFjYmlBZ2ZWeHVYRzRnSUNSd2NtVm1hWGd0Wm05eUxYZGxZbXRwZERvZ0lDQWdKRzl5YVdkcGJtRnNMWEJ5WldacGVDMW1iM0l0ZDJWaWEybDBJQ0FnSUNGbmJHOWlZV3c3WEc0Z0lDUndjbVZtYVhndFptOXlMVzF2ZW1sc2JHRTZJQ0FnSkc5eWFXZHBibUZzTFhCeVpXWnBlQzFtYjNJdGJXOTZhV3hzWVNBZ0lDRm5iRzlpWVd3N1hHNGdJQ1J3Y21WbWFYZ3RabTl5TFcxcFkzSnZjMjltZERvZ0pHOXlhV2RwYm1Gc0xYQnlaV1pwZUMxbWIzSXRiV2xqY205emIyWjBJQ0ZuYkc5aVlXdzdYRzRnSUNSd2NtVm1hWGd0Wm05eUxXOXdaWEpoT2lBZ0lDQWdKRzl5YVdkcGJtRnNMWEJ5WldacGVDMW1iM0l0YjNCbGNtRWdJQ0FnSUNGbmJHOWlZV3c3WEc0Z0lDUndjbVZtYVhndFptOXlMWE53WldNNklDQWdJQ0FnSkc5eWFXZHBibUZzTFhCeVpXWnBlQzFtYjNJdGMzQmxZeUFnSUNBZ0lDRm5iRzlpWVd3N1hHNWNiaUFnUUdsbUlDUnZjbWxuYVc1aGJDMXdjbVZtYVhndFptOXlMWE53WldNZ2UxeHVJQ0FnSUVCclpYbG1jbUZ0WlhNZ0kzc2tibUZ0WlgwZ2UxeHVJQ0FnSUNBZ1FHTnZiblJsYm5RN1hHNGdJQ0FnZlZ4dUlDQjlYRzU5WEc0aUxBb0pDU0pBYldsNGFXNGdiR2x1WldGeUxXZHlZV1JwWlc1MEtDUndiM01zSUNSbk1Td2dKR2N5T2lCdWRXeHNMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWtaek02SUc1MWJHd3NJQ1JuTkRvZ2JuVnNiQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKR2MxT2lCdWRXeHNMQ0FrWnpZNklHNTFiR3dzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ1JuTnpvZ2JuVnNiQ3dnSkdjNE9pQnVkV3hzTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FrWnprNklHNTFiR3dzSUNSbk1UQTZJRzUxYkd3c1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNSbVlXeHNZbUZqYXpvZ2JuVnNiQ2tnZTF4dUlDQXZMeUJFWlhSbFkzUWdkMmhoZENCMGVYQmxJRzltSUhaaGJIVmxJR1Y0YVhOMGN5QnBiaUFrY0c5elhHNGdJQ1J3YjNNdGRIbHdaVG9nZEhsd1pTMXZaaWh1ZEdnb0pIQnZjeXdnTVNrcE8xeHVJQ0FrY0c5ekxYTndaV002SUc1MWJHdzdYRzRnSUNSd2IzTXRaR1ZuY21WbE9pQnVkV3hzTzF4dVhHNGdJQzh2SUVsbUlDUndiM01nYVhNZ2JXbHpjMmx1WnlCbWNtOXRJRzFwZUdsdUxDQnlaV0Z6YzJsbmJpQjJZWEp6SUdGdVpDQmhaR1FnWkdWbVlYVnNkQ0J3YjNOcGRHbHZibHh1SUNCQWFXWWdLQ1J3YjNNdGRIbHdaU0E5UFNCamIyeHZjaWtnYjNJZ0tHNTBhQ2drY0c5ekxDQXhLU0E5UFNCY0luUnlZVzV6Y0dGeVpXNTBYQ0lwSUNCN1hHNGdJQ0FnSkdjeE1Eb2dKR2M1T3lBa1p6azZJQ1JuT0RzZ0pHYzRPaUFrWnpjN0lDUm5Oem9nSkdjMk95QWtaelk2SUNSbk5UdGNiaUFnSUNBa1p6VTZJQ1JuTkRzZ0pHYzBPaUFrWnpNN0lDUm5Nem9nSkdjeU95QWtaekk2SUNSbk1Uc2dKR2N4T2lBa2NHOXpPMXh1SUNBZ0lDUndiM002SUc1MWJHdzdYRzRnSUgxY2JseHVJQ0JBYVdZZ0pIQnZjeUI3WEc0Z0lDQWdKSEJ2YzJsMGFXOXVjem9nWDJ4cGJtVmhjaTF3YjNOcGRHbHZibk10Y0dGeWMyVnlLQ1J3YjNNcE8xeHVJQ0FnSUNSd2IzTXRaR1ZuY21WbE9pQnVkR2dvSkhCdmMybDBhVzl1Y3l3Z01TazdYRzRnSUNBZ0pIQnZjeTF6Y0dWak9pQWdJRzUwYUNna2NHOXphWFJwYjI1ekxDQXlLVHRjYmlBZ2ZWeHVYRzRnSUNSbWRXeHNPaUFrWnpFc0lDUm5NaXdnSkdjekxDQWtaelFzSUNSbk5Td2dKR2MyTENBa1p6Y3NJQ1JuT0N3Z0pHYzVMQ0FrWnpFd08xeHVYRzRnSUM4dklGTmxkQ0FrWnpFZ1lYTWdkR2hsSUdSbFptRjFiSFFnWm1Gc2JHSmhZMnNnWTI5c2IzSmNiaUFnSkdaaGJHeGlZV05yTFdOdmJHOXlPaUJ1ZEdnb0pHY3hMQ0F4S1R0Y2JseHVJQ0F2THlCSlppQWtabUZzYkdKaFkyc2dhWE1nWVNCamIyeHZjaUIxYzJVZ2RHaGhkQ0JqYjJ4dmNpQmhjeUIwYUdVZ1ptRnNiR0poWTJzZ1kyOXNiM0pjYmlBZ1FHbG1JQ2gwZVhCbExXOW1LQ1JtWVd4c1ltRmpheWtnUFQwZ1kyOXNiM0lwSUc5eUlDZ2tabUZzYkdKaFkyc2dQVDBnWENKMGNtRnVjM0JoY21WdWRGd2lLU0I3WEc0Z0lDQWdKR1poYkd4aVlXTnJMV052Ykc5eU9pQWtabUZzYkdKaFkyczdYRzRnSUgxY2JseHVJQ0JpWVdOclozSnZkVzVrTFdOdmJHOXlPaUFrWm1Gc2JHSmhZMnN0WTI5c2IzSTdYRzRnSUdKaFkydG5jbTkxYm1RdGFXMWhaMlU2SUMxM1pXSnJhWFF0YkdsdVpXRnlMV2R5WVdScFpXNTBLQ1J3YjNNdFpHVm5jbVZsSUNSbWRXeHNLVHNnTHk4Z1UyRm1ZWEpwSURVdU1Tc3NJRU5vY205dFpWeHVJQ0JpWVdOclozSnZkVzVrTFdsdFlXZGxPaUIxYm5GMWIzUmxLRndpYkdsdVpXRnlMV2R5WVdScFpXNTBLQ043SkhCdmN5MXpjR1ZqZlNON0pHWjFiR3g5S1Z3aUtUdGNibjFjYmlJc0Nna0pJa0J0YVhocGJpQndaWEp6Y0dWamRHbDJaU2drWkdWd2RHZzZJRzV2Ym1VcElIdGNiaUFnTHk4Z2JtOXVaU0I4SUR4c1pXNW5kR2crWEc0Z0lFQnBibU5zZFdSbElIQnlaV1pwZUdWeUtIQmxjbk53WldOMGFYWmxMQ0FrWkdWd2RHZ3NJSGRsWW10cGRDQnRiM29nYzNCbFl5azdYRzU5WEc1Y2JrQnRhWGhwYmlCd1pYSnpjR1ZqZEdsMlpTMXZjbWxuYVc0b0pIWmhiSFZsT2lBMU1DVWdOVEFsS1NCN1hHNGdJRUJwYm1Oc2RXUmxJSEJ5WldacGVHVnlLSEJsY25Od1pXTjBhWFpsTFc5eWFXZHBiaXdnSkhaaGJIVmxMQ0IzWldKcmFYUWdiVzk2SUhOd1pXTXBPMXh1ZlZ4dUlpd0tDUWtpUUcxcGVHbHVJSEJzWVdObGFHOXNaR1Z5SUh0Y2JpQWdKSEJzWVdObGFHOXNaR1Z5Y3pvZ1hDSTZMWGRsWW10cGRDMXBibkIxZEZ3aUlGd2lPaTF0YjNwY0lpQmNJaTF0YjNwY0lpQmNJaTF0Y3kxcGJuQjFkRndpTzF4dUlDQkFaV0ZqYUNBa2NHeGhZMlZvYjJ4a1pYSWdhVzRnSkhCc1lXTmxhRzlzWkdWeWN5QjdYRzRnSUNBZ0pqb2pleVJ3YkdGalpXaHZiR1JsY24wdGNHeGhZMlZvYjJ4a1pYSWdlMXh1SUNBZ0lDQWdRR052Ym5SbGJuUTdYRzRnSUNBZ2ZWeHVJQ0I5WEc1OVhHNGlMQW9KQ1NJdkx5QlNaWEYxYVhKbGN5QlRZWE56SURNdU1TdGNia0J0YVhocGJpQnlZV1JwWVd3dFozSmhaR2xsYm5Rb0pHY3hMQ0FrWnpJc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNSbk16b2diblZzYkN3Z0pHYzBPaUJ1ZFd4c0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBa1p6VTZJRzUxYkd3c0lDUm5Oam9nYm5Wc2JDeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0pHYzNPaUJ1ZFd4c0xDQWtaemc2SUc1MWJHd3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDUm5PVG9nYm5Wc2JDd2dKR2N4TURvZ2JuVnNiQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKSEJ2Y3pvZ2JuVnNiQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKSE5vWVhCbExYTnBlbVU2SUc1MWJHd3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDUm1ZV3hzWW1GamF6b2diblZzYkNrZ2UxeHVYRzRnSUNSa1lYUmhPaUJmY21Ga2FXRnNMV0Z5Wnkxd1lYSnpaWElvSkdjeExDQWtaeklzSUNSd2IzTXNJQ1J6YUdGd1pTMXphWHBsS1R0Y2JpQWdKR2N4T2lBZ2JuUm9LQ1JrWVhSaExDQXhLVHRjYmlBZ0pHY3lPaUFnYm5Sb0tDUmtZWFJoTENBeUtUdGNiaUFnSkhCdmN6b2diblJvS0NSa1lYUmhMQ0F6S1R0Y2JpQWdKSE5vWVhCbExYTnBlbVU2SUc1MGFDZ2taR0YwWVN3Z05DazdYRzVjYmlBZ0pHWjFiR3c2SUNSbk1Td2dKR2N5TENBa1p6TXNJQ1JuTkN3Z0pHYzFMQ0FrWnpZc0lDUm5OeXdnSkdjNExDQWtaemtzSUNSbk1UQTdYRzVjYmlBZ0x5OGdVM1J5YVhBZ1pHVndjbVZqWVhSbFpDQmpiM1psY2k5amIyNTBZV2x1SUdadmNpQnpjR1ZqWEc0Z0lDUnphR0Z3WlMxemFYcGxMWE53WldNNklGOXphR0Z3WlMxemFYcGxMWE4wY21sd2NHVnlLQ1J6YUdGd1pTMXphWHBsS1R0Y2JseHVJQ0F2THlCVFpYUWdKR2N4SUdGeklIUm9aU0JrWldaaGRXeDBJR1poYkd4aVlXTnJJR052Ykc5eVhHNGdJQ1JtYVhKemRDMWpiMnh2Y2pvZ2JuUm9LQ1JtZFd4c0xDQXhLVHRjYmlBZ0pHWmhiR3hpWVdOckxXTnZiRzl5T2lCdWRHZ29KR1pwY25OMExXTnZiRzl5TENBeEtUdGNibHh1SUNCQWFXWWdLSFI1Y0dVdGIyWW9KR1poYkd4aVlXTnJLU0E5UFNCamIyeHZjaWtnYjNJZ0tDUm1ZV3hzWW1GamF5QTlQU0JjSW5SeVlXNXpjR0Z5Wlc1MFhDSXBJSHRjYmlBZ0lDQWtabUZzYkdKaFkyc3RZMjlzYjNJNklDUm1ZV3hzWW1GamF6dGNiaUFnZlZ4dVhHNGdJQzh2SUVGa1pDQkRiMjF0WVhNZ1lXNWtJSE53WVdObGMxeHVJQ0FrYzJoaGNHVXRjMmw2WlRvZ2FXWW9KSE5vWVhCbExYTnBlbVVzSUZ3aUkzc2tjMmhoY0dVdGMybDZaWDBzSUZ3aUxDQnVkV3hzS1R0Y2JpQWdKSEJ2Y3pvZ0lDQWdJQ0FnSUdsbUtDUndiM01zSUZ3aUkzc2tjRzl6ZlN3Z1hDSXNJRzUxYkd3cE8xeHVJQ0FrY0c5ekxYTndaV002SUNBZ2FXWW9KSEJ2Y3l3Z1hDSmhkQ0FqZXlSd2IzTjlYQ0lzSUc1MWJHd3BPMXh1SUNBa2MyaGhjR1V0YzJsNlpTMXpjR1ZqT2lCcFppZ29KSE5vWVhCbExYTnBlbVV0YzNCbFl5QWhQU0JjSWlCY0lpa2dZVzVrSUNna2NHOXpJRDA5SUc1MWJHd3BMQ0JjSWlON0pITm9ZWEJsTFhOcGVtVXRjM0JsWTMwc0lGd2lMQ0JjSWlON0pITm9ZWEJsTFhOcGVtVXRjM0JsWTMwZ1hDSXBPMXh1WEc0Z0lHSmhZMnRuY205MWJtUXRZMjlzYjNJNklDQWtabUZzYkdKaFkyc3RZMjlzYjNJN1hHNGdJR0poWTJ0bmNtOTFibVF0YVcxaFoyVTZJQzEzWldKcmFYUXRjbUZrYVdGc0xXZHlZV1JwWlc1MEtIVnVjWFZ2ZEdVb0kzc2tjRzl6ZlNON0pITm9ZWEJsTFhOcGVtVjlJM3NrWm5Wc2JIMHBLVHRjYmlBZ1ltRmphMmR5YjNWdVpDMXBiV0ZuWlRvZ2RXNXhkVzkwWlNoY0luSmhaR2xoYkMxbmNtRmthV1Z1ZENnamV5UnphR0Z3WlMxemFYcGxMWE53WldOOUkzc2tjRzl6TFhOd1pXTjlJM3NrWm5Wc2JIMHBYQ0lwTzF4dWZWeHVJaXdLQ1FraVFHTm9ZWEp6WlhRZ1hDSlZWRVl0T0Z3aU8xeHlYRzVjY2x4dUx5OHZJRTkxZEhCMWRITWdkR2hsSUhOd1pXTWdZVzVrSUhCeVpXWnBlR1ZrSUhabGNuTnBiMjV6SUc5bUlIUm9aU0JnT2pwelpXeGxZM1JwYjI1Z0lIQnpaWFZrYnkxbGJHVnRaVzUwTGx4eVhHNHZMeTljY2x4dUx5OHZJRUJ3WVhKaGJTQjdRbTl2YkgwZ0pHTjFjbkpsYm5RdGMyVnNaV04wYjNJZ1cyWmhiSE5sWFZ4eVhHNHZMeThnSUNCSlppQnpaWFFnZEc4Z1lIUnlkV1ZnTENCcGRDQjBZV3RsY3lCMGFHVWdZM1Z5Y21WdWRDQmxiR1Z0Wlc1MElHbHVkRzhnWTI5dWMybGtaWEpoZEdsdmJpNWNjbHh1THk4dlhISmNiaTh2THlCQVpYaGhiWEJzWlNCelkzTnpJQzBnVlhOaFoyVmNjbHh1THk4dklDQWdMbVZzWlcxbGJuUWdlMXh5WEc0dkx5OGdJQ0FnSUVCcGJtTnNkV1JsSUhObGJHVmpkR2x2YmloMGNuVmxLU0I3WEhKY2JpOHZMeUFnSUNBZ0lDQmlZV05yWjNKdmRXNWtMV052Ykc5eU9pQWpabVppWWpVeU8xeHlYRzR2THk4Z0lDQWdJSDFjY2x4dUx5OHZJQ0FnZlZ4eVhHNHZMeTljY2x4dUx5OHZJRUJsZUdGdGNHeGxJR056Y3lBdElFTlRVeUJQZFhSd2RYUmNjbHh1THk4dklDQWdMbVZzWlcxbGJuUTZPaTF0YjNvdGMyVnNaV04wYVc5dUlIdGNjbHh1THk4dklDQWdJQ0JpWVdOclozSnZkVzVrTFdOdmJHOXlPaUFqWm1aaVlqVXlPMXh5WEc0dkx5OGdJQ0I5WEhKY2JpOHZMMXh5WEc0dkx5OGdJQ0F1Wld4bGJXVnVkRG82YzJWc1pXTjBhVzl1SUh0Y2NseHVMeTh2SUNBZ0lDQmlZV05yWjNKdmRXNWtMV052Ykc5eU9pQWpabVppWWpVeU8xeHlYRzR2THk4Z0lDQjlYSEpjYmx4eVhHNUFiV2w0YVc0Z2MyVnNaV04wYVc5dUtDUmpkWEp5Wlc1MExYTmxiR1ZqZEc5eU9pQm1ZV3h6WlNrZ2UxeHlYRzRnSUVCcFppQWtZM1Z5Y21WdWRDMXpaV3hsWTNSdmNpQjdYSEpjYmlBZ0lDQW1Pam90Ylc5NkxYTmxiR1ZqZEdsdmJpQjdYSEpjYmlBZ0lDQWdJRUJqYjI1MFpXNTBPMXh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUNZNk9uTmxiR1ZqZEdsdmJpQjdYSEpjYmlBZ0lDQWdJRUJqYjI1MFpXNTBPMXh5WEc0Z0lDQWdmVnh5WEc0Z0lIMGdRR1ZzYzJVZ2UxeHlYRzRnSUNBZ09qb3RiVzk2TFhObGJHVmpkR2x2YmlCN1hISmNiaUFnSUNBZ0lFQmpiMjUwWlc1ME8xeHlYRzRnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJRG82YzJWc1pXTjBhVzl1SUh0Y2NseHVJQ0FnSUNBZ1FHTnZiblJsYm5RN1hISmNiaUFnSUNCOVhISmNiaUFnZlZ4eVhHNTlYSEpjYmlJc0Nna0pJa0J0YVhocGJpQjBaWGgwTFdSbFkyOXlZWFJwYjI0b0pIWmhiSFZsS1NCN1hHNHZMeUE4ZEdWNGRDMWtaV052Y21GMGFXOXVMV3hwYm1VK0lIeDhJRHgwWlhoMExXUmxZMjl5WVhScGIyNHRjM1I1YkdVK0lIeDhJRHgwWlhoMExXUmxZMjl5WVhScGIyNHRZMjlzYjNJK1hHNGdJRUJwYm1Oc2RXUmxJSEJ5WldacGVHVnlLSFJsZUhRdFpHVmpiM0poZEdsdmJpd2dKSFpoYkhWbExDQnRiM29wTzF4dWZWeHVYRzVBYldsNGFXNGdkR1Y0ZEMxa1pXTnZjbUYwYVc5dUxXeHBibVVvSkd4cGJtVTZJRzV2Ym1VcElIdGNiaTh2SUc1dmJtVWdmSHdnZFc1a1pYSnNhVzVsSUh4OElHOTJaWEpzYVc1bElIeDhJR3hwYm1VdGRHaHliM1ZuYUZ4dUlDQkFhVzVqYkhWa1pTQndjbVZtYVhobGNpaDBaWGgwTFdSbFkyOXlZWFJwYjI0dGJHbHVaU3dnSkd4cGJtVXNJRzF2ZWlrN1hHNTlYRzVjYmtCdGFYaHBiaUIwWlhoMExXUmxZMjl5WVhScGIyNHRjM1I1YkdVb0pITjBlV3hsT2lCemIyeHBaQ2tnZTF4dUx5OGdjMjlzYVdRZ2ZId2daRzkxWW14bElIeDhJR1J2ZEhSbFpDQjhmQ0JrWVhOb1pXUWdmSHdnZDJGMmVWeHVJQ0JBYVc1amJIVmtaU0J3Y21WbWFYaGxjaWgwWlhoMExXUmxZMjl5WVhScGIyNHRjM1I1YkdVc0lDUnpkSGxzWlN3Z2JXOTZJSGRsWW10cGRDazdYRzU5WEc1Y2JrQnRhWGhwYmlCMFpYaDBMV1JsWTI5eVlYUnBiMjR0WTI5c2IzSW9KR052Ykc5eU9pQmpkWEp5Wlc1MFEyOXNiM0lwSUh0Y2JpOHZJR04xY25KbGJuUkRiMnh2Y2lCOGZDQThZMjlzYjNJK1hHNGdJRUJwYm1Oc2RXUmxJSEJ5WldacGVHVnlLSFJsZUhRdFpHVmpiM0poZEdsdmJpMWpiMnh2Y2l3Z0pHTnZiRzl5TENCdGIzb3BPMXh1ZlZ4dUlpd0tDUWtpUUcxcGVHbHVJSFJ5WVc1elptOXliU2drY0hKdmNHVnlkSGs2SUc1dmJtVXBJSHRjYmlBZ0x5OGdibTl1WlNCOElEeDBjbUZ1YzJadmNtMHRablZ1WTNScGIyNCtYRzRnSUVCcGJtTnNkV1JsSUhCeVpXWnBlR1Z5S0hSeVlXNXpabTl5YlN3Z0pIQnliM0JsY25SNUxDQjNaV0pyYVhRZ2JXOTZJRzF6SUc4Z2MzQmxZeWs3WEc1OVhHNWNia0J0YVhocGJpQjBjbUZ1YzJadmNtMHRiM0pwWjJsdUtDUmhlR1Z6T2lBMU1DVXBJSHRjYmlBZ0x5OGdlQzFoZUdseklDMGdiR1ZtZENCOElHTmxiblJsY2lCOElISnBaMmgwSUNCOElHeGxibWQwYUNCOElDVmNiaUFnTHk4Z2VTMWhlR2x6SUMwZ2RHOXdJQ0I4SUdObGJuUmxjaUI4SUdKdmRIUnZiU0I4SUd4bGJtZDBhQ0I4SUNWY2JpQWdMeThnZWkxaGVHbHpJQzBnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsYm1kMGFGeHVJQ0JBYVc1amJIVmtaU0J3Y21WbWFYaGxjaWgwY21GdWMyWnZjbTB0YjNKcFoybHVMQ0FrWVhobGN5d2dkMlZpYTJsMElHMXZlaUJ0Y3lCdklITndaV01wTzF4dWZWeHVYRzVBYldsNGFXNGdkSEpoYm5ObWIzSnRMWE4wZVd4bEtDUnpkSGxzWlRvZ1pteGhkQ2tnZTF4dUlDQkFhVzVqYkhWa1pTQndjbVZtYVhobGNpaDBjbUZ1YzJadmNtMHRjM1I1YkdVc0lDUnpkSGxzWlN3Z2QyVmlhMmwwSUcxdmVpQnRjeUJ2SUhOd1pXTXBPMXh1ZlZ4dUlpd0tDUWtpTHk4Z1UyaHZjblJvWVc1a0lHMXBlR2x1TGlCVGRYQndiM0owY3lCdGRXeDBhWEJzWlNCd1lYSmxiblJvWlhObGN5MWtaV3hwYldsdVlYUmxaQ0IyWVd4MVpYTWdabTl5SUdWaFkyZ2dkbUZ5YVdGaWJHVXVYRzR2THlCRmVHRnRjR3hsT2lCQWFXNWpiSFZrWlNCMGNtRnVjMmwwYVc5dUlDaGhiR3dnTW5NZ1pXRnpaUzFwYmkxdmRYUXBPMXh1THk4Z0lDQWdJQ0FnSUNBZ1FHbHVZMngxWkdVZ2RISmhibk5wZEdsdmJpQW9iM0JoWTJsMGVTQXhjeUJsWVhObExXbHVJREp6TENCM2FXUjBhQ0F5Y3lCbFlYTmxMVzkxZENrN1hHNHZMeUFnSUNBZ0lDQWdJQ0JBYVc1amJIVmtaU0IwY21GdWMybDBhVzl1TFhCeWIzQmxjblI1SUNoMGNtRnVjMlp2Y20wc0lHOXdZV05wZEhrcE8xeHVYRzVBYldsNGFXNGdkSEpoYm5OcGRHbHZiaWdrY0hKdmNHVnlkR2xsY3k0dUxpa2dlMXh1SUNBdkx5QkdhWGdnWm05eUlIWmxibVJ2Y2kxd2NtVm1hWGdnZEhKaGJuTm1iM0p0SUhCeWIzQmxjblI1WEc0Z0lDUnVaV1ZrY3kxd2NtVm1hWGhsY3pvZ1ptRnNjMlU3WEc0Z0lDUjNaV0pyYVhRNklDZ3BPMXh1SUNBa2JXOTZPaUFvS1R0Y2JpQWdKSE53WldNNklDZ3BPMXh1WEc0Z0lDOHZJRU55WldGMFpTQnNhWE4wY3lCbWIzSWdkbVZ1Wkc5eUxYQnlaV1pwZUdWa0lIUnlZVzV6Wm05eWJWeHVJQ0JBWldGamFDQWtiR2x6ZENCcGJpQWtjSEp2Y0dWeWRHbGxjeUI3WEc0Z0lDQWdRR2xtSUc1MGFDZ2tiR2x6ZEN3Z01Ta2dQVDBnWENKMGNtRnVjMlp2Y20xY0lpQjdYRzRnSUNBZ0lDQWtibVZsWkhNdGNISmxabWw0WlhNNklIUnlkV1U3WEc0Z0lDQWdJQ0FrYkdsemRERTZJQzEzWldKcmFYUXRkSEpoYm5ObWIzSnRPMXh1SUNBZ0lDQWdKR3hwYzNReU9pQXRiVzk2TFhSeVlXNXpabTl5YlR0Y2JpQWdJQ0FnSUNSc2FYTjBNem9nS0NrN1hHNWNiaUFnSUNBZ0lFQmxZV05vSUNSMllYSWdhVzRnSkd4cGMzUWdlMXh1SUNBZ0lDQWdJQ0FrYkdsemRETTZJR3B2YVc0b0pHeHBjM1F6TENBa2RtRnlLVHRjYmx4dUlDQWdJQ0FnSUNCQWFXWWdKSFpoY2lBaFBTQmNJblJ5WVc1elptOXliVndpSUh0Y2JpQWdJQ0FnSUNBZ0lDQWtiR2x6ZERFNklHcHZhVzRvSkd4cGMzUXhMQ0FrZG1GeUtUdGNiaUFnSUNBZ0lDQWdJQ0FrYkdsemRESTZJR3B2YVc0b0pHeHBjM1F5TENBa2RtRnlLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBa2QyVmlhMmwwT2lCaGNIQmxibVFvSkhkbFltdHBkQ3dnSkd4cGMzUXhLVHRjYmlBZ0lDQWdJQ1J0YjNvNklDQWdJR0Z3Y0dWdVpDZ2tiVzk2TENBZ0lDQWtiR2x6ZERJcE8xeHVJQ0FnSUNBZ0pITndaV002SUNBZ1lYQndaVzVrS0NSemNHVmpMQ0FnSUNSc2FYTjBNeWs3WEc0Z0lDQWdmU0JBWld4elpTQjdYRzRnSUNBZ0lDQWtkMlZpYTJsME9pQmhjSEJsYm1Rb0pIZGxZbXRwZEN3Z0pHeHBjM1FzSUdOdmJXMWhLVHRjYmlBZ0lDQWdJQ1J0YjNvNklDQWdJR0Z3Y0dWdVpDZ2tiVzk2TENBZ0lDQWtiR2x6ZEN3Z1kyOXRiV0VwTzF4dUlDQWdJQ0FnSkhOd1pXTTZJQ0FnWVhCd1pXNWtLQ1J6Y0dWakxDQWdJQ1JzYVhOMExDQmpiMjF0WVNrN1hHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ1FHbG1JQ1J1WldWa2N5MXdjbVZtYVhobGN5QjdYRzRnSUNBZ0xYZGxZbXRwZEMxMGNtRnVjMmwwYVc5dU9pQWtkMlZpYTJsME8xeHVJQ0FnSUNBZ0lDMXRiM290ZEhKaGJuTnBkR2x2YmpvZ0pHMXZlanRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUnlZVzV6YVhScGIyNDZJQ1J6Y0dWak8xeHVJQ0I5SUVCbGJITmxJSHRjYmlBZ0lDQkFhV1lnYkdWdVozUm9LQ1J3Y205d1pYSjBhV1Z6S1NBK1BTQXhJSHRjYmlBZ0lDQWdJRUJwYm1Oc2RXUmxJSEJ5WldacGVHVnlLSFJ5WVc1emFYUnBiMjRzSUNSd2NtOXdaWEowYVdWekxDQjNaV0pyYVhRZ2JXOTZJSE53WldNcE8xeHVJQ0FnSUgwZ1FHVnNjMlVnZTF4dUlDQWdJQ0FnSkhCeWIzQmxjblJwWlhNNklHRnNiQ0F3TGpFMWN5QmxZWE5sTFc5MWRDQXdjenRjYmlBZ0lDQWdJRUJwYm1Oc2RXUmxJSEJ5WldacGVHVnlLSFJ5WVc1emFYUnBiMjRzSUNSd2NtOXdaWEowYVdWekxDQjNaV0pyYVhRZ2JXOTZJSE53WldNcE8xeHVJQ0FnSUgxY2JpQWdmVnh1ZlZ4dVhHNUFiV2w0YVc0Z2RISmhibk5wZEdsdmJpMXdjbTl3WlhKMGVTZ2tjSEp2Y0dWeWRHbGxjeTR1TGlrZ2UxeHVJQ0F0ZDJWaWEybDBMWFJ5WVc1emFYUnBiMjR0Y0hKdmNHVnlkSGs2SUhSeVlXNXphWFJwYjI0dGNISnZjR1Z5ZEhrdGJtRnRaWE1vSkhCeWIzQmxjblJwWlhNc0lGd2lkMlZpYTJsMFhDSXBPMXh1SUNBZ0lDQXRiVzk2TFhSeVlXNXphWFJwYjI0dGNISnZjR1Z5ZEhrNklIUnlZVzV6YVhScGIyNHRjSEp2Y0dWeWRIa3RibUZ0WlhNb0pIQnliM0JsY25ScFpYTXNJRndpYlc5NlhDSXBPMXh1SUNBZ0lDQWdJQ0FnSUhSeVlXNXphWFJwYjI0dGNISnZjR1Z5ZEhrNklIUnlZVzV6YVhScGIyNHRjSEp2Y0dWeWRIa3RibUZ0WlhNb0pIQnliM0JsY25ScFpYTXNJR1poYkhObEtUdGNibjFjYmx4dVFHMXBlR2x1SUhSeVlXNXphWFJwYjI0dFpIVnlZWFJwYjI0b0pIUnBiV1Z6TGk0dUtTQjdYRzRnSUVCcGJtTnNkV1JsSUhCeVpXWnBlR1Z5S0hSeVlXNXphWFJwYjI0dFpIVnlZWFJwYjI0c0lDUjBhVzFsY3l3Z2QyVmlhMmwwSUcxdmVpQnpjR1ZqS1R0Y2JuMWNibHh1UUcxcGVHbHVJSFJ5WVc1emFYUnBiMjR0ZEdsdGFXNW5MV1oxYm1OMGFXOXVLQ1J0YjNScGIyNXpMaTR1S1NCN1hHNGdJQzh2SUdWaGMyVWdmQ0JzYVc1bFlYSWdmQ0JsWVhObExXbHVJSHdnWldGelpTMXZkWFFnZkNCbFlYTmxMV2x1TFc5MWRDQjhJR04xWW1sakxXSmxlbWxsY2lncFhHNGdJRUJwYm1Oc2RXUmxJSEJ5WldacGVHVnlLSFJ5WVc1emFYUnBiMjR0ZEdsdGFXNW5MV1oxYm1OMGFXOXVMQ0FrYlc5MGFXOXVjeXdnZDJWaWEybDBJRzF2ZWlCemNHVmpLVHRjYm4xY2JseHVRRzFwZUdsdUlIUnlZVzV6YVhScGIyNHRaR1ZzWVhrb0pIUnBiV1Z6TGk0dUtTQjdYRzRnSUVCcGJtTnNkV1JsSUhCeVpXWnBlR1Z5S0hSeVlXNXphWFJwYjI0dFpHVnNZWGtzSUNSMGFXMWxjeXdnZDJWaWEybDBJRzF2ZWlCemNHVmpLVHRjYm4xY2JpSXNDZ2tKSWtCdGFYaHBiaUIxYzJWeUxYTmxiR1ZqZENna2RtRnNkV1U2SUc1dmJtVXBJSHRjYmlBZ1FHbHVZMngxWkdVZ2NISmxabWw0WlhJb2RYTmxjaTF6Wld4bFkzUXNJQ1IyWVd4MVpTd2dkMlZpYTJsMElHMXZlaUJ0Y3lCemNHVmpLVHRjYm4xY2JpSXNDZ2tKSWtCamFHRnljMlYwSUZ3aVZWUkdMVGhjSWp0Y2JseHVMeTh2SUZCeWIzWnBaR1Z6SUdFZ2NYVnBZMnNnYldWMGFHOWtJR1p2Y2lCMFlYSm5aWFJwYm1jZ1lHSnZjbVJsY2kxamIyeHZjbUFnYjI0Z2MzQmxZMmxtYVdNZ2MybGtaWE1nYjJZZ1lTQmliM2d1SUZWelpTQmhJR0J1ZFd4c1lDQjJZV3gxWlNCMGJ5RGlnSnh6YTJsdzRvQ2RJR0VnYzJsa1pTNWNiaTh2TDF4dUx5OHZJRUJ3WVhKaGJTQjdRWEpuYkdsemRIMGdKSFpoYkhOY2JpOHZMeUFnSUV4cGMzUWdiMllnWVhKbmRXMWxiblJ6WEc0dkx5OWNiaTh2THlCQVpYaGhiWEJzWlNCelkzTnpJQzBnVlhOaFoyVmNiaTh2THlBZ0lDNWxiR1Z0Wlc1MElIdGNiaTh2THlBZ0lDQWdRR2x1WTJ4MVpHVWdZbTl5WkdWeUxXTnZiRzl5S0NOaE5qQmlOVFVnSXpjMlkyUTVZeUJ1ZFd4c0lDTmxPR0ZsTVdFcE8xeHVMeTh2SUNBZ2ZWeHVMeTh2WEc0dkx5OGdRR1Y0WVcxd2JHVWdZM056SUMwZ1ExTlRJRTkxZEhCMWRGeHVMeTh2SUNBZ0xtVnNaVzFsYm5RZ2UxeHVMeTh2SUNBZ0lDQmliM0prWlhJdGJHVm1kQzFqYjJ4dmNqb2dJMlU0WVdVeFlUdGNiaTh2THlBZ0lDQWdZbTl5WkdWeUxYSnBaMmgwTFdOdmJHOXlPaUFqTnpaalpEbGpPMXh1THk4dklDQWdJQ0JpYjNKa1pYSXRkRzl3TFdOdmJHOXlPaUFqWVRZd1lqVTFPMXh1THk4dklDQWdmVnh1THk4dlhHNHZMeThnUUhKbGNYVnBjbVVnZTIxcGVHbHVmU0JrYVhKbFkzUnBiMjVoYkMxd2NtOXdaWEowZVZ4dUx5OHZYRzR2THk4Z1FHOTFkSEIxZENCZ1ltOXlaR1Z5TFdOdmJHOXlZRnh1WEc1QWJXbDRhVzRnWW05eVpHVnlMV052Ykc5eUtDUjJZV3h6TGk0dUtTQjdYRzRnSUVCcGJtTnNkV1JsSUdScGNtVmpkR2x2Ym1Gc0xYQnliM0JsY25SNUtHSnZjbVJsY2l3Z1kyOXNiM0lzSUNSMllXeHpMaTR1S1R0Y2JuMWNiaUlzQ2drSklrQmphR0Z5YzJWMElGd2lWVlJHTFRoY0lqdGNibHh1THk4dklGQnliM1pwWkdWeklHRWdjWFZwWTJzZ2JXVjBhRzlrSUdadmNpQjBZWEpuWlhScGJtY2dZR0p2Y21SbGNpMXlZV1JwZFhOZ0lHOXVJR0p2ZEdnZ1kyOXlibVZ5Y3lCdmJpQjBhR1VnYzJsa1pTQnZaaUJoSUdKdmVDNWNiaTh2TDF4dUx5OHZJRUJ3WVhKaGJTQjdUblZ0WW1WeWZTQWtjbUZrYVdsY2JpOHZMeUFnSUV4cGMzUWdiMllnWVhKbmRXMWxiblJ6WEc0dkx5OWNiaTh2THlCQVpYaGhiWEJzWlNCelkzTnpJQzBnVlhOaFoyVmNiaTh2THlBZ0lDNWxiR1Z0Wlc1MExXOXVaU0I3WEc0dkx5OGdJQ0FnSUVCcGJtTnNkV1JsSUdKdmNtUmxjaTEwYjNBdGNtRmthWFZ6S0RWd2VDazdYRzR2THk4Z0lDQjlYRzR2THk5Y2JpOHZMeUFnSUM1bGJHVnRaVzUwTFhSM2J5QjdYRzR2THk4Z0lDQWdJRUJwYm1Oc2RXUmxJR0p2Y21SbGNpMXNaV1owTFhKaFpHbDFjeWd6Y0hncE8xeHVMeTh2SUNBZ2ZWeHVMeTh2WEc0dkx5OGdRR1Y0WVcxd2JHVWdZM056SUMwZ1ExTlRJRTkxZEhCMWRGeHVMeTh2SUNBZ0xtVnNaVzFsYm5RdGIyNWxJSHRjYmk4dkx5QWdJQ0FnWW05eVpHVnlMWFJ2Y0Mxc1pXWjBMWEpoWkdsMWN6b2dOWEI0TzF4dUx5OHZJQ0FnSUNCaWIzSmtaWEl0ZEc5d0xYSnBaMmgwTFhKaFpHbDFjem9nTlhCNE8xeHVMeTh2SUNBZ2ZWeHVMeTh2WEc0dkx5OGdJQ0F1Wld4bGJXVnVkQzEwZDI4Z2UxeHVMeTh2SUNBZ0lDQmliM0prWlhJdFltOTBkRzl0TFd4bFpuUXRjbUZrYVhWek9pQXpjSGc3WEc0dkx5OGdJQ0FnSUdKdmNtUmxjaTEwYjNBdGJHVm1kQzF5WVdScGRYTTZJRE53ZUR0Y2JpOHZMeUFnSUgxY2JpOHZMMXh1THk4dklFQnZkWFJ3ZFhRZ1lHSnZjbVJsY2kxeVlXUnBkWE5nWEc1Y2JrQnRhWGhwYmlCaWIzSmtaWEl0ZEc5d0xYSmhaR2wxY3lna2NtRmthV2twSUh0Y2JpQWdZbTl5WkdWeUxYUnZjQzFzWldaMExYSmhaR2wxY3pvZ0pISmhaR2xwTzF4dUlDQmliM0prWlhJdGRHOXdMWEpwWjJoMExYSmhaR2wxY3pvZ0pISmhaR2xwTzF4dWZWeHVYRzVBYldsNGFXNGdZbTl5WkdWeUxYSnBaMmgwTFhKaFpHbDFjeWdrY21Ga2FXa3BJSHRjYmlBZ1ltOXlaR1Z5TFdKdmRIUnZiUzF5YVdkb2RDMXlZV1JwZFhNNklDUnlZV1JwYVR0Y2JpQWdZbTl5WkdWeUxYUnZjQzF5YVdkb2RDMXlZV1JwZFhNNklDUnlZV1JwYVR0Y2JuMWNibHh1UUcxcGVHbHVJR0p2Y21SbGNpMWliM1IwYjIwdGNtRmthWFZ6S0NSeVlXUnBhU2tnZTF4dUlDQmliM0prWlhJdFltOTBkRzl0TFd4bFpuUXRjbUZrYVhWek9pQWtjbUZrYVdrN1hHNGdJR0p2Y21SbGNpMWliM1IwYjIwdGNtbG5hSFF0Y21Ga2FYVnpPaUFrY21Ga2FXazdYRzU5WEc1Y2JrQnRhWGhwYmlCaWIzSmtaWEl0YkdWbWRDMXlZV1JwZFhNb0pISmhaR2xwS1NCN1hHNGdJR0p2Y21SbGNpMWliM1IwYjIwdGJHVm1kQzF5WVdScGRYTTZJQ1J5WVdScGFUdGNiaUFnWW05eVpHVnlMWFJ2Y0Mxc1pXWjBMWEpoWkdsMWN6b2dKSEpoWkdscE8xeHVmVnh1SWl3S0NRa2lRR05vWVhKelpYUWdYQ0pWVkVZdE9Gd2lPMXh1WEc0dkx5OGdVSEp2ZG1sa1pYTWdZU0J4ZFdsamF5QnRaWFJvYjJRZ1ptOXlJSFJoY21kbGRHbHVaeUJnWW05eVpHVnlMWE4wZVd4bFlDQnZiaUJ6Y0dWamFXWnBZeUJ6YVdSbGN5QnZaaUJoSUdKdmVDNGdWWE5sSUdFZ1lHNTFiR3hnSUhaaGJIVmxJSFJ2SU9LQW5ITnJhWERpZ0owZ1lTQnphV1JsTGx4dUx5OHZYRzR2THk4Z1FIQmhjbUZ0SUh0QmNtZHNhWE4wZlNBa2RtRnNjMXh1THk4dklDQWdUR2x6ZENCdlppQmhjbWQxYldWdWRITmNiaTh2TDF4dUx5OHZJRUJsZUdGdGNHeGxJSE5qYzNNZ0xTQlZjMkZuWlZ4dUx5OHZJQ0FnTG1Wc1pXMWxiblFnZTF4dUx5OHZJQ0FnSUNCQWFXNWpiSFZrWlNCaWIzSmtaWEl0YzNSNWJHVW9aR0Z6YUdWa0lHNTFiR3dnYzI5c2FXUXBPMXh1THk4dklDQWdmVnh1THk4dlhHNHZMeThnUUdWNFlXMXdiR1VnWTNOeklDMGdRMU5USUU5MWRIQjFkRnh1THk4dklDQWdMbVZzWlcxbGJuUWdlMXh1THk4dklDQWdJQ0JpYjNKa1pYSXRZbTkwZEc5dExYTjBlV3hsT2lCemIyeHBaRHRjYmk4dkx5QWdJQ0FnWW05eVpHVnlMWFJ2Y0MxemRIbHNaVG9nWkdGemFHVmtPMXh1THk4dklDQWdmVnh1THk4dlhHNHZMeThnUUhKbGNYVnBjbVVnZTIxcGVHbHVmU0JrYVhKbFkzUnBiMjVoYkMxd2NtOXdaWEowZVZ4dUx5OHZYRzR2THk4Z1FHOTFkSEIxZENCZ1ltOXlaR1Z5TFhOMGVXeGxZRnh1WEc1QWJXbDRhVzRnWW05eVpHVnlMWE4wZVd4bEtDUjJZV3h6TGk0dUtTQjdYRzRnSUVCcGJtTnNkV1JsSUdScGNtVmpkR2x2Ym1Gc0xYQnliM0JsY25SNUtHSnZjbVJsY2l3Z2MzUjViR1VzSUNSMllXeHpMaTR1S1R0Y2JuMWNiaUlzQ2drSklrQmphR0Z5YzJWMElGd2lWVlJHTFRoY0lqdGNibHh1THk4dklGQnliM1pwWkdWeklHRWdjWFZwWTJzZ2JXVjBhRzlrSUdadmNpQjBZWEpuWlhScGJtY2dZR0p2Y21SbGNpMTNhV1IwYUdBZ2IyNGdjM0JsWTJsbWFXTWdjMmxrWlhNZ2IyWWdZU0JpYjNndUlGVnpaU0JoSUdCdWRXeHNZQ0IyWVd4MVpTQjBieURpZ0p4emEybHc0b0NkSUdFZ2MybGtaUzVjYmk4dkwxeHVMeTh2SUVCd1lYSmhiU0I3UVhKbmJHbHpkSDBnSkhaaGJITmNiaTh2THlBZ0lFeHBjM1FnYjJZZ1lYSm5kVzFsYm5SelhHNHZMeTljYmk4dkx5QkFaWGhoYlhCc1pTQnpZM056SUMwZ1ZYTmhaMlZjYmk4dkx5QWdJQzVsYkdWdFpXNTBJSHRjYmk4dkx5QWdJQ0FnUUdsdVkyeDFaR1VnWW05eVpHVnlMWGRwWkhSb0tERmxiU0J1ZFd4c0lESXdjSGdwTzF4dUx5OHZJQ0FnZlZ4dUx5OHZYRzR2THk4Z1FHVjRZVzF3YkdVZ1kzTnpJQzBnUTFOVElFOTFkSEIxZEZ4dUx5OHZJQ0FnTG1Wc1pXMWxiblFnZTF4dUx5OHZJQ0FnSUNCaWIzSmtaWEl0WW05MGRHOXRMWGRwWkhSb09pQXlNSEI0TzF4dUx5OHZJQ0FnSUNCaWIzSmtaWEl0ZEc5d0xYZHBaSFJvT2lBeFpXMDdYRzR2THk4Z0lDQjlYRzR2THk5Y2JpOHZMeUJBY21WeGRXbHlaU0I3YldsNGFXNTlJR1JwY21WamRHbHZibUZzTFhCeWIzQmxjblI1WEc0dkx5OWNiaTh2THlCQWIzVjBjSFYwSUdCaWIzSmtaWEl0ZDJsa2RHaGdYRzVjYmtCdGFYaHBiaUJpYjNKa1pYSXRkMmxrZEdnb0pIWmhiSE11TGk0cElIdGNiaUFnUUdsdVkyeDFaR1VnWkdseVpXTjBhVzl1WVd3dGNISnZjR1Z5ZEhrb1ltOXlaR1Z5TENCM2FXUjBhQ3dnSkhaaGJITXVMaTRwTzF4dWZWeHVJaXdLQ1FraVFHTm9ZWEp6WlhRZ1hDSlZWRVl0T0Z3aU8xeHVYRzR2THk4Z1IyVnVaWEpoZEdWeklIWmhjbWxoWW14bGN5Qm1iM0lnWVd4c0lHSjFkSFJ2Ym5NdUlGQnNaV0Z6WlNCdWIzUmxJSFJvWVhRZ2VXOTFJRzExYzNRZ2RYTmxJR2x1ZEdWeWNHOXNZWFJwYjI0Z2IyNGdkR2hsSUhaaGNtbGhZbXhsT2lCZ0kzc2tZV3hzTFdKMWRIUnZibk45WUM1Y2JpOHZMMXh1THk4dklFQmxlR0Z0Y0d4bElITmpjM01nTFNCVmMyRm5aVnh1THk4dklDQWdJM3NrWVd4c0xXSjFkSFJ2Ym5OOUlIdGNiaTh2THlBZ0lDQWdZbUZqYTJkeWIzVnVaQzFqYjJ4dmNqb2dJMll3TUR0Y2JpOHZMeUFnSUgxY2JpOHZMMXh1THk4dklDQWdJM3NrWVd4c0xXSjFkSFJ2Ym5NdFptOWpkWE45TEZ4dUx5OHZJQ0FnSTNza1lXeHNMV0oxZEhSdmJuTXRhRzkyWlhKOUlIdGNiaTh2THlBZ0lDQWdZbUZqYTJkeWIzVnVaQzFqYjJ4dmNqb2dJekJtTUR0Y2JpOHZMeUFnSUgxY2JpOHZMMXh1THk4dklDQWdJM3NrWVd4c0xXSjFkSFJ2Ym5NdFlXTjBhWFpsZlNCN1hHNHZMeThnSUNBZ0lHSmhZMnRuY205MWJtUXRZMjlzYjNJNklDTXdNR1k3WEc0dkx5OGdJQ0I5WEc0dkx5OWNiaTh2THlCQVpYaGhiWEJzWlNCamMzTWdMU0JEVTFNZ1QzVjBjSFYwWEc0dkx5OGdJQ0JpZFhSMGIyNHNYRzR2THk4Z0lDQnBibkIxZEZ0MGVYQmxQVndpWW5WMGRHOXVYQ0pkTEZ4dUx5OHZJQ0FnYVc1d2RYUmJkSGx3WlQxY0luSmxjMlYwWENKZExGeHVMeTh2SUNBZ2FXNXdkWFJiZEhsd1pUMWNJbk4xWW0xcGRGd2lYU0I3WEc0dkx5OGdJQ0FnSUdKaFkydG5jbTkxYm1RdFkyOXNiM0k2SUNObU1EQTdYRzR2THk4Z0lDQjlYRzR2THk5Y2JpOHZMeUFnSUdKMWRIUnZianBtYjJOMWN5eGNiaTh2THlBZ0lHbHVjSFYwVzNSNWNHVTlYQ0ppZFhSMGIyNWNJbDA2Wm05amRYTXNYRzR2THk4Z0lDQnBibkIxZEZ0MGVYQmxQVndpY21WelpYUmNJbDA2Wm05amRYTXNYRzR2THk4Z0lDQnBibkIxZEZ0MGVYQmxQVndpYzNWaWJXbDBYQ0pkT21adlkzVnpMRnh1THk4dklDQWdZblYwZEc5dU9taHZkbVZ5TEZ4dUx5OHZJQ0FnYVc1d2RYUmJkSGx3WlQxY0ltSjFkSFJ2Ymx3aVhUcG9iM1psY2l4Y2JpOHZMeUFnSUdsdWNIVjBXM1I1Y0dVOVhDSnlaWE5sZEZ3aVhUcG9iM1psY2l4Y2JpOHZMeUFnSUdsdWNIVjBXM1I1Y0dVOVhDSnpkV0p0YVhSY0lsMDZhRzkyWlhJZ2UxeHVMeTh2SUNBZ0lDQmlZV05yWjNKdmRXNWtMV052Ykc5eU9pQWpNR1l3TzF4dUx5OHZJQ0FnZlZ4dUx5OHZYRzR2THk4Z0lDQmlkWFIwYjI0NllXTjBhWFpsTEZ4dUx5OHZJQ0FnYVc1d2RYUmJkSGx3WlQxY0ltSjFkSFJ2Ymx3aVhUcGhZM1JwZG1Vc1hHNHZMeThnSUNCcGJuQjFkRnQwZVhCbFBWd2ljbVZ6WlhSY0lsMDZZV04wYVhabExGeHVMeTh2SUNBZ2FXNXdkWFJiZEhsd1pUMWNJbk4xWW0xcGRGd2lYVHBoWTNScGRtVWdlMXh1THk4dklDQWdJQ0JpWVdOclozSnZkVzVrTFdOdmJHOXlPaUFqTURCbU8xeHVMeTh2SUNBZ2ZWeHVMeTh2WEc0dkx5OGdRSEpsY1hWcGNtVWdZWE56YVdkdUxXbHVjSFYwYzF4dUx5OHZYRzR2THk4Z1FIUjVjR1VnVEdsemRGeHVMeTh2WEc0dkx5OGdRSFJ2Wkc4Z1VtVnRiM1psSUdSdmRXSnNaU0JoYzNOcFoyNWxaQ0IyWVhKcFlXSnNaWE1nS0V4cGJtVnpJRFU1NG9DVE5qSXBJR2x1SUhZMUxqQXVNRnh1WEc0a1luVjBkRzl1Y3kxc2FYTjBPaUFuWW5WMGRHOXVKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2RwYm5CMWRGdDBlWEJsUFZ3aVluVjBkRzl1WENKZEp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDZHBibkIxZEZ0MGVYQmxQVndpY21WelpYUmNJbDBuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSjJsdWNIVjBXM1I1Y0dVOVhDSnpkV0p0YVhSY0lsMG5PMXh1WEc0a1lXeHNMV0oxZEhSdmJuTTZJQ0FnSUNBZ0lDQmhjM05wWjI0dGFXNXdkWFJ6S0NSaWRYUjBiMjV6TFd4cGMzUXBPMXh1SkdGc2JDMWlkWFIwYjI1ekxXRmpkR2wyWlRvZ1lYTnphV2R1TFdsdWNIVjBjeWdrWW5WMGRHOXVjeTFzYVhOMExDQmhZM1JwZG1VcE8xeHVKR0ZzYkMxaWRYUjBiMjV6TFdadlkzVnpPaUFnWVhOemFXZHVMV2x1Y0hWMGN5Z2tZblYwZEc5dWN5MXNhWE4wTENCbWIyTjFjeWs3WEc0a1lXeHNMV0oxZEhSdmJuTXRhRzkyWlhJNklDQmhjM05wWjI0dGFXNXdkWFJ6S0NSaWRYUjBiMjV6TFd4cGMzUXNJR2h2ZG1WeUtUdGNibHh1SkdGc2JDMWlkWFIwYjI0dGFXNXdkWFJ6T2lBZ0lDQWdJQ0FnSkdGc2JDMWlkWFIwYjI1ek8xeHVKR0ZzYkMxaWRYUjBiMjR0YVc1d2RYUnpMV0ZqZEdsMlpUb2dKR0ZzYkMxaWRYUjBiMjV6TFdGamRHbDJaVHRjYmlSaGJHd3RZblYwZEc5dUxXbHVjSFYwY3kxbWIyTjFjem9nSUNSaGJHd3RZblYwZEc5dWN5MW1iMk4xY3p0Y2JpUmhiR3d0WW5WMGRHOXVMV2x1Y0hWMGN5MW9iM1psY2pvZ0lDUmhiR3d0WW5WMGRHOXVjeTFvYjNabGNqdGNiaUlzQ2drSklrQmphR0Z5YzJWMElGd2lWVlJHTFRoY0lqdGNibHh1THk4dklGQnliM1pwWkdWeklHRnVJR1ZoYzNrZ2QyRjVJSFJ2SUdsdVkyeDFaR1VnWVNCamJHVmhjbVpwZUNCbWIzSWdZMjl1ZEdGcGJtbHVaeUJtYkc5aGRITXVYRzR2THk5Y2JpOHZMeUJBYkdsdWF5Qm9kSFJ3T2k4dlkzTnpiVzlxYnk1amIyMHZiR0YwWlhOMFgyNWxkMTlqYkdWaGNtWnBlRjl6YjE5bVlYSXZYRzR2THk5Y2JpOHZMeUJBWlhoaGJYQnNaU0J6WTNOeklDMGdWWE5oWjJWY2JpOHZMeUFnSUM1bGJHVnRaVzUwSUh0Y2JpOHZMeUFnSUNBZ1FHbHVZMngxWkdVZ1kyeGxZWEptYVhnN1hHNHZMeThnSUNCOVhHNHZMeTljYmk4dkx5QkFaWGhoYlhCc1pTQmpjM01nTFNCRFUxTWdUM1YwY0hWMFhHNHZMeThnSUNBdVpXeGxiV1Z1ZERvNllXWjBaWElnZTF4dUx5OHZJQ0FnSUNCamJHVmhjam9nWW05MGFEdGNiaTh2THlBZ0lDQWdZMjl1ZEdWdWREb2dYQ0pjSWp0Y2JpOHZMeUFnSUNBZ1pHbHpjR3hoZVRvZ2RHRmliR1U3WEc0dkx5OGdJQ0I5WEc1Y2JrQnRhWGhwYmlCamJHVmhjbVpwZUNCN1hHNGdJQ1k2T21GbWRHVnlJSHRjYmlBZ0lDQmpiR1ZoY2pvZ1ltOTBhRHRjYmlBZ0lDQmpiMjUwWlc1ME9pQmNJbHdpTzF4dUlDQWdJR1JwYzNCc1lYazZJSFJoWW14bE8xeHVJQ0I5WEc1OVhHNGlMQW9KQ1NKQVkyaGhjbk5sZENCY0lsVlVSaTA0WENJN1hHNWNiaTh2THlCVWNuVnVZMkYwWlhNZ2RHVjRkQ0JoYm1RZ1lXUmtjeUJoYmlCbGJHeHBjSE5wY3lCMGJ5QnlaWEJ5WlhObGJuUWdiM1psY21ac2IzY3VYRzR2THk5Y2JpOHZMeUJBY0dGeVlXMGdlMDUxYldKbGNuMGdKSGRwWkhSb0lGc3hNREFsWFZ4dUx5OHZJQ0FnVFdGNExYZHBaSFJvSUdadmNpQjBhR1VnYzNSeWFXNW5JSFJ2SUhKbGMzQmxZM1FnWW1WbWIzSmxJR0psYVc1bklIUnlkVzVqWVhSbFpGeHVMeTh2WEc0dkx5OGdRR1Y0WVcxd2JHVWdjMk56Y3lBdElGVnpZV2RsWEc0dkx5OGdJQ0F1Wld4bGJXVnVkQ0I3WEc0dkx5OGdJQ0FnSUVCcGJtTnNkV1JsSUdWc2JHbHdjMmx6TzF4dUx5OHZJQ0FnZlZ4dUx5OHZYRzR2THk4Z1FHVjRZVzF3YkdVZ1kzTnpJQzBnUTFOVElFOTFkSEIxZEZ4dUx5OHZJQ0FnTG1Wc1pXMWxiblFnZTF4dUx5OHZJQ0FnSUNCa2FYTndiR0Y1T2lCcGJteHBibVV0WW14dlkyczdYRzR2THk4Z0lDQWdJRzFoZUMxM2FXUjBhRG9nTVRBd0pUdGNiaTh2THlBZ0lDQWdiM1psY21ac2IzYzZJR2hwWkdSbGJqdGNiaTh2THlBZ0lDQWdkR1Y0ZEMxdmRtVnlabXh2ZHpvZ1pXeHNhWEJ6YVhNN1hHNHZMeThnSUNBZ0lIZG9hWFJsTFhOd1lXTmxPaUJ1YjNkeVlYQTdYRzR2THk4Z0lDQWdJSGR2Y21RdGQzSmhjRG9nYm05eWJXRnNPMXh1THk4dklDQWdmVnh1WEc1QWJXbDRhVzRnWld4c2FYQnphWE1vSkhkcFpIUm9PaUF4TURBbEtTQjdYRzRnSUdScGMzQnNZWGs2SUdsdWJHbHVaUzFpYkc5amF6dGNiaUFnYldGNExYZHBaSFJvT2lBa2QybGtkR2c3WEc0Z0lHOTJaWEptYkc5M09pQm9hV1JrWlc0N1hHNGdJSFJsZUhRdGIzWmxjbVpzYjNjNklHVnNiR2x3YzJsek8xeHVJQ0IzYUdsMFpTMXpjR0ZqWlRvZ2JtOTNjbUZ3TzF4dUlDQjNiM0prTFhkeVlYQTZJRzV2Y20xaGJEdGNibjFjYmlJc0Nna0pJa0JqYUdGeWMyVjBJRndpVlZSR0xUaGNJanRjYmx4dUx5OHZJRWRsYjNKbmFXRWdabTl1ZENCemRHRmpheTVjYmk4dkwxeHVMeTh2SUVCMGVYQmxJRXhwYzNSY2JseHVKR2RsYjNKbmFXRTZJRndpUjJWdmNtZHBZVndpTENCY0lrTmhiV0p5YVdGY0lpd2dYQ0pVYVcxbGN5Qk9aWGNnVW05dFlXNWNJaXdnWENKVWFXMWxjMXdpTENCelpYSnBaanRjYmx4dUx5OHZJRWhsYkhabGRHbGpZU0JtYjI1MElITjBZV05yTGx4dUx5OHZYRzR2THk4Z1FIUjVjR1VnVEdsemRGeHVYRzRrYUdWc2RtVjBhV05oT2lCY0lraGxiSFpsZEdsallTQk9aWFZsWENJc0lGd2lTR1ZzZG1WMGFXTmhYQ0lzSUZ3aVVtOWliM1J2WENJc0lGd2lRWEpwWVd4Y0lpd2djMkZ1Y3kxelpYSnBaanRjYmx4dUx5OHZJRXgxWTJsa1lTQkhjbUZ1WkdVZ1ptOXVkQ0J6ZEdGamF5NWNiaTh2TDF4dUx5OHZJRUIwZVhCbElFeHBjM1JjYmx4dUpHeDFZMmxrWVMxbmNtRnVaR1U2SUZ3aVRIVmphV1JoSUVkeVlXNWtaVndpTENCY0lsUmhhRzl0WVZ3aUxDQmNJbFpsY21SaGJtRmNJaXdnWENKQmNtbGhiRndpTENCellXNXpMWE5sY21sbU8xeHVYRzR2THk4Z1RXOXViM053WVdObElHWnZiblFnYzNSaFkyc3VYRzR2THk5Y2JpOHZMeUJBZEhsd1pTQk1hWE4wWEc1Y2JpUnRiMjV2YzNCaFkyVTZJRndpUW1sMGMzUnlaV0Z0SUZabGNtRWdVMkZ1Y3lCTmIyNXZYQ0lzSUZ3aVEyOXVjMjlzWVhOY0lpd2dYQ0pEYjNWeWFXVnlYQ0lzSUcxdmJtOXpjR0ZqWlR0Y2JseHVMeTh2SUZabGNtUmhibUVnWm05dWRDQnpkR0ZqYXk1Y2JpOHZMMXh1THk4dklFQjBlWEJsSUV4cGMzUmNibHh1SkhabGNtUmhibUU2SUZ3aVZtVnlaR0Z1WVZ3aUxDQmNJa2RsYm1WMllWd2lMQ0J6WVc1ekxYTmxjbWxtTzF4dUlpd0tDUWtpTHk4dklFaHBaR1Z6SUhSb1pTQjBaWGgwSUdsdUlHRnVJR1ZzWlcxbGJuUXNJR052YlcxdmJteDVJSFZ6WldRZ2RHOGdjMmh2ZHlCaGJpQnBiV0ZuWlM0Z1UyOXRaU0JsYkdWdFpXNTBjeUIzYVd4c0lHNWxaV1FnWW14dlkyc3RiR1YyWld3Z2MzUjViR1Z6SUdGd2NHeHBaV1F1WEc0dkx5OWNiaTh2THlCQWJHbHVheUJvZEhSd09pOHZlbVZzWkcxaGJpNWpiMjB2TWpBeE1pOHdNeTh3TVM5eVpYQnNZV05wYm1jdGRHaGxMVGs1T1Rsd2VDMW9ZV05yTFc1bGR5MXBiV0ZuWlMxeVpYQnNZV05sYldWdWRGeHVMeTh2WEc0dkx5OGdRR1Y0WVcxd2JHVWdjMk56Y3lBdElGVnpZV2RsWEc0dkx5OGdJQ0F1Wld4bGJXVnVkQ0I3WEc0dkx5OGdJQ0FnSUVCcGJtTnNkV1JsSUdocFpHVXRkR1Y0ZER0Y2JpOHZMeUFnSUgxY2JpOHZMMXh1THk4dklFQmxlR0Z0Y0d4bElHTnpjeUF0SUVOVFV5QlBkWFJ3ZFhSY2JpOHZMeUFnSUM1bGJHVnRaVzUwSUh0Y2JpOHZMeUFnSUNBZ2IzWmxjbVpzYjNjNklHaHBaR1JsYmp0Y2JpOHZMeUFnSUNBZ2RHVjRkQzFwYm1SbGJuUTZJREV3TVNVN1hHNHZMeThnSUNBZ0lIZG9hWFJsTFhOd1lXTmxPaUJ1YjNkeVlYQTdYRzR2THk4Z0lDQjlYRzR2THk5Y2JpOHZMeUJBZEc5a2J5QlNaVzF2ZG1VZ2FHVnBaMmgwSUdGeVozVnRaVzUwSUdsdUlIWTFMakF1TUZ4dVhHNUFiV2w0YVc0Z2FHbGtaUzEwWlhoMEtDUm9aV2xuYUhRNklHNTFiR3dwSUh0Y2JpQWdiM1psY21ac2IzYzZJR2hwWkdSbGJqdGNiaUFnZEdWNGRDMXBibVJsYm5RNklERXdNU1U3WEc0Z0lIZG9hWFJsTFhOd1lXTmxPaUJ1YjNkeVlYQTdYRzVjYmlBZ1FHbG1JQ1JvWldsbmFIUWdlMXh1SUNBZ0lFQjNZWEp1SUZ3aVZHaGxJR0JvYVdSbExYUmxlSFJnSUcxcGVHbHVJR2hoY3lCamFHRnVaMlZrSUdGdVpDQnVieUJzYjI1blpYSWdjbVZ4ZFdseVpYTWdZU0JvWldsbmFIUXVJRlJvWlNCb1pXbG5hSFFnWVhKbmRXMWxiblFnZDJsc2JDQnVieUJzYjI1blpYSWdZbVVnWVdOalpYQjBaV1FnYVc0Z2RqVXVNQzR3WENJN1hHNGdJSDFjYm4xY2JpSXNDZ2tKSWtCamFHRnljMlYwSUZ3aVZWUkdMVGhjSWp0Y2JseHVMeTh2SUZCeWIzWnBaR1Z6SUdFZ2NYVnBZMnNnYldWMGFHOWtJR1p2Y2lCMFlYSm5aWFJwYm1jZ1lHMWhjbWRwYm1BZ2IyNGdjM0JsWTJsbWFXTWdjMmxrWlhNZ2IyWWdZU0JpYjNndUlGVnpaU0JoSUdCdWRXeHNZQ0IyWVd4MVpTQjBieURpZ0p4emEybHc0b0NkSUdFZ2MybGtaUzVjYmk4dkwxeHVMeTh2SUVCd1lYSmhiU0I3UVhKbmJHbHpkSDBnSkhaaGJITmNiaTh2THlBZ0lFeHBjM1FnYjJZZ1lYSm5kVzFsYm5SelhHNHZMeTljYmk4dkx5QkFaWGhoYlhCc1pTQnpZM056SUMwZ1ZYTmhaMlZjYmk4dkx5QWdJQzVsYkdWdFpXNTBJSHRjYmk4dkx5QWdJQ0FnUUdsdVkyeDFaR1VnYldGeVoybHVLRzUxYkd3Z01UQndlQ0F6WlcwZ01qQjJhQ2s3WEc0dkx5OGdJQ0I5WEc0dkx5OWNiaTh2THlCQVpYaGhiWEJzWlNCamMzTWdMU0JEVTFNZ1QzVjBjSFYwWEc0dkx5OGdJQ0F1Wld4bGJXVnVkQ0I3WEc0dkx5OGdJQ0FnSUcxaGNtZHBiaTFpYjNSMGIyMDZJRE5sYlR0Y2JpOHZMeUFnSUNBZ2JXRnlaMmx1TFd4bFpuUTZJREl3ZG1nN1hHNHZMeThnSUNBZ0lHMWhjbWRwYmkxeWFXZG9kRG9nTVRCd2VEdGNiaTh2THlBZ0lIMWNiaTh2TDF4dUx5OHZJRUJ5WlhGMWFYSmxJSHR0YVhocGJuMGdaR2x5WldOMGFXOXVZV3d0Y0hKdmNHVnlkSGxjYmk4dkwxeHVMeTh2SUVCdmRYUndkWFFnWUcxaGNtZHBibUJjYmx4dVFHMXBlR2x1SUcxaGNtZHBiaWdrZG1Gc2N5NHVMaWtnZTF4dUlDQkFhVzVqYkhWa1pTQmthWEpsWTNScGIyNWhiQzF3Y205d1pYSjBlU2h0WVhKbmFXNHNJR1poYkhObExDQWtkbUZzY3k0dUxpazdYRzU5WEc0aUxBb0pDU0pBWTJoaGNuTmxkQ0JjSWxWVVJpMDRYQ0k3WEc1Y2JpOHZMeUJRY205MmFXUmxjeUJoSUhGMWFXTnJJRzFsZEdodlpDQm1iM0lnZEdGeVoyVjBhVzVuSUdCd1lXUmthVzVuWUNCdmJpQnpjR1ZqYVdacFl5QnphV1JsY3lCdlppQmhJR0p2ZUM0Z1ZYTmxJR0VnWUc1MWJHeGdJSFpoYkhWbElIUnZJT0tBbkhOcmFYRGlnSjBnWVNCemFXUmxMbHh1THk4dlhHNHZMeThnUUhCaGNtRnRJSHRCY21kc2FYTjBmU0FrZG1Gc2MxeHVMeTh2SUNBZ1RHbHpkQ0J2WmlCaGNtZDFiV1Z1ZEhOY2JpOHZMMXh1THk4dklFQmxlR0Z0Y0d4bElITmpjM01nTFNCVmMyRm5aVnh1THk4dklDQWdMbVZzWlcxbGJuUWdlMXh1THk4dklDQWdJQ0JBYVc1amJIVmtaU0J3WVdSa2FXNW5LREV5ZG1nZ2JuVnNiQ0F4TUhCNElEVWxLVHRjYmk4dkx5QWdJSDFjYmk4dkwxeHVMeTh2SUVCbGVHRnRjR3hsSUdOemN5QXRJRU5UVXlCUGRYUndkWFJjYmk4dkx5QWdJQzVsYkdWdFpXNTBJSHRjYmk4dkx5QWdJQ0FnY0dGa1pHbHVaeTFpYjNSMGIyMDZJREV3Y0hnN1hHNHZMeThnSUNBZ0lIQmhaR1JwYm1jdGJHVm1kRG9nTlNVN1hHNHZMeThnSUNBZ0lIQmhaR1JwYm1jdGRHOXdPaUF4TW5ab08xeHVMeTh2SUNBZ2ZWeHVMeTh2WEc0dkx5OGdRSEpsY1hWcGNtVWdlMjFwZUdsdWZTQmthWEpsWTNScGIyNWhiQzF3Y205d1pYSjBlVnh1THk4dlhHNHZMeThnUUc5MWRIQjFkQ0JnY0dGa1pHbHVaMkJjYmx4dVFHMXBlR2x1SUhCaFpHUnBibWNvSkhaaGJITXVMaTRwSUh0Y2JpQWdRR2x1WTJ4MVpHVWdaR2x5WldOMGFXOXVZV3d0Y0hKdmNHVnlkSGtvY0dGa1pHbHVaeXdnWm1Gc2MyVXNJQ1IyWVd4ekxpNHVLVHRjYm4xY2JpSXNDZ2tKSWtCamFHRnljMlYwSUZ3aVZWUkdMVGhjSWp0Y2JseHVMeTh2SUZCeWIzWnBaR1Z6SUdFZ2NYVnBZMnNnYldWMGFHOWtJR1p2Y2lCelpYUjBhVzVuSUdGdUlHVnNaVzFsYm5UaWdKbHpJSEJ2YzJsMGFXOXVMaUJWYzJVZ1lTQmdiblZzYkdBZ2RtRnNkV1VnZEc4ZzRvQ2NjMnRwY09LQW5TQmhJSE5wWkdVdVhHNHZMeTljYmk4dkx5QkFjR0Z5WVcwZ2UxQnZjMmwwYVc5dWZTQWtjRzl6YVhScGIyNGdXM0psYkdGMGFYWmxYVnh1THk4dklDQWdRU0JEVTFNZ2NHOXphWFJwYjI0Z2RtRnNkV1ZjYmk4dkwxeHVMeTh2SUVCd1lYSmhiU0I3UVhKbmJHbHpkSDBnSkdOdmIzSmthVzVoZEdWeklGdHVkV3hzSUc1MWJHd2diblZzYkNCdWRXeHNYVnh1THk4dklDQWdUR2x6ZENCdlppQjJZV3gxWlhNZ2RHaGhkQ0JqYjNKeVpYTndiMjVrSUhSdklIUm9aU0EwTFhaaGJIVmxJSE41Ym5SaGVDQm1iM0lnZEdobElHVmtaMlZ6SUc5bUlHRWdZbTk0WEc0dkx5OWNiaTh2THlCQVpYaGhiWEJzWlNCelkzTnpJQzBnVlhOaFoyVmNiaTh2THlBZ0lDNWxiR1Z0Wlc1MElIdGNiaTh2THlBZ0lDQWdRR2x1WTJ4MVpHVWdjRzl6YVhScGIyNG9ZV0p6YjJ4MWRHVXNJREFnYm5Wc2JDQnVkV3hzSURFd1pXMHBPMXh1THk4dklDQWdmVnh1THk4dlhHNHZMeThnUUdWNFlXMXdiR1VnWTNOeklDMGdRMU5USUU5MWRIQjFkRnh1THk4dklDQWdMbVZzWlcxbGJuUWdlMXh1THk4dklDQWdJQ0JzWldaME9pQXhNR1Z0TzF4dUx5OHZJQ0FnSUNCd2IzTnBkR2x2YmpvZ1lXSnpiMngxZEdVN1hHNHZMeThnSUNBZ0lIUnZjRG9nTUR0Y2JpOHZMeUFnSUgxY2JpOHZMMXh1THk4dklFQnlaWEYxYVhKbElIdG1kVzVqZEdsdmJuMGdhWE10YkdWdVozUm9YRzR2THk4Z1FISmxjWFZwY21VZ2UyWjFibU4wYVc5dWZTQjFibkJoWTJ0Y2JseHVRRzFwZUdsdUlIQnZjMmwwYVc5dUtDUndiM05wZEdsdmJqb2djbVZzWVhScGRtVXNJQ1JqYjI5eVpHbHVZWFJsY3pvZ2JuVnNiQ0J1ZFd4c0lHNTFiR3dnYm5Wc2JDa2dlMXh1SUNCQWFXWWdkSGx3WlMxdlppZ2tjRzl6YVhScGIyNHBJRDA5SUd4cGMzUWdlMXh1SUNBZ0lDUmpiMjl5WkdsdVlYUmxjem9nSkhCdmMybDBhVzl1TzF4dUlDQWdJQ1J3YjNOcGRHbHZiam9nY21Wc1lYUnBkbVU3WEc0Z0lIMWNibHh1SUNBa1kyOXZjbVJwYm1GMFpYTTZJSFZ1Y0dGamF5Z2tZMjl2Y21ScGJtRjBaWE1wTzF4dVhHNGdJQ1J2Wm1aelpYUnpPaUFvWEc0Z0lDQWdkRzl3T2lBZ0lDQnVkR2dvSkdOdmIzSmthVzVoZEdWekxDQXhLU3hjYmlBZ0lDQnlhV2RvZERvZ0lHNTBhQ2drWTI5dmNtUnBibUYwWlhNc0lESXBMRnh1SUNBZ0lHSnZkSFJ2YlRvZ2JuUm9LQ1JqYjI5eVpHbHVZWFJsY3l3Z015a3NYRzRnSUNBZ2JHVm1kRG9nSUNCdWRHZ29KR052YjNKa2FXNWhkR1Z6TENBMEtWeHVJQ0FwTzF4dVhHNGdJSEJ2YzJsMGFXOXVPaUFrY0c5emFYUnBiMjQ3WEc1Y2JpQWdRR1ZoWTJnZ0pHOW1abk5sZEN3Z0pIWmhiSFZsSUdsdUlDUnZabVp6WlhSeklIdGNiaUFnSUNCQWFXWWdhWE10YkdWdVozUm9LQ1IyWVd4MVpTa2dlMXh1SUNBZ0lDQWdJM3NrYjJabWMyVjBmVG9nSkhaaGJIVmxPMXh1SUNBZ0lIMWNiaUFnZlZ4dWZWeHVJaXdLQ1FraVFHTm9ZWEp6WlhRZ1hDSlZWRVl0T0Z3aU8xeHVYRzR2THk4Z1FTQnRhWGhwYmlCbWIzSWdaMlZ1WlhKaGRHbHVaeUIyWlc1a2IzSWdjSEpsWm1sNFpYTWdiMjRnYm05dUxYTjBZVzVrWVhKa2FYcGxaQ0J3Y205d1pYSjBhV1Z6TGx4dUx5OHZYRzR2THk4Z1FIQmhjbUZ0SUh0VGRISnBibWQ5SUNSd2NtOXdaWEowZVZ4dUx5OHZJQ0FnVUhKdmNHVnlkSGtnZEc4Z2NISmxabWw0WEc0dkx5OWNiaTh2THlCQWNHRnlZVzBnZXlwOUlDUjJZV3gxWlZ4dUx5OHZJQ0FnVm1Gc2RXVWdkRzhnZFhObFhHNHZMeTljYmk4dkx5QkFjR0Z5WVcwZ2UweHBjM1I5SUNSd2NtVm1hWGhsYzF4dUx5OHZJQ0FnVUhKbFptbDRaWE1nZEc4Z1pHVm1hVzVsWEc0dkx5OWNiaTh2THlCQVpYaGhiWEJzWlNCelkzTnpJQzBnVlhOaFoyVmNiaTh2THlBZ0lDNWxiR1Z0Wlc1MElIdGNiaTh2THlBZ0lDQWdRR2x1WTJ4MVpHVWdjSEpsWm1sNFpYSW9ZbTl5WkdWeUxYSmhaR2wxY3l3Z01UQndlQ3dnZDJWaWEybDBJRzF6SUhOd1pXTXBPMXh1THk4dklDQWdmVnh1THk4dlhHNHZMeThnUUdWNFlXMXdiR1VnWTNOeklDMGdRMU5USUU5MWRIQjFkRnh1THk4dklDQWdMbVZzWlcxbGJuUWdlMXh1THk4dklDQWdJQ0F0ZDJWaWEybDBMV0p2Y21SbGNpMXlZV1JwZFhNNklERXdjSGc3WEc0dkx5OGdJQ0FnSUMxdGIzb3RZbTl5WkdWeUxYSmhaR2wxY3pvZ01UQndlRHRjYmk4dkx5QWdJQ0FnWW05eVpHVnlMWEpoWkdsMWN6b2dNVEJ3ZUR0Y2JpOHZMeUFnSUgxY2JpOHZMMXh1THk4dklFQnlaWEYxYVhKbElIdDJZWEpwWVdKc1pYMGdKSEJ5WldacGVDMW1iM0l0ZDJWaWEybDBYRzR2THk4Z1FISmxjWFZwY21VZ2UzWmhjbWxoWW14bGZTQWtjSEpsWm1sNExXWnZjaTF0YjNwcGJHeGhYRzR2THk4Z1FISmxjWFZwY21VZ2UzWmhjbWxoWW14bGZTQWtjSEpsWm1sNExXWnZjaTF0YVdOeWIzTnZablJjYmk4dkx5QkFjbVZ4ZFdseVpTQjdkbUZ5YVdGaWJHVjlJQ1J3Y21WbWFYZ3RabTl5TFc5d1pYSmhYRzR2THk4Z1FISmxjWFZwY21VZ2UzWmhjbWxoWW14bGZTQWtjSEpsWm1sNExXWnZjaTF6Y0dWalhHNWNia0J0YVhocGJpQndjbVZtYVhobGNpZ2tjSEp2Y0dWeWRIa3NJQ1IyWVd4MVpTd2dKSEJ5WldacGVHVnpLU0I3WEc0Z0lFQmxZV05vSUNSd2NtVm1hWGdnYVc0Z0pIQnlaV1pwZUdWeklIdGNiaUFnSUNCQWFXWWdKSEJ5WldacGVDQTlQU0IzWldKcmFYUWdlMXh1SUNBZ0lDQWdRR2xtSUNSd2NtVm1hWGd0Wm05eUxYZGxZbXRwZENCN1hHNGdJQ0FnSUNBZ0lDMTNaV0pyYVhRdEkzc2tjSEp2Y0dWeWRIbDlPaUFrZG1Gc2RXVTdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZTQkFaV3h6WlNCcFppQWtjSEpsWm1sNElEMDlJRzF2ZWlCN1hHNGdJQ0FnSUNCQWFXWWdKSEJ5WldacGVDMW1iM0l0Ylc5NmFXeHNZU0I3WEc0Z0lDQWdJQ0FnSUMxdGIzb3RJM3NrY0hKdmNHVnlkSGw5T2lBa2RtRnNkV1U3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmU0JBWld4elpTQnBaaUFrY0hKbFptbDRJRDA5SUcxeklIdGNiaUFnSUNBZ0lFQnBaaUFrY0hKbFptbDRMV1p2Y2kxdGFXTnliM052Wm5RZ2UxeHVJQ0FnSUNBZ0lDQXRiWE10STNza2NISnZjR1Z5ZEhsOU9pQWtkbUZzZFdVN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlNCQVpXeHpaU0JwWmlBa2NISmxabWw0SUQwOUlHOGdlMXh1SUNBZ0lDQWdRR2xtSUNSd2NtVm1hWGd0Wm05eUxXOXdaWEpoSUh0Y2JpQWdJQ0FnSUNBZ0xXOHRJM3NrY0hKdmNHVnlkSGw5T2lBa2RtRnNkV1U3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmU0JBWld4elpTQnBaaUFrY0hKbFptbDRJRDA5SUhOd1pXTWdlMXh1SUNBZ0lDQWdRR2xtSUNSd2NtVm1hWGd0Wm05eUxYTndaV01nZTF4dUlDQWdJQ0FnSUNBamV5UndjbTl3WlhKMGVYMDZJQ1IyWVd4MVpUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOUlFQmxiSE5sSUNCN1hHNGdJQ0FnSUNCQWQyRnliaUJjSWxWdWNtVmpiMmR1YVhwbFpDQndjbVZtYVhnNklDTjdKSEJ5WldacGVIMWNJanRjYmlBZ0lDQjlYRzRnSUgxY2JuMWNibHh1UUcxcGVHbHVJR1JwYzJGaWJHVXRjSEpsWm1sNExXWnZjaTFoYkd3b0tTQjdYRzRnSUNSd2NtVm1hWGd0Wm05eUxYZGxZbXRwZERvZ0lDQWdabUZzYzJVZ0lXZHNiMkpoYkR0Y2JpQWdKSEJ5WldacGVDMW1iM0l0Ylc5NmFXeHNZVG9nSUNCbVlXeHpaU0FoWjJ4dlltRnNPMXh1SUNBa2NISmxabWw0TFdadmNpMXRhV055YjNOdlpuUTZJR1poYkhObElDRm5iRzlpWVd3N1hHNGdJQ1J3Y21WbWFYZ3RabTl5TFc5d1pYSmhPaUFnSUNBZ1ptRnNjMlVnSVdkc2IySmhiRHRjYmlBZ0pIQnlaV1pwZUMxbWIzSXRjM0JsWXpvZ0lDQWdJQ0JtWVd4elpTQWhaMnh2WW1Gc08xeHVmVnh1SWl3S0NRa2lRRzFwZUdsdUlISmxkR2x1WVMxcGJXRm5aU2drWm1sc1pXNWhiV1VzSUNSaVlXTnJaM0p2ZFc1a0xYTnBlbVVzSUNSbGVIUmxibk5wYjI0NklIQnVaeXdnSkhKbGRHbHVZUzFtYVd4bGJtRnRaVG9nYm5Wc2JDd2dKSEpsZEdsdVlTMXpkV1ptYVhnNklGOHllQ3dnSkdGemMyVjBMWEJwY0dWc2FXNWxPaUFrWVhOelpYUXRjR2x3Wld4cGJtVXBJSHRjYmlBZ1FHbG1JQ1JoYzNObGRDMXdhWEJsYkdsdVpTQjdYRzRnSUNBZ1ltRmphMmR5YjNWdVpDMXBiV0ZuWlRvZ2FXMWhaMlV0ZFhKc0tGd2lJM3NrWm1sc1pXNWhiV1Y5TGlON0pHVjRkR1Z1YzJsdmJuMWNJaWs3WEc0Z0lIMGdRR1ZzYzJVZ2UxeHVJQ0FnSUdKaFkydG5jbTkxYm1RdGFXMWhaMlU2SUNBZ0lDQWdJSFZ5YkNoY0lpTjdKR1pwYkdWdVlXMWxmUzRqZXlSbGVIUmxibk5wYjI1OVhDSXBPMXh1SUNCOVhHNWNiaUFnUUdsdVkyeDFaR1VnYUdsa2NHa2dlMXh1SUNBZ0lFQnBaaUFrWVhOelpYUXRjR2x3Wld4cGJtVWdlMXh1SUNBZ0lDQWdRR2xtSUNSeVpYUnBibUV0Wm1sc1pXNWhiV1VnZTF4dUlDQWdJQ0FnSUNCaVlXTnJaM0p2ZFc1a0xXbHRZV2RsT2lCcGJXRm5aUzExY213b1hDSWpleVJ5WlhScGJtRXRabWxzWlc1aGJXVjlMaU43SkdWNGRHVnVjMmx2Ym4xY0lpazdYRzRnSUNBZ0lDQjlJRUJsYkhObElIdGNiaUFnSUNBZ0lDQWdZbUZqYTJkeWIzVnVaQzFwYldGblpUb2dhVzFoWjJVdGRYSnNLRndpSTNza1ptbHNaVzVoYldWOUkzc2tjbVYwYVc1aExYTjFabVpwZUgwdUkzc2taWGgwWlc1emFXOXVmVndpS1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5SUVCbGJITmxJSHRjYmlBZ0lDQWdJRUJwWmlBa2NtVjBhVzVoTFdacGJHVnVZVzFsSUh0Y2JpQWdJQ0FnSUNBZ1ltRmphMmR5YjNWdVpDMXBiV0ZuWlRvZ2RYSnNLRndpSTNza2NtVjBhVzVoTFdacGJHVnVZVzFsZlM0amV5UmxlSFJsYm5OcGIyNTlYQ0lwTzF4dUlDQWdJQ0FnZlNCQVpXeHpaU0I3WEc0Z0lDQWdJQ0FnSUdKaFkydG5jbTkxYm1RdGFXMWhaMlU2SUhWeWJDaGNJaU43SkdacGJHVnVZVzFsZlNON0pISmxkR2x1WVMxemRXWm1hWGg5TGlON0pHVjRkR1Z1YzJsdmJuMWNJaWs3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1WEc0Z0lDQWdZbUZqYTJkeWIzVnVaQzF6YVhwbE9pQWtZbUZqYTJkeWIzVnVaQzF6YVhwbE8xeHVJQ0I5WEc1OVhHNGlMQW9KQ1NKQVkyaGhjbk5sZENCY0lsVlVSaTA0WENJN1hHNWNiaTh2THlCVFpYUnpJSFJvWlNCZ2QybGtkR2hnSUdGdVpDQmdhR1ZwWjJoMFlDQnZaaUIwYUdVZ1pXeGxiV1Z1ZEM1Y2JpOHZMMXh1THk4dklFQndZWEpoYlNCN1RHbHpkSDBnSkhOcGVtVmNiaTh2THlBZ0lFRWdiR2x6ZENCdlppQmhkQ0J0YjNOMElESWdjMmw2WlNCMllXeDFaWE11WEc0dkx5OWNiaTh2THlBZ0lFbG1JSFJvWlhKbElHbHpJRzl1YkhrZ1lTQnphVzVuYkdVZ2RtRnNkV1VnYVc0Z1lDUnphWHBsWUNCcGRDQnBjeUIxYzJWa0lHWnZjaUJpYjNSb0lIZHBaSFJvSUdGdVpDQm9aV2xuYUhRdUlFRnNiQ0IxYm1sMGN5QmhjbVVnYzNWd2NHOXlkR1ZrTGx4dUx5OHZYRzR2THk4Z1FHVjRZVzF3YkdVZ2MyTnpjeUF0SUZWellXZGxYRzR2THk4Z0lDQXVabWx5YzNRdFpXeGxiV1Z1ZENCN1hHNHZMeThnSUNBZ0lFQnBibU5zZFdSbElITnBlbVVvTW1WdEtUdGNiaTh2THlBZ0lIMWNiaTh2TDF4dUx5OHZJQ0FnTG5ObFkyOXVaQzFsYkdWdFpXNTBJSHRjYmk4dkx5QWdJQ0FnUUdsdVkyeDFaR1VnYzJsNlpTaGhkWFJ2SURFd1pXMHBPMXh1THk4dklDQWdmVnh1THk4dlhHNHZMeThnUUdWNFlXMXdiR1VnWTNOeklDMGdRMU5USUU5MWRIQjFkRnh1THk4dklDQWdMbVpwY25OMExXVnNaVzFsYm5RZ2UxeHVMeTh2SUNBZ0lDQjNhV1IwYURvZ01tVnRPMXh1THk4dklDQWdJQ0JvWldsbmFIUTZJREpsYlR0Y2JpOHZMeUFnSUgxY2JpOHZMMXh1THk4dklDQWdMbk5sWTI5dVpDMWxiR1Z0Wlc1MElIdGNiaTh2THlBZ0lDQWdkMmxrZEdnNklHRjFkRzg3WEc0dkx5OGdJQ0FnSUdobGFXZG9kRG9nTVRCbGJUdGNiaTh2THlBZ0lIMWNiaTh2TDF4dUx5OHZJRUIwYjJSdklGSmxabUZqZEc5eUlHbHVJRFV1TUM0d0lIUnZJSFZ6WlNCaElHTnZiVzFoTFhObGNHRnlZWFJsWkNCaGNtZDFiV1Z1ZEZ4dVhHNUFiV2w0YVc0Z2MybDZaU2drZG1Gc2RXVXBJSHRjYmlBZ0pIZHBaSFJvT2lCdWRHZ29KSFpoYkhWbExDQXhLVHRjYmlBZ0pHaGxhV2RvZERvZ0pIZHBaSFJvTzF4dVhHNGdJRUJwWmlCc1pXNW5kR2dvSkhaaGJIVmxLU0ErSURFZ2UxeHVJQ0FnSUNSb1pXbG5hSFE2SUc1MGFDZ2tkbUZzZFdVc0lESXBPMXh1SUNCOVhHNWNiaUFnUUdsbUlHbHpMWE5wZW1Vb0pHaGxhV2RvZENrZ2UxeHVJQ0FnSUdobGFXZG9kRG9nSkdobGFXZG9kRHRjYmlBZ2ZTQkFaV3h6WlNCN1hHNGdJQ0FnUUhkaGNtNGdYQ0pnSTNza2FHVnBaMmgwZldBZ2FYTWdibTkwSUdFZ2RtRnNhV1FnYkdWdVozUm9JR1p2Y2lCMGFHVWdZQ1JvWldsbmFIUmdJSEJoY21GdFpYUmxjaUJwYmlCMGFHVWdZSE5wZW1WZ0lHMXBlR2x1TGx3aU8xeHVJQ0I5WEc1Y2JpQWdRR2xtSUdsekxYTnBlbVVvSkhkcFpIUm9LU0I3WEc0Z0lDQWdkMmxrZEdnNklDUjNhV1IwYUR0Y2JpQWdmU0JBWld4elpTQjdYRzRnSUNBZ1FIZGhjbTRnWENKZ0kzc2tkMmxrZEdoOVlDQnBjeUJ1YjNRZ1lTQjJZV3hwWkNCc1pXNW5kR2dnWm05eUlIUm9aU0JnSkhkcFpIUm9ZQ0J3WVhKaGJXVjBaWElnYVc0Z2RHaGxJR0J6YVhwbFlDQnRhWGhwYmk1Y0lqdGNiaUFnZlZ4dWZWeHVJaXdLQ1FraVFHTm9ZWEp6WlhRZ1hDSlZWRVl0T0Z3aU8xeHVYRzR2THk4Z1IyVnVaWEpoZEdWeklIWmhjbWxoWW14bGN5Qm1iM0lnWVd4c0lIUmxlSFF0WW1GelpXUWdhVzV3ZFhSekxpQlFiR1ZoYzJVZ2JtOTBaU0IwYUdGMElIbHZkU0J0ZFhOMElIVnpaU0JwYm5SbGNuQnZiR0YwYVc5dUlHOXVJSFJvWlNCMllYSnBZV0pzWlRvZ1lDTjdKR0ZzYkMxMFpYaDBMV2x1Y0hWMGMzMWdMbHh1THk4dlhHNHZMeThnUUdWNFlXMXdiR1VnYzJOemN5QXRJRlZ6WVdkbFhHNHZMeThnSUNBamV5UmhiR3d0ZEdWNGRDMXBibkIxZEhOOUlIdGNiaTh2THlBZ0lDQWdZbTl5WkdWeU9pQXhjSGdnYzI5c2FXUWdJMll3TUR0Y2JpOHZMeUFnSUgxY2JpOHZMMXh1THk4dklDQWdJM3NrWVd4c0xYUmxlSFF0YVc1d2RYUnpMV1p2WTNWemZTeGNiaTh2THlBZ0lDTjdKR0ZzYkMxMFpYaDBMV2x1Y0hWMGN5MW9iM1psY24wZ2UxeHVMeTh2SUNBZ0lDQmliM0prWlhJNklERndlQ0J6YjJ4cFpDQWpNR1l3TzF4dUx5OHZJQ0FnZlZ4dUx5OHZYRzR2THk4Z0lDQWpleVJoYkd3dGRHVjRkQzFwYm5CMWRITXRZV04wYVhabGZTQjdYRzR2THk4Z0lDQWdJR0p2Y21SbGNqb2dNWEI0SUhOdmJHbGtJQ013TUdZN1hHNHZMeThnSUNCOVhHNHZMeTljYmk4dkx5QkFaWGhoYlhCc1pTQmpjM01nTFNCRFUxTWdUM1YwY0hWMFhHNHZMeThnSUNCcGJuQjFkRnQwZVhCbFBWd2lZMjlzYjNKY0lsMHNYRzR2THk4Z0lDQnBibkIxZEZ0MGVYQmxQVndpWkdGMFpWd2lYU3hjYmk4dkx5QWdJR2x1Y0hWMFczUjVjR1U5WENKa1lYUmxkR2x0WlZ3aVhTeGNiaTh2THlBZ0lHbHVjSFYwVzNSNWNHVTlYQ0prWVhSbGRHbHRaUzFzYjJOaGJGd2lYU3hjYmk4dkx5QWdJR2x1Y0hWMFczUjVjR1U5WENKbGJXRnBiRndpWFN4Y2JpOHZMeUFnSUdsdWNIVjBXM1I1Y0dVOVhDSnRiMjUwYUZ3aVhTeGNiaTh2THlBZ0lHbHVjSFYwVzNSNWNHVTlYQ0p1ZFcxaVpYSmNJbDBzWEc0dkx5OGdJQ0JwYm5CMWRGdDBlWEJsUFZ3aWNHRnpjM2R2Y21SY0lsMHNYRzR2THk4Z0lDQnBibkIxZEZ0MGVYQmxQVndpYzJWaGNtTm9YQ0pkTEZ4dUx5OHZJQ0FnYVc1d2RYUmJkSGx3WlQxY0luUmxiRndpWFN4Y2JpOHZMeUFnSUdsdWNIVjBXM1I1Y0dVOVhDSjBaWGgwWENKZExGeHVMeTh2SUNBZ2FXNXdkWFJiZEhsd1pUMWNJblJwYldWY0lsMHNYRzR2THk4Z0lDQnBibkIxZEZ0MGVYQmxQVndpZFhKc1hDSmRMRnh1THk4dklDQWdhVzV3ZFhSYmRIbHdaVDFjSW5kbFpXdGNJbDBzWEc0dkx5OGdJQ0IwWlhoMFlYSmxZU0I3WEc0dkx5OGdJQ0FnSUdKdmNtUmxjam9nTVhCNElITnZiR2xrSUNObU1EQTdYRzR2THk4Z0lDQjlYRzR2THk5Y2JpOHZMeUFnSUdsdWNIVjBXM1I1Y0dVOVhDSmpiMnh2Y2x3aVhUcG1iMk4xY3l4Y2JpOHZMeUFnSUdsdWNIVjBXM1I1Y0dVOVhDSmtZWFJsWENKZE9tWnZZM1Z6TEZ4dUx5OHZJQ0FnYVc1d2RYUmJkSGx3WlQxY0ltUmhkR1YwYVcxbFhDSmRPbVp2WTNWekxGeHVMeTh2SUNBZ2FXNXdkWFJiZEhsd1pUMWNJbVJoZEdWMGFXMWxMV3h2WTJGc1hDSmRPbVp2WTNWekxGeHVMeTh2SUNBZ2FXNXdkWFJiZEhsd1pUMWNJbVZ0WVdsc1hDSmRPbVp2WTNWekxGeHVMeTh2SUNBZ2FXNXdkWFJiZEhsd1pUMWNJbTF2Ym5Sb1hDSmRPbVp2WTNWekxGeHVMeTh2SUNBZ2FXNXdkWFJiZEhsd1pUMWNJbTUxYldKbGNsd2lYVHBtYjJOMWN5eGNiaTh2THlBZ0lHbHVjSFYwVzNSNWNHVTlYQ0p3WVhOemQyOXlaRndpWFRwbWIyTjFjeXhjYmk4dkx5QWdJR2x1Y0hWMFczUjVjR1U5WENKelpXRnlZMmhjSWwwNlptOWpkWE1zWEc0dkx5OGdJQ0JwYm5CMWRGdDBlWEJsUFZ3aWRHVnNYQ0pkT21adlkzVnpMRnh1THk4dklDQWdhVzV3ZFhSYmRIbHdaVDFjSW5SbGVIUmNJbDA2Wm05amRYTXNYRzR2THk4Z0lDQnBibkIxZEZ0MGVYQmxQVndpZEdsdFpWd2lYVHBtYjJOMWN5eGNiaTh2THlBZ0lHbHVjSFYwVzNSNWNHVTlYQ0oxY214Y0lsMDZabTlqZFhNc1hHNHZMeThnSUNCcGJuQjFkRnQwZVhCbFBWd2lkMlZsYTF3aVhUcG1iMk4xY3l4Y2JpOHZMeUFnSUhSbGVIUmhjbVZoT21adlkzVnpMRnh1THk4dklDQWdhVzV3ZFhSYmRIbHdaVDFjSW1OdmJHOXlYQ0pkT21odmRtVnlMRnh1THk4dklDQWdhVzV3ZFhSYmRIbHdaVDFjSW1SaGRHVmNJbDA2YUc5MlpYSXNYRzR2THk4Z0lDQnBibkIxZEZ0MGVYQmxQVndpWkdGMFpYUnBiV1ZjSWwwNmFHOTJaWElzWEc0dkx5OGdJQ0JwYm5CMWRGdDBlWEJsUFZ3aVpHRjBaWFJwYldVdGJHOWpZV3hjSWwwNmFHOTJaWElzWEc0dkx5OGdJQ0JwYm5CMWRGdDBlWEJsUFZ3aVpXMWhhV3hjSWwwNmFHOTJaWElzWEc0dkx5OGdJQ0JwYm5CMWRGdDBlWEJsUFZ3aWJXOXVkR2hjSWwwNmFHOTJaWElzWEc0dkx5OGdJQ0JwYm5CMWRGdDBlWEJsUFZ3aWJuVnRZbVZ5WENKZE9taHZkbVZ5TEZ4dUx5OHZJQ0FnYVc1d2RYUmJkSGx3WlQxY0luQmhjM04zYjNKa1hDSmRPbWh2ZG1WeUxGeHVMeTh2SUNBZ2FXNXdkWFJiZEhsd1pUMWNJbk5sWVhKamFGd2lYVHBvYjNabGNpeGNiaTh2THlBZ0lHbHVjSFYwVzNSNWNHVTlYQ0owWld4Y0lsMDZhRzkyWlhJc1hHNHZMeThnSUNCcGJuQjFkRnQwZVhCbFBWd2lkR1Y0ZEZ3aVhUcG9iM1psY2l4Y2JpOHZMeUFnSUdsdWNIVjBXM1I1Y0dVOVhDSjBhVzFsWENKZE9taHZkbVZ5TEZ4dUx5OHZJQ0FnYVc1d2RYUmJkSGx3WlQxY0luVnliRndpWFRwb2IzWmxjaXhjYmk4dkx5QWdJR2x1Y0hWMFczUjVjR1U5WENKM1pXVnJYQ0pkT21odmRtVnlMRnh1THk4dklDQWdkR1Y0ZEdGeVpXRTZhRzkyWlhJZ2UxeHVMeTh2SUNBZ0lDQmliM0prWlhJNklERndlQ0J6YjJ4cFpDQWpNR1l3TzF4dUx5OHZJQ0FnZlZ4dUx5OHZYRzR2THk4Z0lDQnBibkIxZEZ0MGVYQmxQVndpWTI5c2IzSmNJbDA2WVdOMGFYWmxMRnh1THk4dklDQWdhVzV3ZFhSYmRIbHdaVDFjSW1SaGRHVmNJbDA2WVdOMGFYWmxMRnh1THk4dklDQWdhVzV3ZFhSYmRIbHdaVDFjSW1SaGRHVjBhVzFsWENKZE9tRmpkR2wyWlN4Y2JpOHZMeUFnSUdsdWNIVjBXM1I1Y0dVOVhDSmtZWFJsZEdsdFpTMXNiMk5oYkZ3aVhUcGhZM1JwZG1Vc1hHNHZMeThnSUNCcGJuQjFkRnQwZVhCbFBWd2laVzFoYVd4Y0lsMDZZV04wYVhabExGeHVMeTh2SUNBZ2FXNXdkWFJiZEhsd1pUMWNJbTF2Ym5Sb1hDSmRPbUZqZEdsMlpTeGNiaTh2THlBZ0lHbHVjSFYwVzNSNWNHVTlYQ0p1ZFcxaVpYSmNJbDA2WVdOMGFYWmxMRnh1THk4dklDQWdhVzV3ZFhSYmRIbHdaVDFjSW5CaGMzTjNiM0prWENKZE9tRmpkR2wyWlN4Y2JpOHZMeUFnSUdsdWNIVjBXM1I1Y0dVOVhDSnpaV0Z5WTJoY0lsMDZZV04wYVhabExGeHVMeTh2SUNBZ2FXNXdkWFJiZEhsd1pUMWNJblJsYkZ3aVhUcGhZM1JwZG1Vc1hHNHZMeThnSUNCcGJuQjFkRnQwZVhCbFBWd2lkR1Y0ZEZ3aVhUcGhZM1JwZG1Vc1hHNHZMeThnSUNCcGJuQjFkRnQwZVhCbFBWd2lkR2x0WlZ3aVhUcGhZM1JwZG1Vc1hHNHZMeThnSUNCcGJuQjFkRnQwZVhCbFBWd2lkWEpzWENKZE9tRmpkR2wyWlN4Y2JpOHZMeUFnSUdsdWNIVjBXM1I1Y0dVOVhDSjNaV1ZyWENKZE9tRmpkR2wyWlN4Y2JpOHZMeUFnSUhSbGVIUmhjbVZoT21GamRHbDJaU0I3WEc0dkx5OGdJQ0FnSUdKdmNtUmxjam9nTVhCNElITnZiR2xrSUNNd01HWTdYRzR2THk4Z0lDQjlYRzR2THk5Y2JpOHZMeUJBY21WeGRXbHlaU0JoYzNOcFoyNHRhVzV3ZFhSelhHNHZMeTljYmk4dkx5QkFkSGx3WlNCTWFYTjBYRzVjYmlSMFpYaDBMV2x1Y0hWMGN5MXNhWE4wT2lBbmFXNXdkWFJiZEhsd1pUMWNJbU52Ykc5eVhDSmRKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBbmFXNXdkWFJiZEhsd1pUMWNJbVJoZEdWY0lsMG5MRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNkcGJuQjFkRnQwZVhCbFBWd2laR0YwWlhScGJXVmNJbDBuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDZHBibkIxZEZ0MGVYQmxQVndpWkdGMFpYUnBiV1V0Ykc5allXeGNJbDBuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDZHBibkIxZEZ0MGVYQmxQVndpWlcxaGFXeGNJbDBuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDZHBibkIxZEZ0MGVYQmxQVndpYlc5dWRHaGNJbDBuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDZHBibkIxZEZ0MGVYQmxQVndpYm5WdFltVnlYQ0pkSnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW5hVzV3ZFhSYmRIbHdaVDFjSW5CaGMzTjNiM0prWENKZEp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FuYVc1d2RYUmJkSGx3WlQxY0luTmxZWEpqYUZ3aVhTY3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSjJsdWNIVjBXM1I1Y0dVOVhDSjBaV3hjSWwwbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2RwYm5CMWRGdDBlWEJsUFZ3aWRHVjRkRndpWFNjc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKMmx1Y0hWMFczUjVjR1U5WENKMGFXMWxYQ0pkSnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW5hVzV3ZFhSYmRIbHdaVDFjSW5WeWJGd2lYU2NzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0oybHVjSFYwVzNSNWNHVTlYQ0ozWldWclhDSmRKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBbmFXNXdkWFE2Ym05MEtGdDBlWEJsWFNrbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2QwWlhoMFlYSmxZU2M3WEc1Y2JpUmhiR3d0ZEdWNGRDMXBibkIxZEhNNklDQWdJQ0FnSUNCaGMzTnBaMjR0YVc1d2RYUnpLQ1IwWlhoMExXbHVjSFYwY3kxc2FYTjBLVHRjYmlSaGJHd3RkR1Y0ZEMxcGJuQjFkSE10WVdOMGFYWmxPaUJoYzNOcFoyNHRhVzV3ZFhSektDUjBaWGgwTFdsdWNIVjBjeTFzYVhOMExDQmhZM1JwZG1VcE8xeHVKR0ZzYkMxMFpYaDBMV2x1Y0hWMGN5MW1iMk4xY3pvZ0lHRnpjMmxuYmkxcGJuQjFkSE1vSkhSbGVIUXRhVzV3ZFhSekxXeHBjM1FzSUdadlkzVnpLVHRjYmlSaGJHd3RkR1Y0ZEMxcGJuQjFkSE10YUc5MlpYSTZJQ0JoYzNOcFoyNHRhVzV3ZFhSektDUjBaWGgwTFdsdWNIVjBjeTFzYVhOMExDQm9iM1psY2lrN1hHNGlMQW9KQ1NKQVkyaGhjbk5sZENCY0lsVlVSaTA0WENJN1hHNWNiaTh2THlCRFUxTWdZM1ZpYVdNdFltVjZhV1Z5SUhScGJXbHVaeUJtZFc1amRHbHZibk11SUZScGJXbHVaeUJtZFc1amRHbHZibk1nWTI5MWNuUmxjM2tnYjJZZ2FuRjFaWEo1TG1WaGMybGxJQ2huYVhSb2RXSXVZMjl0TDJwaGRXdHBZUzlsWVhOcFpTbGNiaTh2TDF4dUx5OHZJRlJwYldsdVp5Qm1kVzVqZEdsdmJuTWdZWEpsSUhSb1pTQnpZVzFsSUdGeklHUmxiVzlsWkNCb1pYSmxPaUJvZEhSd09pOHZhbkYxWlhKNWRXa3VZMjl0TDNKbGMyOTFjbU5sY3k5a1pXMXZjeTlsWm1abFkzUXZaV0Z6YVc1bkxtaDBiV3hjYmk4dkwxeHVMeTh2SUVCMGVYQmxJR04xWW1sakxXSmxlbWxsY2x4dVhHNGtaV0Z6WlMxcGJpMXhkV0ZrT2lBZ0lDQWdJR04xWW1sakxXSmxlbWxsY2lnd0xqVTFNQ3dnSURBdU1EZzFMQ0F3TGpZNE1Dd2dNQzQxTXpBcE8xeHVKR1ZoYzJVdGFXNHRZM1ZpYVdNNklDQWdJQ0JqZFdKcFl5MWlaWHBwWlhJb01DNDFOVEFzSUNBd0xqQTFOU3dnTUM0Mk56VXNJREF1TVRrd0tUdGNiaVJsWVhObExXbHVMWEYxWVhKME9pQWdJQ0FnWTNWaWFXTXRZbVY2YVdWeUtEQXVPRGsxTENBZ01DNHdNekFzSURBdU5qZzFMQ0F3TGpJeU1DazdYRzRrWldGelpTMXBiaTF4ZFdsdWREb2dJQ0FnSUdOMVltbGpMV0psZW1sbGNpZ3dMamMxTlN3Z0lEQXVNRFV3TENBd0xqZzFOU3dnTUM0d05qQXBPMXh1SkdWaGMyVXRhVzR0YzJsdVpUb2dJQ0FnSUNCamRXSnBZeTFpWlhwcFpYSW9NQzQwTnpBc0lDQXdMakF3TUN3Z01DNDNORFVzSURBdU56RTFLVHRjYmlSbFlYTmxMV2x1TFdWNGNHODZJQ0FnSUNBZ1kzVmlhV010WW1WNmFXVnlLREF1T1RVd0xDQWdNQzR3TlRBc0lEQXVOemsxTENBd0xqQXpOU2s3WEc0a1pXRnpaUzFwYmkxamFYSmpPaUFnSUNBZ0lHTjFZbWxqTFdKbGVtbGxjaWd3TGpZd01Dd2dJREF1TURRd0xDQXdMams0TUN3Z01DNHpNelVwTzF4dUpHVmhjMlV0YVc0dFltRmphem9nSUNBZ0lDQmpkV0pwWXkxaVpYcHBaWElvTUM0Mk1EQXNJQzB3TGpJNE1Dd2dNQzQzTXpVc0lEQXVNRFExS1R0Y2JseHVKR1ZoYzJVdGIzVjBMWEYxWVdRNklDQWdJQ0JqZFdKcFl5MWlaWHBwWlhJb01DNHlOVEFzSUNBd0xqUTJNQ3dnTUM0ME5UQXNJREF1T1RRd0tUdGNiaVJsWVhObExXOTFkQzFqZFdKcFl6b2dJQ0FnWTNWaWFXTXRZbVY2YVdWeUtEQXVNakUxTENBZ01DNDJNVEFzSURBdU16VTFMQ0F4TGpBd01DazdYRzRrWldGelpTMXZkWFF0Y1hWaGNuUTZJQ0FnSUdOMVltbGpMV0psZW1sbGNpZ3dMakUyTlN3Z0lEQXVPRFF3TENBd0xqUTBNQ3dnTVM0d01EQXBPMXh1SkdWaGMyVXRiM1YwTFhGMWFXNTBPaUFnSUNCamRXSnBZeTFpWlhwcFpYSW9NQzR5TXpBc0lDQXhMakF3TUN3Z01DNHpNakFzSURFdU1EQXdLVHRjYmlSbFlYTmxMVzkxZEMxemFXNWxPaUFnSUNBZ1kzVmlhV010WW1WNmFXVnlLREF1TXprd0xDQWdNQzQxTnpVc0lEQXVOVFkxTENBeExqQXdNQ2s3WEc0a1pXRnpaUzF2ZFhRdFpYaHdiem9nSUNBZ0lHTjFZbWxqTFdKbGVtbGxjaWd3TGpFNU1Dd2dJREV1TURBd0xDQXdMakl5TUN3Z01TNHdNREFwTzF4dUpHVmhjMlV0YjNWMExXTnBjbU02SUNBZ0lDQmpkV0pwWXkxaVpYcHBaWElvTUM0d056VXNJQ0F3TGpneU1Dd2dNQzR4TmpVc0lERXVNREF3S1R0Y2JpUmxZWE5sTFc5MWRDMWlZV05yT2lBZ0lDQWdZM1ZpYVdNdFltVjZhV1Z5S0RBdU1UYzFMQ0FnTUM0NE9EVXNJREF1TXpJd0xDQXhMakkzTlNrN1hHNWNiaVJsWVhObExXbHVMVzkxZEMxeGRXRmtPaUFnWTNWaWFXTXRZbVY2YVdWeUtEQXVORFUxTENBZ01DNHdNekFzSURBdU5URTFMQ0F3TGprMU5TazdYRzRrWldGelpTMXBiaTF2ZFhRdFkzVmlhV002SUdOMVltbGpMV0psZW1sbGNpZ3dMalkwTlN3Z0lEQXVNRFExTENBd0xqTTFOU3dnTVM0d01EQXBPMXh1SkdWaGMyVXRhVzR0YjNWMExYRjFZWEowT2lCamRXSnBZeTFpWlhwcFpYSW9NQzQzTnpBc0lDQXdMakF3TUN3Z01DNHhOelVzSURFdU1EQXdLVHRjYmlSbFlYTmxMV2x1TFc5MWRDMXhkV2x1ZERvZ1kzVmlhV010WW1WNmFXVnlLREF1T0RZd0xDQWdNQzR3TURBc0lEQXVNRGN3TENBeExqQXdNQ2s3WEc0a1pXRnpaUzFwYmkxdmRYUXRjMmx1WlRvZ0lHTjFZbWxqTFdKbGVtbGxjaWd3TGpRME5Td2dJREF1TURVd0xDQXdMalUxTUN3Z01DNDVOVEFwTzF4dUpHVmhjMlV0YVc0dGIzVjBMV1Y0Y0c4NklDQmpkV0pwWXkxaVpYcHBaWElvTVM0d01EQXNJQ0F3TGpBd01Dd2dNQzR3TURBc0lERXVNREF3S1R0Y2JpUmxZWE5sTFdsdUxXOTFkQzFqYVhKak9pQWdZM1ZpYVdNdFltVjZhV1Z5S0RBdU56ZzFMQ0FnTUM0eE16VXNJREF1TVRVd0xDQXdMamcyTUNrN1hHNGtaV0Z6WlMxcGJpMXZkWFF0WW1GamF6b2dJR04xWW1sakxXSmxlbWxsY2lnd0xqWTRNQ3dnTFRBdU5UVXdMQ0F3TGpJMk5Td2dNUzQxTlRBcE8xeHVJaXdLQ1FraVFHMXBlR2x1SUhSeWFXRnVaMnhsS0NSemFYcGxMQ0FrWTI5c2IzSXNJQ1JrYVhKbFkzUnBiMjRwSUh0Y2JpQWdKSGRwWkhSb09pQnVkR2dvSkhOcGVtVXNJREVwTzF4dUlDQWthR1ZwWjJoME9pQnVkR2dvSkhOcGVtVXNJR3hsYm1kMGFDZ2tjMmw2WlNrcE8xeHVJQ0FrWm05eVpXZHliM1Z1WkMxamIyeHZjam9nYm5Sb0tDUmpiMnh2Y2l3Z01TazdYRzRnSUNSaVlXTnJaM0p2ZFc1a0xXTnZiRzl5T2lCcFppaHNaVzVuZEdnb0pHTnZiRzl5S1NBOVBTQXlMQ0J1ZEdnb0pHTnZiRzl5TENBeUtTd2dkSEpoYm5Od1lYSmxiblFwTzF4dUlDQm9aV2xuYUhRNklEQTdYRzRnSUhkcFpIUm9PaUF3TzF4dVhHNGdJRUJwWmlBb0pHUnBjbVZqZEdsdmJpQTlQU0IxY0NrZ2IzSWdLQ1JrYVhKbFkzUnBiMjRnUFQwZ1pHOTNiaWtnYjNJZ0tDUmthWEpsWTNScGIyNGdQVDBnY21sbmFIUXBJRzl5SUNna1pHbHlaV04wYVc5dUlEMDlJR3hsWm5RcElIdGNiaUFnSUNBa2QybGtkR2c2SUNSM2FXUjBhQ0F2SURJN1hHNGdJQ0FnSkdobGFXZG9kRG9nYVdZb2JHVnVaM1JvS0NSemFYcGxLU0ErSURFc0lDUm9aV2xuYUhRc0lDUm9aV2xuYUhRdk1pazdYRzVjYmlBZ0lDQkFhV1lnSkdScGNtVmpkR2x2YmlBOVBTQjFjQ0I3WEc0Z0lDQWdJQ0JpYjNKa1pYSXRZbTkwZEc5dE9pQWthR1ZwWjJoMElITnZiR2xrSUNSbWIzSmxaM0p2ZFc1a0xXTnZiRzl5TzF4dUlDQWdJQ0FnWW05eVpHVnlMV3hsWm5RNklDUjNhV1IwYUNCemIyeHBaQ0FrWW1GamEyZHliM1Z1WkMxamIyeHZjanRjYmlBZ0lDQWdJR0p2Y21SbGNpMXlhV2RvZERvZ0pIZHBaSFJvSUhOdmJHbGtJQ1JpWVdOclozSnZkVzVrTFdOdmJHOXlPMXh1SUNBZ0lIMGdRR1ZzYzJVZ2FXWWdKR1JwY21WamRHbHZiaUE5UFNCeWFXZG9kQ0I3WEc0Z0lDQWdJQ0JpYjNKa1pYSXRZbTkwZEc5dE9pQWtkMmxrZEdnZ2MyOXNhV1FnSkdKaFkydG5jbTkxYm1RdFkyOXNiM0k3WEc0Z0lDQWdJQ0JpYjNKa1pYSXRiR1ZtZERvZ0pHaGxhV2RvZENCemIyeHBaQ0FrWm05eVpXZHliM1Z1WkMxamIyeHZjanRjYmlBZ0lDQWdJR0p2Y21SbGNpMTBiM0E2SUNSM2FXUjBhQ0J6YjJ4cFpDQWtZbUZqYTJkeWIzVnVaQzFqYjJ4dmNqdGNiaUFnSUNCOUlFQmxiSE5sSUdsbUlDUmthWEpsWTNScGIyNGdQVDBnWkc5M2JpQjdYRzRnSUNBZ0lDQmliM0prWlhJdGJHVm1kRG9nSkhkcFpIUm9JSE52Ykdsa0lDUmlZV05yWjNKdmRXNWtMV052Ykc5eU8xeHVJQ0FnSUNBZ1ltOXlaR1Z5TFhKcFoyaDBPaUFrZDJsa2RHZ2djMjlzYVdRZ0pHSmhZMnRuY205MWJtUXRZMjlzYjNJN1hHNGdJQ0FnSUNCaWIzSmtaWEl0ZEc5d09pQWthR1ZwWjJoMElITnZiR2xrSUNSbWIzSmxaM0p2ZFc1a0xXTnZiRzl5TzF4dUlDQWdJSDBnUUdWc2MyVWdhV1lnSkdScGNtVmpkR2x2YmlBOVBTQnNaV1owSUh0Y2JpQWdJQ0FnSUdKdmNtUmxjaTFpYjNSMGIyMDZJQ1IzYVdSMGFDQnpiMnhwWkNBa1ltRmphMmR5YjNWdVpDMWpiMnh2Y2p0Y2JpQWdJQ0FnSUdKdmNtUmxjaTF5YVdkb2REb2dKR2hsYVdkb2RDQnpiMnhwWkNBa1ptOXlaV2R5YjNWdVpDMWpiMnh2Y2p0Y2JpQWdJQ0FnSUdKdmNtUmxjaTEwYjNBNklDUjNhV1IwYUNCemIyeHBaQ0FrWW1GamEyZHliM1Z1WkMxamIyeHZjanRjYmlBZ0lDQjlYRzRnSUgwZ1FHVnNjMlVnYVdZZ0tDUmthWEpsWTNScGIyNGdQVDBnZFhBdGNtbG5hSFFwSUc5eUlDZ2taR2x5WldOMGFXOXVJRDA5SUhWd0xXeGxablFwSUh0Y2JpQWdJQ0JpYjNKa1pYSXRkRzl3T2lBa2FHVnBaMmgwSUhOdmJHbGtJQ1JtYjNKbFozSnZkVzVrTFdOdmJHOXlPMXh1WEc0Z0lDQWdRR2xtSUNSa2FYSmxZM1JwYjI0Z1BUMGdkWEF0Y21sbmFIUWdlMXh1SUNBZ0lDQWdZbTl5WkdWeUxXeGxablE2SUNBa2QybGtkR2dnYzI5c2FXUWdKR0poWTJ0bmNtOTFibVF0WTI5c2IzSTdYRzRnSUNBZ2ZTQkFaV3h6WlNCcFppQWtaR2x5WldOMGFXOXVJRDA5SUhWd0xXeGxablFnZTF4dUlDQWdJQ0FnWW05eVpHVnlMWEpwWjJoME9pQWtkMmxrZEdnZ2MyOXNhV1FnSkdKaFkydG5jbTkxYm1RdFkyOXNiM0k3WEc0Z0lDQWdmVnh1SUNCOUlFQmxiSE5sSUdsbUlDZ2taR2x5WldOMGFXOXVJRDA5SUdSdmQyNHRjbWxuYUhRcElHOXlJQ2drWkdseVpXTjBhVzl1SUQwOUlHUnZkMjR0YkdWbWRDa2dlMXh1SUNBZ0lHSnZjbVJsY2kxaWIzUjBiMjA2SUNSb1pXbG5hSFFnYzI5c2FXUWdKR1p2Y21WbmNtOTFibVF0WTI5c2IzSTdYRzVjYmlBZ0lDQkFhV1lnSkdScGNtVmpkR2x2YmlBOVBTQmtiM2R1TFhKcFoyaDBJSHRjYmlBZ0lDQWdJR0p2Y21SbGNpMXNaV1owT2lBZ0pIZHBaSFJvSUhOdmJHbGtJQ1JpWVdOclozSnZkVzVrTFdOdmJHOXlPMXh1SUNBZ0lIMGdRR1ZzYzJVZ2FXWWdKR1JwY21WamRHbHZiaUE5UFNCa2IzZHVMV3hsWm5RZ2UxeHVJQ0FnSUNBZ1ltOXlaR1Z5TFhKcFoyaDBPaUFrZDJsa2RHZ2djMjlzYVdRZ0pHSmhZMnRuY205MWJtUXRZMjlzYjNJN1hHNGdJQ0FnZlZ4dUlDQjlJRUJsYkhObElHbG1JQ2drWkdseVpXTjBhVzl1SUQwOUlHbHVjMlYwTFhWd0tTQjdYRzRnSUNBZ1ltOXlaR1Z5TFdOdmJHOXlPaUFrWW1GamEyZHliM1Z1WkMxamIyeHZjaUFrWW1GamEyZHliM1Z1WkMxamIyeHZjaUFrWm05eVpXZHliM1Z1WkMxamIyeHZjanRjYmlBZ0lDQmliM0prWlhJdGMzUjViR1U2SUhOdmJHbGtPMXh1SUNBZ0lHSnZjbVJsY2kxM2FXUjBhRG9nSkdobGFXZG9kQ0FrZDJsa2RHZzdYRzRnSUgwZ1FHVnNjMlVnYVdZZ0tDUmthWEpsWTNScGIyNGdQVDBnYVc1elpYUXRaRzkzYmlrZ2UxeHVJQ0FnSUdKdmNtUmxjaTFqYjJ4dmNqb2dKR1p2Y21WbmNtOTFibVF0WTI5c2IzSWdKR0poWTJ0bmNtOTFibVF0WTI5c2IzSWdKR0poWTJ0bmNtOTFibVF0WTI5c2IzSTdYRzRnSUNBZ1ltOXlaR1Z5TFhOMGVXeGxPaUJ6YjJ4cFpEdGNiaUFnSUNCaWIzSmtaWEl0ZDJsa2RHZzZJQ1JvWldsbmFIUWdKSGRwWkhSb08xeHVJQ0I5SUVCbGJITmxJR2xtSUNna1pHbHlaV04wYVc5dUlEMDlJR2x1YzJWMExYSnBaMmgwS1NCN1hHNGdJQ0FnWW05eVpHVnlMV052Ykc5eU9pQWtZbUZqYTJkeWIzVnVaQzFqYjJ4dmNpQWtZbUZqYTJkeWIzVnVaQzFqYjJ4dmNpQWtZbUZqYTJkeWIzVnVaQzFqYjJ4dmNpQWtabTl5WldkeWIzVnVaQzFqYjJ4dmNqdGNiaUFnSUNCaWIzSmtaWEl0YzNSNWJHVTZJSE52Ykdsa08xeHVJQ0FnSUdKdmNtUmxjaTEzYVdSMGFEb2dKSGRwWkhSb0lDUm9aV2xuYUhRN1hHNGdJSDBnUUdWc2MyVWdhV1lnS0NSa2FYSmxZM1JwYjI0Z1BUMGdhVzV6WlhRdGJHVm1kQ2tnZTF4dUlDQWdJR0p2Y21SbGNpMWpiMnh2Y2pvZ0pHSmhZMnRuY205MWJtUXRZMjlzYjNJZ0pHWnZjbVZuY205MWJtUXRZMjlzYjNJZ0pHSmhZMnRuY205MWJtUXRZMjlzYjNJZ0pHSmhZMnRuY205MWJtUXRZMjlzYjNJN1hHNGdJQ0FnWW05eVpHVnlMWE4wZVd4bE9pQnpiMnhwWkR0Y2JpQWdJQ0JpYjNKa1pYSXRkMmxrZEdnNklDUjNhV1IwYUNBa2FHVnBaMmgwTzF4dUlDQjlYRzU5WEc0aUxBb0pDU0pBWTJoaGNuTmxkQ0JjSWxWVVJpMDRYQ0k3WEc1Y2JpOHZMeUJRY205MmFXUmxjeUJoYmlCbFlYTjVJSGRoZVNCMGJ5QmphR0Z1WjJVZ2RHaGxJR0IzYjNKa0xYZHlZWEJnSUhCeWIzQmxjblI1TGx4dUx5OHZYRzR2THk4Z1FIQmhjbUZ0SUh0VGRISnBibWQ5SUNSM2NtRndJRnRpY21WaGF5MTNiM0prWFZ4dUx5OHZJQ0FnVm1Gc2RXVWdabTl5SUhSb1pTQmdkMjl5WkMxaWNtVmhhMkFnY0hKdmNHVnlkSGt1WEc0dkx5OWNiaTh2THlCQVpYaGhiWEJzWlNCelkzTnpJQzBnVlhOaFoyVmNiaTh2THlBZ0lDNTNjbUZ3Y0dWeUlIdGNiaTh2THlBZ0lDQWdRR2x1WTJ4MVpHVWdkMjl5WkMxM2NtRndLR0p5WldGckxYZHZjbVFwTzF4dUx5OHZJQ0FnZlZ4dUx5OHZYRzR2THk4Z1FHVjRZVzF3YkdVZ1kzTnpJQzBnUTFOVElFOTFkSEIxZEZ4dUx5OHZJQ0FnTG5keVlYQndaWElnZTF4dUx5OHZJQ0FnSUNCdmRtVnlabXh2ZHkxM2NtRndPaUJpY21WaGF5MTNiM0prTzF4dUx5OHZJQ0FnSUNCM2IzSmtMV0p5WldGck9pQmljbVZoYXkxaGJHdzdYRzR2THk4Z0lDQWdJSGR2Y21RdGQzSmhjRG9nWW5KbFlXc3RkMjl5WkR0Y2JpOHZMeUFnSUgxY2JseHVRRzFwZUdsdUlIZHZjbVF0ZDNKaGNDZ2tkM0poY0RvZ1luSmxZV3N0ZDI5eVpDa2dlMXh1SUNCdmRtVnlabXh2ZHkxM2NtRndPaUFrZDNKaGNEdGNiaUFnZDI5eVpDMTNjbUZ3T2lBa2QzSmhjRHRjYmx4dUlDQkFhV1lnSkhkeVlYQWdQVDBnWW5KbFlXc3RkMjl5WkNCN1hHNGdJQ0FnZDI5eVpDMWljbVZoYXpvZ1luSmxZV3N0WVd4c08xeHVJQ0I5SUVCbGJITmxJSHRjYmlBZ0lDQjNiM0prTFdKeVpXRnJPaUFrZDNKaGNEdGNiaUFnZlZ4dWZWeHVJaXdLQ1FraUx5OGdWR2hsSUdadmJHeHZkMmx1WnlCbVpXRjBkWEpsY3lCb1lYWmxJR0psWlc0Z1pHVndjbVZqWVhSbFpDQmhibVFnZDJsc2JDQmlaU0J5WlcxdmRtVmtJR2x1SUhSb1pTQnVaWGgwSUUxQlNrOVNJSFpsY25OcGIyNGdjbVZzWldGelpWeHVYRzVBYldsNGFXNGdhVzVzYVc1bExXSnNiMk5ySUh0Y2JpQWdaR2x6Y0d4aGVUb2dhVzVzYVc1bExXSnNiMk5yTzF4dVhHNGdJRUIzWVhKdUlGd2lWR2hsSUdsdWJHbHVaUzFpYkc5amF5QnRhWGhwYmlCcGN5QmtaWEJ5WldOaGRHVmtJR0Z1WkNCM2FXeHNJR0psSUhKbGJXOTJaV1FnYVc0Z2RHaGxJRzVsZUhRZ2JXRnFiM0lnZG1WeWMybHZiaUJ5Wld4bFlYTmxYQ0k3WEc1OVhHNWNia0J0YVhocGJpQmlkWFIwYjI0Z0tDUnpkSGxzWlRvZ2MybHRjR3hsTENBa1ltRnpaUzFqYjJ4dmNqb2dJelF5T1RSbU1Dd2dKSFJsZUhRdGMybDZaVG9nYVc1b1pYSnBkQ3dnSkhCaFpHUnBibWM2SURkd2VDQXhPSEI0S1NCN1hHNWNiaUFnUUdsbUlIUjVjR1V0YjJZb0pITjBlV3hsS1NBOVBTQnpkSEpwYm1jZ1lXNWtJSFI1Y0dVdGIyWW9KR0poYzJVdFkyOXNiM0lwSUQwOUlHTnZiRzl5SUh0Y2JpQWdJQ0JBYVc1amJIVmtaU0JpZFhSMGIyNXpkSGxzWlNna2MzUjViR1VzSUNSaVlYTmxMV052Ykc5eUxDQWtkR1Y0ZEMxemFYcGxMQ0FrY0dGa1pHbHVaeWs3WEc0Z0lIMWNibHh1SUNCQWFXWWdkSGx3WlMxdlppZ2tjM1I1YkdVcElEMDlJSE4wY21sdVp5QmhibVFnZEhsd1pTMXZaaWdrWW1GelpTMWpiMnh2Y2lrZ1BUMGdiblZ0WW1WeUlIdGNiaUFnSUNBa2NHRmtaR2x1WnpvZ0pIUmxlSFF0YzJsNlpUdGNiaUFnSUNBa2RHVjRkQzF6YVhwbE9pQWtZbUZ6WlMxamIyeHZjanRjYmlBZ0lDQWtZbUZ6WlMxamIyeHZjam9nSXpReU9UUm1NRHRjYmx4dUlDQWdJRUJwWmlBa2NHRmtaR2x1WnlBOVBTQnBibWhsY21sMElIdGNiaUFnSUNBZ0lDUndZV1JrYVc1bk9pQTNjSGdnTVRod2VEdGNiaUFnSUNCOVhHNWNiaUFnSUNCQWFXNWpiSFZrWlNCaWRYUjBiMjV6ZEhsc1pTZ2tjM1I1YkdVc0lDUmlZWE5sTFdOdmJHOXlMQ0FrZEdWNGRDMXphWHBsTENBa2NHRmtaR2x1WnlrN1hHNGdJSDFjYmx4dUlDQkFhV1lnZEhsd1pTMXZaaWdrYzNSNWJHVXBJRDA5SUdOdmJHOXlJR0Z1WkNCMGVYQmxMVzltS0NSaVlYTmxMV052Ykc5eUtTQTlQU0JqYjJ4dmNpQjdYRzRnSUNBZ0pHSmhjMlV0WTI5c2IzSTZJQ1J6ZEhsc1pUdGNiaUFnSUNBa2MzUjViR1U2SUhOcGJYQnNaVHRjYmlBZ0lDQkFhVzVqYkhWa1pTQmlkWFIwYjI1emRIbHNaU2drYzNSNWJHVXNJQ1JpWVhObExXTnZiRzl5TENBa2RHVjRkQzF6YVhwbExDQWtjR0ZrWkdsdVp5azdYRzRnSUgxY2JseHVJQ0JBYVdZZ2RIbHdaUzF2Wmlna2MzUjViR1VwSUQwOUlHTnZiRzl5SUdGdVpDQjBlWEJsTFc5bUtDUmlZWE5sTFdOdmJHOXlLU0E5UFNCdWRXMWlaWElnZTF4dUlDQWdJQ1J3WVdSa2FXNW5PaUFrZEdWNGRDMXphWHBsTzF4dUlDQWdJQ1IwWlhoMExYTnBlbVU2SUNSaVlYTmxMV052Ykc5eU8xeHVJQ0FnSUNSaVlYTmxMV052Ykc5eU9pQWtjM1I1YkdVN1hHNGdJQ0FnSkhOMGVXeGxPaUJ6YVcxd2JHVTdYRzVjYmlBZ0lDQkFhV1lnSkhCaFpHUnBibWNnUFQwZ2FXNW9aWEpwZENCN1hHNGdJQ0FnSUNBa2NHRmtaR2x1WnpvZ04zQjRJREU0Y0hnN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnUUdsdVkyeDFaR1VnWW5WMGRHOXVjM1I1YkdVb0pITjBlV3hsTENBa1ltRnpaUzFqYjJ4dmNpd2dKSFJsZUhRdGMybDZaU3dnSkhCaFpHUnBibWNwTzF4dUlDQjlYRzVjYmlBZ1FHbG1JSFI1Y0dVdGIyWW9KSE4wZVd4bEtTQTlQU0J1ZFcxaVpYSWdlMXh1SUNBZ0lDUndZV1JrYVc1bk9pQWtZbUZ6WlMxamIyeHZjanRjYmlBZ0lDQWtkR1Y0ZEMxemFYcGxPaUFrYzNSNWJHVTdYRzRnSUNBZ0pHSmhjMlV0WTI5c2IzSTZJQ00wTWprMFpqQTdYRzRnSUNBZ0pITjBlV3hsT2lCemFXMXdiR1U3WEc1Y2JpQWdJQ0JBYVdZZ0pIQmhaR1JwYm1jZ1BUMGdJelF5T1RSbU1DQjdYRzRnSUNBZ0lDQWtjR0ZrWkdsdVp6b2dOM0I0SURFNGNIZzdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1FHbHVZMngxWkdVZ1luVjBkRzl1YzNSNWJHVW9KSE4wZVd4bExDQWtZbUZ6WlMxamIyeHZjaXdnSkhSbGVIUXRjMmw2WlN3Z0pIQmhaR1JwYm1jcE8xeHVJQ0I5WEc1Y2JpQWdKanBrYVhOaFlteGxaQ0I3WEc0Z0lDQWdZM1Z5YzI5eU9pQnViM1F0WVd4c2IzZGxaRHRjYmlBZ0lDQnZjR0ZqYVhSNU9pQXdMalU3WEc0Z0lIMWNibHh1SUNCQWQyRnliaUJjSWxSb1pTQmlkWFIwYjI0Z2JXbDRhVzRnYVhNZ1pHVndjbVZqWVhSbFpDQmhibVFnZDJsc2JDQmlaU0J5WlcxdmRtVmtJR2x1SUhSb1pTQnVaWGgwSUcxaGFtOXlJSFpsY25OcGIyNGdjbVZzWldGelpWd2lPMXh1ZlZ4dVhHNHZMeUJUWld4bFkzUnZjaUJUZEhsc1pTQkNkWFIwYjI1Y2JrQnRhWGhwYmlCaWRYUjBiMjV6ZEhsc1pTZ2tkSGx3WlN3Z0pHSXRZMjlzYjNJc0lDUjBMWE5wZW1Vc0lDUndZV1FwSUh0Y2JpQWdMeThnUjNKaGVYTmpZV3hsSUdKMWRIUnZibHh1SUNCQWFXWWdKSFI1Y0dVZ1BUMGdjMmx0Y0d4bElHRnVaQ0FrWWkxamIyeHZjaUE5UFNCbmNtRjVjMk5oYkdVb0pHSXRZMjlzYjNJcElIdGNiaUFnSUNCQWFXNWpiSFZrWlNCemFXMXdiR1VvSkdJdFkyOXNiM0lzSUhSeWRXVXNJQ1IwTFhOcGVtVXNJQ1J3WVdRcE8xeHVJQ0I5WEc1Y2JpQWdRR2xtSUNSMGVYQmxJRDA5SUhOb2FXNTVJR0Z1WkNBa1lpMWpiMnh2Y2lBOVBTQm5jbUY1YzJOaGJHVW9KR0l0WTI5c2IzSXBJSHRjYmlBZ0lDQkFhVzVqYkhWa1pTQnphR2x1ZVNna1lpMWpiMnh2Y2l3Z2RISjFaU3dnSkhRdGMybDZaU3dnSkhCaFpDazdYRzRnSUgxY2JseHVJQ0JBYVdZZ0pIUjVjR1VnUFQwZ2NHbHNiQ0JoYm1RZ0pHSXRZMjlzYjNJZ1BUMGdaM0poZVhOallXeGxLQ1JpTFdOdmJHOXlLU0I3WEc0Z0lDQWdRR2x1WTJ4MVpHVWdjR2xzYkNna1lpMWpiMnh2Y2l3Z2RISjFaU3dnSkhRdGMybDZaU3dnSkhCaFpDazdYRzRnSUgxY2JseHVJQ0JBYVdZZ0pIUjVjR1VnUFQwZ1pteGhkQ0JoYm1RZ0pHSXRZMjlzYjNJZ1BUMGdaM0poZVhOallXeGxLQ1JpTFdOdmJHOXlLU0I3WEc0Z0lDQWdRR2x1WTJ4MVpHVWdabXhoZENna1lpMWpiMnh2Y2l3Z2RISjFaU3dnSkhRdGMybDZaU3dnSkhCaFpDazdYRzRnSUgxY2JseHVJQ0F2THlCRGIyeHZjbVZrSUdKMWRIUnZibHh1SUNCQWFXWWdKSFI1Y0dVZ1BUMGdjMmx0Y0d4bElIdGNiaUFnSUNCQWFXNWpiSFZrWlNCemFXMXdiR1VvSkdJdFkyOXNiM0lzSUdaaGJITmxMQ0FrZEMxemFYcGxMQ0FrY0dGa0tUdGNiaUFnZlZ4dVhHNGdJRUJsYkhObElHbG1JQ1IwZVhCbElEMDlJSE5vYVc1NUlIdGNiaUFnSUNCQWFXNWpiSFZrWlNCemFHbHVlU2drWWkxamIyeHZjaXdnWm1Gc2MyVXNJQ1IwTFhOcGVtVXNJQ1J3WVdRcE8xeHVJQ0I5WEc1Y2JpQWdRR1ZzYzJVZ2FXWWdKSFI1Y0dVZ1BUMGdjR2xzYkNCN1hHNGdJQ0FnUUdsdVkyeDFaR1VnY0dsc2JDZ2tZaTFqYjJ4dmNpd2dabUZzYzJVc0lDUjBMWE5wZW1Vc0lDUndZV1FwTzF4dUlDQjlYRzVjYmlBZ1FHVnNjMlVnYVdZZ0pIUjVjR1VnUFQwZ1pteGhkQ0I3WEc0Z0lDQWdRR2x1WTJ4MVpHVWdabXhoZENna1lpMWpiMnh2Y2l3Z1ptRnNjMlVzSUNSMExYTnBlbVVzSUNSd1lXUXBPMXh1SUNCOVhHNTlYRzVjYmk4dklGTnBiWEJzWlNCQ2RYUjBiMjVjYmtCdGFYaHBiaUJ6YVcxd2JHVW9KR0poYzJVdFkyOXNiM0lzSUNSbmNtRjVjMk5oYkdVNklHWmhiSE5sTENBa2RHVjRkSE5wZW1VNklHbHVhR1Z5YVhRc0lDUndZV1JrYVc1bk9pQTNjSGdnTVRod2VDa2dlMXh1SUNBa1kyOXNiM0k2SUNBZ0lDQWdJQ0FnYUhOc0tEQXNJREFzSURFd01DVXBPMXh1SUNBa1ltOXlaR1Z5T2lBZ0lDQWdJQ0FnWVdScWRYTjBMV052Ykc5eUtDUmlZWE5sTFdOdmJHOXlMQ0FrYzJGMGRYSmhkR2x2YmpvZ0lEa2xMQ0FnSkd4cFoyaDBibVZ6Y3pvZ0xURTBKU2s3WEc0Z0lDUnBibk5sZEMxemFHRmtiM2M2SUNCaFpHcDFjM1F0WTI5c2IzSW9KR0poYzJVdFkyOXNiM0lzSUNSellYUjFjbUYwYVc5dU9pQXRPQ1VzSUNBa2JHbG5hSFJ1WlhOek9pQWdNVFVsS1R0Y2JpQWdKSE4wYjNBdFozSmhaR2xsYm5RNklHRmthblZ6ZEMxamIyeHZjaWdrWW1GelpTMWpiMnh2Y2l3Z0pITmhkSFZ5WVhScGIyNDZJQ0E1SlN3Z0lDUnNhV2RvZEc1bGMzTTZJQzB4TVNVcE8xeHVJQ0FrZEdWNGRDMXphR0ZrYjNjNklDQWdZV1JxZFhOMExXTnZiRzl5S0NSaVlYTmxMV052Ykc5eUxDQWtjMkYwZFhKaGRHbHZiam9nSURFMUpTd2dKR3hwWjJoMGJtVnpjem9nTFRFNEpTazdYRzVjYmlBZ1FHbG1JR2x6TFd4cFoyaDBLQ1JpWVhObExXTnZiRzl5S1NCN1hHNGdJQ0FnSkdOdmJHOXlPaUFnSUNBZ0lDQm9jMndvTUN3Z01Dd2dNakFsS1R0Y2JpQWdJQ0FrZEdWNGRDMXphR0ZrYjNjNklHRmthblZ6ZEMxamIyeHZjaWdrWW1GelpTMWpiMnh2Y2l3Z0pITmhkSFZ5WVhScGIyNDZJREV3SlN3Z0pHeHBaMmgwYm1WemN6b2dOQ1VwTzF4dUlDQjlYRzVjYmlBZ1FHbG1JQ1JuY21GNWMyTmhiR1VnUFQwZ2RISjFaU0I3WEc0Z0lDQWdKR0p2Y21SbGNqb2dJQ0FnSUNBZ0lHZHlZWGx6WTJGc1pTZ2tZbTl5WkdWeUtUdGNiaUFnSUNBa2FXNXpaWFF0YzJoaFpHOTNPaUFnWjNKaGVYTmpZV3hsS0NScGJuTmxkQzF6YUdGa2IzY3BPMXh1SUNBZ0lDUnpkRzl3TFdkeVlXUnBaVzUwT2lCbmNtRjVjMk5oYkdVb0pITjBiM0F0WjNKaFpHbGxiblFwTzF4dUlDQWdJQ1IwWlhoMExYTm9ZV1J2ZHpvZ0lDQm5jbUY1YzJOaGJHVW9KSFJsZUhRdGMyaGhaRzkzS1R0Y2JpQWdmVnh1WEc0Z0lHSnZjbVJsY2pvZ01YQjRJSE52Ykdsa0lDUmliM0prWlhJN1hHNGdJR0p2Y21SbGNpMXlZV1JwZFhNNklETndlRHRjYmlBZ1ltOTRMWE5vWVdSdmR6b2dhVzV6WlhRZ01DQXhjSGdnTUNBd0lDUnBibk5sZEMxemFHRmtiM2M3WEc0Z0lHTnZiRzl5T2lBa1kyOXNiM0k3WEc0Z0lHUnBjM0JzWVhrNklHbHViR2x1WlMxaWJHOWphenRjYmlBZ1ptOXVkQzF6YVhwbE9pQWtkR1Y0ZEhOcGVtVTdYRzRnSUdadmJuUXRkMlZwWjJoME9pQmliMnhrTzF4dUlDQkFhVzVqYkhWa1pTQnNhVzVsWVhJdFozSmhaR2xsYm5RZ0tDUmlZWE5sTFdOdmJHOXlMQ0FrYzNSdmNDMW5jbUZrYVdWdWRDazdYRzRnSUhCaFpHUnBibWM2SUNSd1lXUmthVzVuTzF4dUlDQjBaWGgwTFdSbFkyOXlZWFJwYjI0NklHNXZibVU3WEc0Z0lIUmxlSFF0YzJoaFpHOTNPaUF3SURGd2VDQXdJQ1IwWlhoMExYTm9ZV1J2ZHp0Y2JpQWdZbUZqYTJkeWIzVnVaQzFqYkdsd09pQndZV1JrYVc1bkxXSnZlRHRjYmx4dUlDQW1PbWh2ZG1WeU9tNXZkQ2c2WkdsellXSnNaV1FwSUh0Y2JpQWdJQ0FrWW1GelpTMWpiMnh2Y2kxb2IzWmxjam9nSUNBZ1lXUnFkWE4wTFdOdmJHOXlLQ1JpWVhObExXTnZiRzl5TENBa2MyRjBkWEpoZEdsdmJqb2dMVFFsTENBa2JHbG5hSFJ1WlhOek9pQXROU1VwTzF4dUlDQWdJQ1JwYm5ObGRDMXphR0ZrYjNjdGFHOTJaWEk2SUNCaFpHcDFjM1F0WTI5c2IzSW9KR0poYzJVdFkyOXNiM0lzSUNSellYUjFjbUYwYVc5dU9pQXROeVVzSUNSc2FXZG9kRzVsYzNNNklDQTFKU2s3WEc0Z0lDQWdKSE4wYjNBdFozSmhaR2xsYm5RdGFHOTJaWEk2SUdGa2FuVnpkQzFqYjJ4dmNpZ2tZbUZ6WlMxamIyeHZjaXdnSkhOaGRIVnlZWFJwYjI0NklDQTRKU3dnSkd4cFoyaDBibVZ6Y3pvZ0xURTBKU2s3WEc1Y2JpQWdJQ0JBYVdZZ0pHZHlZWGx6WTJGc1pTQTlQU0IwY25WbElIdGNiaUFnSUNBZ0lDUmlZWE5sTFdOdmJHOXlMV2h2ZG1WeU9pQWdJQ0JuY21GNWMyTmhiR1VvSkdKaGMyVXRZMjlzYjNJdGFHOTJaWElwTzF4dUlDQWdJQ0FnSkdsdWMyVjBMWE5vWVdSdmR5MW9iM1psY2pvZ0lHZHlZWGx6WTJGc1pTZ2thVzV6WlhRdGMyaGhaRzkzTFdodmRtVnlLVHRjYmlBZ0lDQWdJQ1J6ZEc5d0xXZHlZV1JwWlc1MExXaHZkbVZ5T2lCbmNtRjVjMk5oYkdVb0pITjBiM0F0WjNKaFpHbGxiblF0YUc5MlpYSXBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lFQnBibU5zZFdSbElHeHBibVZoY2kxbmNtRmthV1Z1ZENBb0pHSmhjMlV0WTI5c2IzSXRhRzkyWlhJc0lDUnpkRzl3TFdkeVlXUnBaVzUwTFdodmRtVnlLVHRjYmx4dUlDQWdJR0p2ZUMxemFHRmtiM2M2SUdsdWMyVjBJREFnTVhCNElEQWdNQ0FrYVc1elpYUXRjMmhoWkc5M0xXaHZkbVZ5TzF4dUlDQWdJR04xY25OdmNqb2djRzlwYm5SbGNqdGNiaUFnZlZ4dVhHNGdJQ1k2WVdOMGFYWmxPbTV2ZENnNlpHbHpZV0pzWldRcExGeHVJQ0FtT21adlkzVnpPbTV2ZENnNlpHbHpZV0pzWldRcElIdGNiaUFnSUNBa1ltOXlaR1Z5TFdGamRHbDJaVG9nSUNBZ0lDQWdZV1JxZFhOMExXTnZiRzl5S0NSaVlYTmxMV052Ykc5eUxDQWtjMkYwZFhKaGRHbHZiam9nT1NVc0lDUnNhV2RvZEc1bGMzTTZJQzB4TkNVcE8xeHVJQ0FnSUNScGJuTmxkQzF6YUdGa2IzY3RZV04wYVhabE9pQmhaR3AxYzNRdFkyOXNiM0lvSkdKaGMyVXRZMjlzYjNJc0lDUnpZWFIxY21GMGFXOXVPaUEzSlN3Z0pHeHBaMmgwYm1WemN6b2dMVEUzSlNrN1hHNWNiaUFnSUNCQWFXWWdKR2R5WVhselkyRnNaU0E5UFNCMGNuVmxJSHRjYmlBZ0lDQWdJQ1JpYjNKa1pYSXRZV04wYVhabE9pQWdJQ0FnSUNCbmNtRjVjMk5oYkdVb0pHSnZjbVJsY2kxaFkzUnBkbVVwTzF4dUlDQWdJQ0FnSkdsdWMyVjBMWE5vWVdSdmR5MWhZM1JwZG1VNklHZHlZWGx6WTJGc1pTZ2thVzV6WlhRdGMyaGhaRzkzTFdGamRHbDJaU2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdZbTl5WkdWeU9pQXhjSGdnYzI5c2FXUWdKR0p2Y21SbGNpMWhZM1JwZG1VN1hHNGdJQ0FnWW05NExYTm9ZV1J2ZHpvZ2FXNXpaWFFnTUNBd0lEaHdlQ0EwY0hnZ0pHbHVjMlYwTFhOb1lXUnZkeTFoWTNScGRtVXNJR2x1YzJWMElEQWdNQ0E0Y0hnZ05IQjRJQ1JwYm5ObGRDMXphR0ZrYjNjdFlXTjBhWFpsTzF4dUlDQjlYRzU5WEc1Y2JpOHZJRk5vYVc1NUlFSjFkSFJ2Ymx4dVFHMXBlR2x1SUhOb2FXNTVLQ1JpWVhObExXTnZiRzl5TENBa1ozSmhlWE5qWVd4bE9pQm1ZV3h6WlN3Z0pIUmxlSFJ6YVhwbE9pQnBibWhsY21sMExDQWtjR0ZrWkdsdVp6b2dOM0I0SURFNGNIZ3BJSHRjYmlBZ0pHTnZiRzl5T2lBZ0lDQWdJQ0FnSUdoemJDZ3dMQ0F3TENBeE1EQWxLVHRjYmlBZ0pHSnZjbVJsY2pvZ0lDQWdJQ0FnSUdGa2FuVnpkQzFqYjJ4dmNpZ2tZbUZ6WlMxamIyeHZjaXdnSkhKbFpEb2dMVEV4Tnl3Z0pHZHlaV1Z1T2lBdE1URXhMQ0FrWW14MVpUb2dMVGd4S1R0Y2JpQWdKR0p2Y21SbGNpMWliM1IwYjIwNklHRmthblZ6ZEMxamIyeHZjaWdrWW1GelpTMWpiMnh2Y2l3Z0pISmxaRG9nTFRFeU5pd2dKR2R5WldWdU9pQXRNVEkzTENBa1lteDFaVG9nTFRFeU1pazdYRzRnSUNSbWIzVnlkR2d0YzNSdmNEb2dJQ0JoWkdwMWMzUXRZMjlzYjNJb0pHSmhjMlV0WTI5c2IzSXNJQ1J5WldRNklDMDNPU3dnSUNSbmNtVmxiam9nTFRjd0xDQWdKR0pzZFdVNklDMDBOaWs3WEc0Z0lDUnBibk5sZEMxemFHRmtiM2M2SUNCaFpHcDFjM1F0WTI5c2IzSW9KR0poYzJVdFkyOXNiM0lzSUNSeVpXUTZJQ0F6Tnl3Z0lDUm5jbVZsYmpvZ0lESTVMQ0FnSkdKc2RXVTZJQ0F4TWlrN1hHNGdJQ1J6WldOdmJtUXRjM1J2Y0RvZ0lDQmhaR3AxYzNRdFkyOXNiM0lvSkdKaGMyVXRZMjlzYjNJc0lDUnlaV1E2SUMwMU5pd2dJQ1JuY21WbGJqb2dMVFV3TENBZ0pHSnNkV1U2SUMwek15azdYRzRnSUNSMFpYaDBMWE5vWVdSdmR6b2dJQ0JoWkdwMWMzUXRZMjlzYjNJb0pHSmhjMlV0WTI5c2IzSXNJQ1J5WldRNklDMHhOREFzSUNSbmNtVmxiam9nTFRFME1Td2dKR0pzZFdVNklDMHhNVFFwTzF4dUlDQWtkR2hwY21RdGMzUnZjRG9nSUNBZ1lXUnFkWE4wTFdOdmJHOXlLQ1JpWVhObExXTnZiRzl5TENBa2NtVmtPaUF0T0RZc0lDQWtaM0psWlc0NklDMDNOU3dnSUNSaWJIVmxPaUF0TkRncE8xeHVYRzRnSUVCcFppQnBjeTFzYVdkb2RDZ2tZbUZ6WlMxamIyeHZjaWtnZTF4dUlDQWdJQ1JqYjJ4dmNqb2dJQ0FnSUNBZ2FITnNLREFzSURBc0lESXdKU2s3WEc0Z0lDQWdKSFJsZUhRdGMyaGhaRzkzT2lCaFpHcDFjM1F0WTI5c2IzSW9KR0poYzJVdFkyOXNiM0lzSUNSellYUjFjbUYwYVc5dU9pQXhNQ1VzSUNSc2FXZG9kRzVsYzNNNklEUWxLVHRjYmlBZ2ZWeHVYRzRnSUVCcFppQWtaM0poZVhOallXeGxJRDA5SUhSeWRXVWdlMXh1SUNBZ0lDUmliM0prWlhJNklDQWdJQ0FnSUNCbmNtRjVjMk5oYkdVb0pHSnZjbVJsY2lrN1hHNGdJQ0FnSkdKdmNtUmxjaTFpYjNSMGIyMDZJR2R5WVhselkyRnNaU2drWW05eVpHVnlMV0p2ZEhSdmJTazdYRzRnSUNBZ0pHWnZkWEowYUMxemRHOXdPaUFnSUdkeVlYbHpZMkZzWlNna1ptOTFjblJvTFhOMGIzQXBPMXh1SUNBZ0lDUnBibk5sZEMxemFHRmtiM2M2SUNCbmNtRjVjMk5oYkdVb0pHbHVjMlYwTFhOb1lXUnZkeWs3WEc0Z0lDQWdKSE5sWTI5dVpDMXpkRzl3T2lBZ0lHZHlZWGx6WTJGc1pTZ2tjMlZqYjI1a0xYTjBiM0FwTzF4dUlDQWdJQ1IwWlhoMExYTm9ZV1J2ZHpvZ0lDQm5jbUY1YzJOaGJHVW9KSFJsZUhRdGMyaGhaRzkzS1R0Y2JpQWdJQ0FrZEdocGNtUXRjM1J2Y0RvZ0lDQWdaM0poZVhOallXeGxLQ1IwYUdseVpDMXpkRzl3S1R0Y2JpQWdmVnh1WEc0Z0lFQnBibU5zZFdSbElHeHBibVZoY2kxbmNtRmthV1Z1ZENoMGIzQXNJQ1JpWVhObExXTnZiRzl5SURBbExDQWtjMlZqYjI1a0xYTjBiM0FnTlRBbExDQWtkR2hwY21RdGMzUnZjQ0ExTUNVc0lDUm1iM1Z5ZEdndGMzUnZjQ0F4TURBbEtUdGNibHh1SUNCaWIzSmtaWEk2SURGd2VDQnpiMnhwWkNBa1ltOXlaR1Z5TzF4dUlDQmliM0prWlhJdFltOTBkRzl0T2lBeGNIZ2djMjlzYVdRZ0pHSnZjbVJsY2kxaWIzUjBiMjA3WEc0Z0lHSnZjbVJsY2kxeVlXUnBkWE02SURWd2VEdGNiaUFnWW05NExYTm9ZV1J2ZHpvZ2FXNXpaWFFnTUNBeGNIZ2dNQ0F3SUNScGJuTmxkQzF6YUdGa2IzYzdYRzRnSUdOdmJHOXlPaUFrWTI5c2IzSTdYRzRnSUdScGMzQnNZWGs2SUdsdWJHbHVaUzFpYkc5amF6dGNiaUFnWm05dWRDMXphWHBsT2lBa2RHVjRkSE5wZW1VN1hHNGdJR1p2Ym5RdGQyVnBaMmgwT2lCaWIyeGtPMXh1SUNCd1lXUmthVzVuT2lBa2NHRmtaR2x1Wnp0Y2JpQWdkR1Y0ZEMxaGJHbG5iam9nWTJWdWRHVnlPMXh1SUNCMFpYaDBMV1JsWTI5eVlYUnBiMjQ2SUc1dmJtVTdYRzRnSUhSbGVIUXRjMmhoWkc5M09pQXdJQzB4Y0hnZ01YQjRJQ1IwWlhoMExYTm9ZV1J2ZHp0Y2JseHVJQ0FtT21odmRtVnlPbTV2ZENnNlpHbHpZV0pzWldRcElIdGNiaUFnSUNBa1ptbHljM1F0YzNSdmNDMW9iM1psY2pvZ0lHRmthblZ6ZEMxamIyeHZjaWdrWW1GelpTMWpiMnh2Y2l3Z0pISmxaRG9nTFRFekxDQWtaM0psWlc0NklDMHhOU3dnSkdKc2RXVTZJQzB4T0NrN1hHNGdJQ0FnSkhObFkyOXVaQzF6ZEc5d0xXaHZkbVZ5T2lCaFpHcDFjM1F0WTI5c2IzSW9KR0poYzJVdFkyOXNiM0lzSUNSeVpXUTZJQzAyTml3Z0pHZHlaV1Z1T2lBdE5qSXNJQ1JpYkhWbE9pQXROVEVwTzF4dUlDQWdJQ1IwYUdseVpDMXpkRzl3TFdodmRtVnlPaUFnWVdScWRYTjBMV052Ykc5eUtDUmlZWE5sTFdOdmJHOXlMQ0FrY21Wa09pQXRPVE1zSUNSbmNtVmxiam9nTFRnMUxDQWtZbXgxWlRvZ0xUWTJLVHRjYmlBZ0lDQWtabTkxY25Sb0xYTjBiM0F0YUc5MlpYSTZJR0ZrYW5WemRDMWpiMnh2Y2lna1ltRnpaUzFqYjJ4dmNpd2dKSEpsWkRvZ0xUZzJMQ0FrWjNKbFpXNDZJQzA0TUN3Z0pHSnNkV1U2SUMwMk15azdYRzVjYmlBZ0lDQkFhV1lnSkdkeVlYbHpZMkZzWlNBOVBTQjBjblZsSUh0Y2JpQWdJQ0FnSUNSbWFYSnpkQzF6ZEc5d0xXaHZkbVZ5T2lBZ1ozSmhlWE5qWVd4bEtDUm1hWEp6ZEMxemRHOXdMV2h2ZG1WeUtUdGNiaUFnSUNBZ0lDUnpaV052Ym1RdGMzUnZjQzFvYjNabGNqb2daM0poZVhOallXeGxLQ1J6WldOdmJtUXRjM1J2Y0Mxb2IzWmxjaWs3WEc0Z0lDQWdJQ0FrZEdocGNtUXRjM1J2Y0Mxb2IzWmxjam9nSUdkeVlYbHpZMkZzWlNna2RHaHBjbVF0YzNSdmNDMW9iM1psY2lrN1hHNGdJQ0FnSUNBa1ptOTFjblJvTFhOMGIzQXRhRzkyWlhJNklHZHlZWGx6WTJGc1pTZ2tabTkxY25Sb0xYTjBiM0F0YUc5MlpYSXBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lFQnBibU5zZFdSbElHeHBibVZoY2kxbmNtRmthV1Z1ZENoMGIzQXNJQ1JtYVhKemRDMXpkRzl3TFdodmRtVnlJQ0F3SlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBa2MyVmpiMjVrTFhOMGIzQXRhRzkyWlhJZ05UQWxMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ1IwYUdseVpDMXpkRzl3TFdodmRtVnlJQ0ExTUNVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0pHWnZkWEowYUMxemRHOXdMV2h2ZG1WeUlERXdNQ1VwTzF4dUlDQWdJR04xY25OdmNqb2djRzlwYm5SbGNqdGNiaUFnZlZ4dVhHNGdJQ1k2WVdOMGFYWmxPbTV2ZENnNlpHbHpZV0pzWldRcExGeHVJQ0FtT21adlkzVnpPbTV2ZENnNlpHbHpZV0pzWldRcElIdGNiaUFnSUNBa2FXNXpaWFF0YzJoaFpHOTNMV0ZqZEdsMlpUb2dZV1JxZFhOMExXTnZiRzl5S0NSaVlYTmxMV052Ykc5eUxDQWtjbVZrT2lBdE1URXhMQ0FrWjNKbFpXNDZJQzB4TVRZc0lDUmliSFZsT2lBdE1USXlLVHRjYmx4dUlDQWdJRUJwWmlBa1ozSmhlWE5qWVd4bElEMDlJSFJ5ZFdVZ2UxeHVJQ0FnSUNBZ0pHbHVjMlYwTFhOb1lXUnZkeTFoWTNScGRtVTZJR2R5WVhselkyRnNaU2drYVc1elpYUXRjMmhoWkc5M0xXRmpkR2wyWlNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnWW05NExYTm9ZV1J2ZHpvZ2FXNXpaWFFnTUNBd0lESXdjSGdnTUNBa2FXNXpaWFF0YzJoaFpHOTNMV0ZqZEdsMlpUdGNiaUFnZlZ4dWZWeHVYRzR2THlCUWFXeHNJRUoxZEhSdmJseHVRRzFwZUdsdUlIQnBiR3dvSkdKaGMyVXRZMjlzYjNJc0lDUm5jbUY1YzJOaGJHVTZJR1poYkhObExDQWtkR1Y0ZEhOcGVtVTZJR2x1YUdWeWFYUXNJQ1J3WVdSa2FXNW5PaUEzY0hnZ01UaHdlQ2tnZTF4dUlDQWtZMjlzYjNJNklDQWdJQ0FnSUNBZ2FITnNLREFzSURBc0lERXdNQ1VwTzF4dUlDQWtZbTl5WkdWeUxXSnZkSFJ2YlRvZ1lXUnFkWE4wTFdOdmJHOXlLQ1JpWVhObExXTnZiRzl5TENBa2FIVmxPaUFnT0N3Z0pITmhkSFZ5WVhScGIyNDZJQzB4TVNVc0lDUnNhV2RvZEc1bGMzTTZJQzB5TmlVcE8xeHVJQ0FrWW05eVpHVnlMWE5wWkdWek9pQWdZV1JxZFhOMExXTnZiRzl5S0NSaVlYTmxMV052Ykc5eUxDQWthSFZsT2lBZ05Dd2dKSE5oZEhWeVlYUnBiMjQ2SUMweU1TVXNJQ1JzYVdkb2RHNWxjM002SUMweU1TVXBPMXh1SUNBa1ltOXlaR1Z5TFhSdmNEb2dJQ0FnWVdScWRYTjBMV052Ykc5eUtDUmlZWE5sTFdOdmJHOXlMQ0FrYUhWbE9pQXRNU3dnSkhOaGRIVnlZWFJwYjI0NklDMHpNQ1VzSUNSc2FXZG9kRzVsYzNNNklDMHhOU1VwTzF4dUlDQWthVzV6WlhRdGMyaGhaRzkzT2lBZ1lXUnFkWE4wTFdOdmJHOXlLQ1JpWVhObExXTnZiRzl5TENBa2FIVmxPaUF0TVN3Z0pITmhkSFZ5WVhScGIyNDZJQzB4SlN3Z0lDUnNhV2RvZEc1bGMzTTZJQ0EzSlNrN1hHNGdJQ1J6ZEc5d0xXZHlZV1JwWlc1ME9pQmhaR3AxYzNRdFkyOXNiM0lvSkdKaGMyVXRZMjlzYjNJc0lDUm9kV1U2SUNBNExDQWtjMkYwZFhKaGRHbHZiam9nSURFMEpTd2dKR3hwWjJoMGJtVnpjem9nTFRFd0pTazdYRzRnSUNSMFpYaDBMWE5vWVdSdmR6b2dJQ0JoWkdwMWMzUXRZMjlzYjNJb0pHSmhjMlV0WTI5c2IzSXNJQ1JvZFdVNklDQTFMQ0FrYzJGMGRYSmhkR2x2YmpvZ0xURTVKU3dnSkd4cFoyaDBibVZ6Y3pvZ0xURTFKU2s3WEc1Y2JpQWdRR2xtSUdsekxXeHBaMmgwS0NSaVlYTmxMV052Ykc5eUtTQjdYRzRnSUNBZ0pHTnZiRzl5T2lBZ0lDQWdJQ0JvYzJ3b01Dd2dNQ3dnTWpBbEtUdGNiaUFnSUNBa2RHVjRkQzF6YUdGa2IzYzZJR0ZrYW5WemRDMWpiMnh2Y2lna1ltRnpaUzFqYjJ4dmNpd2dKSE5oZEhWeVlYUnBiMjQ2SURFd0pTd2dKR3hwWjJoMGJtVnpjem9nTkNVcE8xeHVJQ0I5WEc1Y2JpQWdRR2xtSUNSbmNtRjVjMk5oYkdVZ1BUMGdkSEoxWlNCN1hHNGdJQ0FnSkdKdmNtUmxjaTFpYjNSMGIyMDZJR2R5WVhselkyRnNaU2drWW05eVpHVnlMV0p2ZEhSdmJTazdYRzRnSUNBZ0pHSnZjbVJsY2kxemFXUmxjem9nSUdkeVlYbHpZMkZzWlNna1ltOXlaR1Z5TFhOcFpHVnpLVHRjYmlBZ0lDQWtZbTl5WkdWeUxYUnZjRG9nSUNBZ1ozSmhlWE5qWVd4bEtDUmliM0prWlhJdGRHOXdLVHRjYmlBZ0lDQWthVzV6WlhRdGMyaGhaRzkzT2lBZ1ozSmhlWE5qWVd4bEtDUnBibk5sZEMxemFHRmtiM2NwTzF4dUlDQWdJQ1J6ZEc5d0xXZHlZV1JwWlc1ME9pQm5jbUY1YzJOaGJHVW9KSE4wYjNBdFozSmhaR2xsYm5RcE8xeHVJQ0FnSUNSMFpYaDBMWE5vWVdSdmR6b2dJQ0JuY21GNWMyTmhiR1VvSkhSbGVIUXRjMmhoWkc5M0tUdGNiaUFnZlZ4dVhHNGdJR0p2Y21SbGNqb2dNWEI0SUhOdmJHbGtJQ1JpYjNKa1pYSXRkRzl3TzF4dUlDQmliM0prWlhJdFkyOXNiM0k2SUNSaWIzSmtaWEl0ZEc5d0lDUmliM0prWlhJdGMybGtaWE1nSkdKdmNtUmxjaTFpYjNSMGIyMDdYRzRnSUdKdmNtUmxjaTF5WVdScGRYTTZJREUyY0hnN1hHNGdJR0p2ZUMxemFHRmtiM2M2SUdsdWMyVjBJREFnTVhCNElEQWdNQ0FrYVc1elpYUXRjMmhoWkc5M08xeHVJQ0JqYjJ4dmNqb2dKR052Ykc5eU8xeHVJQ0JrYVhOd2JHRjVPaUJwYm14cGJtVXRZbXh2WTJzN1hHNGdJR1p2Ym5RdGMybDZaVG9nSkhSbGVIUnphWHBsTzF4dUlDQm1iMjUwTFhkbGFXZG9kRG9nYm05eWJXRnNPMXh1SUNCc2FXNWxMV2hsYVdkb2REb2dNVHRjYmlBZ1FHbHVZMngxWkdVZ2JHbHVaV0Z5TFdkeVlXUnBaVzUwSUNna1ltRnpaUzFqYjJ4dmNpd2dKSE4wYjNBdFozSmhaR2xsYm5RcE8xeHVJQ0J3WVdSa2FXNW5PaUFrY0dGa1pHbHVaenRjYmlBZ2RHVjRkQzFoYkdsbmJqb2dZMlZ1ZEdWeU8xeHVJQ0IwWlhoMExXUmxZMjl5WVhScGIyNDZJRzV2Ym1VN1hHNGdJSFJsZUhRdGMyaGhaRzkzT2lBd0lDMHhjSGdnTVhCNElDUjBaWGgwTFhOb1lXUnZkenRjYmlBZ1ltRmphMmR5YjNWdVpDMWpiR2x3T2lCd1lXUmthVzVuTFdKdmVEdGNibHh1SUNBbU9taHZkbVZ5T201dmRDZzZaR2x6WVdKc1pXUXBJSHRjYmlBZ0lDQWtZbUZ6WlMxamIyeHZjaTFvYjNabGNqb2dJQ0FnWVdScWRYTjBMV052Ykc5eUtDUmlZWE5sTFdOdmJHOXlMQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0pHeHBaMmgwYm1WemN6b2dMVFF1TlNVcE8xeHVJQ0FnSUNSaWIzSmtaWEl0WW05MGRHOXRPaUFnSUNBZ0lDQmhaR3AxYzNRdFkyOXNiM0lvSkdKaGMyVXRZMjlzYjNJc0lDUm9kV1U2SUNBNExDQWtjMkYwZFhKaGRHbHZiam9nSURFekxqVWxMQ0FrYkdsbmFIUnVaWE56T2lBdE16SWxLVHRjYmlBZ0lDQWtZbTl5WkdWeUxYTnBaR1Z6T2lBZ0lDQWdJQ0FnWVdScWRYTjBMV052Ykc5eUtDUmlZWE5sTFdOdmJHOXlMQ0FrYUhWbE9pQWdOQ3dnSkhOaGRIVnlZWFJwYjI0NklDMHlKU3dnSUNBZ0pHeHBaMmgwYm1WemN6b2dMVEkzSlNrN1hHNGdJQ0FnSkdKdmNtUmxjaTEwYjNBNklDQWdJQ0FnSUNBZ0lHRmthblZ6ZEMxamIyeHZjaWdrWW1GelpTMWpiMnh2Y2l3Z0pHaDFaVG9nTFRFc0lDUnpZWFIxY21GMGFXOXVPaUF0TVRjbExDQWdJQ1JzYVdkb2RHNWxjM002SUMweU1TVXBPMXh1SUNBZ0lDUnBibk5sZEMxemFHRmtiM2N0YUc5MlpYSTZJQ0JoWkdwMWMzUXRZMjlzYjNJb0pHSmhjMlV0WTI5c2IzSXNJQ0FnSUNBZ0lDQWdJQ0FrYzJGMGRYSmhkR2x2YmpvZ0xURWxMQ0FnSUNBa2JHbG5hSFJ1WlhOek9pQWdNeVVwTzF4dUlDQWdJQ1J6ZEc5d0xXZHlZV1JwWlc1MExXaHZkbVZ5T2lCaFpHcDFjM1F0WTI5c2IzSW9KR0poYzJVdFkyOXNiM0lzSUNSb2RXVTZJQ0E0TENBa2MyRjBkWEpoZEdsdmJqb2dMVFFsTENBZ0lDQWtiR2xuYUhSdVpYTnpPaUF0TVRVdU5TVXBPMXh1SUNBZ0lDUjBaWGgwTFhOb1lXUnZkeTFvYjNabGNqb2dJQ0JoWkdwMWMzUXRZMjlzYjNJb0pHSmhjMlV0WTI5c2IzSXNJQ1JvZFdVNklDQTFMQ0FrYzJGMGRYSmhkR2x2YmpvZ0xUVWxMQ0FnSUNBa2JHbG5hSFJ1WlhOek9pQXRNaklsS1R0Y2JseHVJQ0FnSUVCcFppQWtaM0poZVhOallXeGxJRDA5SUhSeWRXVWdlMXh1SUNBZ0lDQWdKR0poYzJVdFkyOXNiM0l0YUc5MlpYSTZJQ0FnSUdkeVlYbHpZMkZzWlNna1ltRnpaUzFqYjJ4dmNpMW9iM1psY2lrN1hHNGdJQ0FnSUNBa1ltOXlaR1Z5TFdKdmRIUnZiVG9nSUNBZ0lDQWdaM0poZVhOallXeGxLQ1JpYjNKa1pYSXRZbTkwZEc5dEtUdGNiaUFnSUNBZ0lDUmliM0prWlhJdGMybGtaWE02SUNBZ0lDQWdJQ0JuY21GNWMyTmhiR1VvSkdKdmNtUmxjaTF6YVdSbGN5azdYRzRnSUNBZ0lDQWtZbTl5WkdWeUxYUnZjRG9nSUNBZ0lDQWdJQ0FnWjNKaGVYTmpZV3hsS0NSaWIzSmtaWEl0ZEc5d0tUdGNiaUFnSUNBZ0lDUnBibk5sZEMxemFHRmtiM2N0YUc5MlpYSTZJQ0JuY21GNWMyTmhiR1VvSkdsdWMyVjBMWE5vWVdSdmR5MW9iM1psY2lrN1hHNGdJQ0FnSUNBa2MzUnZjQzFuY21Ga2FXVnVkQzFvYjNabGNqb2daM0poZVhOallXeGxLQ1J6ZEc5d0xXZHlZV1JwWlc1MExXaHZkbVZ5S1R0Y2JpQWdJQ0FnSUNSMFpYaDBMWE5vWVdSdmR5MW9iM1psY2pvZ0lDQm5jbUY1YzJOaGJHVW9KSFJsZUhRdGMyaGhaRzkzTFdodmRtVnlLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQkFhVzVqYkhWa1pTQnNhVzVsWVhJdFozSmhaR2xsYm5RZ0tDUmlZWE5sTFdOdmJHOXlMV2h2ZG1WeUxDQWtjM1J2Y0MxbmNtRmthV1Z1ZEMxb2IzWmxjaWs3WEc1Y2JpQWdJQ0JpWVdOclozSnZkVzVrTFdOc2FYQTZJSEJoWkdScGJtY3RZbTk0TzF4dUlDQWdJR0p2Y21SbGNqb2dNWEI0SUhOdmJHbGtJQ1JpYjNKa1pYSXRkRzl3TzF4dUlDQWdJR0p2Y21SbGNpMWpiMnh2Y2pvZ0pHSnZjbVJsY2kxMGIzQWdKR0p2Y21SbGNpMXphV1JsY3lBa1ltOXlaR1Z5TFdKdmRIUnZiVHRjYmlBZ0lDQmliM2d0YzJoaFpHOTNPaUJwYm5ObGRDQXdJREZ3ZUNBd0lEQWdKR2x1YzJWMExYTm9ZV1J2ZHkxb2IzWmxjanRjYmlBZ0lDQmpkWEp6YjNJNklIQnZhVzUwWlhJN1hHNGdJQ0FnZEdWNGRDMXphR0ZrYjNjNklEQWdMVEZ3ZUNBeGNIZ2dKSFJsZUhRdGMyaGhaRzkzTFdodmRtVnlPMXh1SUNCOVhHNWNiaUFnSmpwaFkzUnBkbVU2Ym05MEtEcGthWE5oWW14bFpDa3NYRzRnSUNZNlptOWpkWE02Ym05MEtEcGthWE5oWW14bFpDa2dlMXh1SUNBZ0lDUmhZM1JwZG1VdFkyOXNiM0k2SUNBZ0lDQWdJQ0FnWVdScWRYTjBMV052Ykc5eUtDUmlZWE5sTFdOdmJHOXlMQ0FrYUhWbE9pQTBMQ0FnSkhOaGRIVnlZWFJwYjI0NklDMHhNaVVzSUNBa2JHbG5hSFJ1WlhOek9pQXRNVEFsS1R0Y2JpQWdJQ0FrWW05eVpHVnlMV0ZqZEdsMlpUb2dJQ0FnSUNBZ0lHRmthblZ6ZEMxamIyeHZjaWdrWW1GelpTMWpiMnh2Y2l3Z0pHaDFaVG9nTml3Z0lDUnpZWFIxY21GMGFXOXVPaUF0TWk0MUpTd2dKR3hwWjJoMGJtVnpjem9nTFRNd0pTazdYRzRnSUNBZ0pHSnZjbVJsY2kxaWIzUjBiMjB0WVdOMGFYWmxPaUJoWkdwMWMzUXRZMjlzYjNJb0pHSmhjMlV0WTI5c2IzSXNJQ1JvZFdVNklERXhMQ0FrYzJGMGRYSmhkR2x2YmpvZ0lEWWxMQ0FnSUNSc2FXZG9kRzVsYzNNNklDMHpNU1VwTzF4dUlDQWdJQ1JwYm5ObGRDMXphR0ZrYjNjdFlXTjBhWFpsT2lBZ1lXUnFkWE4wTFdOdmJHOXlLQ1JpWVhObExXTnZiRzl5TENBa2FIVmxPaUE1TENBZ0pITmhkSFZ5WVhScGIyNDZJQ0F5SlN3Z0lDQWtiR2xuYUhSdVpYTnpPaUF0TWpFdU5TVXBPMXh1SUNBZ0lDUjBaWGgwTFhOb1lXUnZkeTFoWTNScGRtVTZJQ0FnWVdScWRYTjBMV052Ykc5eUtDUmlZWE5sTFdOdmJHOXlMQ0FrYUhWbE9pQTFMQ0FnSkhOaGRIVnlZWFJwYjI0NklDMHhNaVVzSUNBa2JHbG5hSFJ1WlhOek9pQXRNakV1TlNVcE8xeHVYRzRnSUNBZ1FHbG1JQ1JuY21GNWMyTmhiR1VnUFQwZ2RISjFaU0I3WEc0Z0lDQWdJQ0FrWVdOMGFYWmxMV052Ykc5eU9pQWdJQ0FnSUNBZ0lHZHlZWGx6WTJGc1pTZ2tZV04wYVhabExXTnZiRzl5S1R0Y2JpQWdJQ0FnSUNSaWIzSmtaWEl0WVdOMGFYWmxPaUFnSUNBZ0lDQWdaM0poZVhOallXeGxLQ1JpYjNKa1pYSXRZV04wYVhabEtUdGNiaUFnSUNBZ0lDUmliM0prWlhJdFltOTBkRzl0TFdGamRHbDJaVG9nWjNKaGVYTmpZV3hsS0NSaWIzSmtaWEl0WW05MGRHOXRMV0ZqZEdsMlpTazdYRzRnSUNBZ0lDQWthVzV6WlhRdGMyaGhaRzkzTFdGamRHbDJaVG9nSUdkeVlYbHpZMkZzWlNna2FXNXpaWFF0YzJoaFpHOTNMV0ZqZEdsMlpTazdYRzRnSUNBZ0lDQWtkR1Y0ZEMxemFHRmtiM2N0WVdOMGFYWmxPaUFnSUdkeVlYbHpZMkZzWlNna2RHVjRkQzF6YUdGa2IzY3RZV04wYVhabEtUdGNiaUFnSUNCOVhHNWNiaUFnSUNCaVlXTnJaM0p2ZFc1a09pQWtZV04wYVhabExXTnZiRzl5TzF4dUlDQWdJR0p2Y21SbGNqb2dNWEI0SUhOdmJHbGtJQ1JpYjNKa1pYSXRZV04wYVhabE8xeHVJQ0FnSUdKdmNtUmxjaTFpYjNSMGIyMDZJREZ3ZUNCemIyeHBaQ0FrWW05eVpHVnlMV0p2ZEhSdmJTMWhZM1JwZG1VN1hHNGdJQ0FnWW05NExYTm9ZV1J2ZHpvZ2FXNXpaWFFnTUNBd0lEWndlQ0F6Y0hnZ0pHbHVjMlYwTFhOb1lXUnZkeTFoWTNScGRtVTdYRzRnSUNBZ2RHVjRkQzF6YUdGa2IzYzZJREFnTFRGd2VDQXhjSGdnSkhSbGVIUXRjMmhoWkc5M0xXRmpkR2wyWlR0Y2JpQWdmVnh1ZlZ4dVhHNHZMeUJHYkdGMElFSjFkSFJ2Ymx4dVFHMXBlR2x1SUdac1lYUW9KR0poYzJVdFkyOXNiM0lzSUNSbmNtRjVjMk5oYkdVNklHWmhiSE5sTENBa2RHVjRkSE5wZW1VNklHbHVhR1Z5YVhRc0lDUndZV1JrYVc1bk9pQTNjSGdnTVRod2VDa2dlMXh1SUNBa1kyOXNiM0k2SUNBZ0lDQWdJQ0FnYUhOc0tEQXNJREFzSURFd01DVXBPMXh1WEc0Z0lFQnBaaUJwY3kxc2FXZG9kQ2drWW1GelpTMWpiMnh2Y2lrZ2UxeHVJQ0FnSUNSamIyeHZjam9nSUNBZ0lDQWdhSE5zS0RBc0lEQXNJREl3SlNrN1hHNGdJSDFjYmx4dUlDQmlZV05yWjNKdmRXNWtMV052Ykc5eU9pQWtZbUZ6WlMxamIyeHZjanRjYmlBZ1ltOXlaR1Z5TFhKaFpHbDFjem9nTTNCNE8xeHVJQ0JpYjNKa1pYSTZJREE3WEc0Z0lHTnZiRzl5T2lBa1kyOXNiM0k3WEc0Z0lHUnBjM0JzWVhrNklHbHViR2x1WlMxaWJHOWphenRjYmlBZ1ptOXVkQzF6YVhwbE9pQWtkR1Y0ZEhOcGVtVTdYRzRnSUdadmJuUXRkMlZwWjJoME9pQmliMnhrTzF4dUlDQndZV1JrYVc1bk9pQWtjR0ZrWkdsdVp6dGNiaUFnZEdWNGRDMWtaV052Y21GMGFXOXVPaUJ1YjI1bE8xeHVJQ0JpWVdOclozSnZkVzVrTFdOc2FYQTZJSEJoWkdScGJtY3RZbTk0TzF4dVhHNGdJQ1k2YUc5MlpYSTZibTkwS0Rwa2FYTmhZbXhsWkNsN1hHNGdJQ0FnSkdKaGMyVXRZMjlzYjNJdGFHOTJaWEk2SUNBZ0lHRmthblZ6ZEMxamIyeHZjaWdrWW1GelpTMWpiMnh2Y2l3Z0pITmhkSFZ5WVhScGIyNDZJRFFsTENBa2JHbG5hSFJ1WlhOek9pQTFKU2s3WEc1Y2JpQWdJQ0JBYVdZZ0pHZHlZWGx6WTJGc1pTQTlQU0IwY25WbElIdGNiaUFnSUNBZ0lDUmlZWE5sTFdOdmJHOXlMV2h2ZG1WeU9pQm5jbUY1YzJOaGJHVW9KR0poYzJVdFkyOXNiM0l0YUc5MlpYSXBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHSmhZMnRuY205MWJtUXRZMjlzYjNJNklDUmlZWE5sTFdOdmJHOXlMV2h2ZG1WeU8xeHVJQ0FnSUdOMWNuTnZjam9nY0c5cGJuUmxjanRjYmlBZ2ZWeHVYRzRnSUNZNllXTjBhWFpsT201dmRDZzZaR2x6WVdKc1pXUXBMRnh1SUNBbU9tWnZZM1Z6T201dmRDZzZaR2x6WVdKc1pXUXBJSHRjYmlBZ0lDQWtZbUZ6WlMxamIyeHZjaTFoWTNScGRtVTZJR0ZrYW5WemRDMWpiMnh2Y2lna1ltRnpaUzFqYjJ4dmNpd2dKSE5oZEhWeVlYUnBiMjQ2SUMwMEpTd2dKR3hwWjJoMGJtVnpjem9nTFRVbEtUdGNibHh1SUNBZ0lFQnBaaUFrWjNKaGVYTmpZV3hsSUQwOUlIUnlkV1VnZTF4dUlDQWdJQ0FnSkdKaGMyVXRZMjlzYjNJdFlXTjBhWFpsT2lCbmNtRjVjMk5oYkdVb0pHSmhjMlV0WTI5c2IzSXRZV04wYVhabEtUdGNiaUFnSUNCOVhHNWNiaUFnSUNCaVlXTnJaM0p2ZFc1a0xXTnZiRzl5T2lBa1ltRnpaUzFqYjJ4dmNpMWhZM1JwZG1VN1hHNGdJQ0FnWTNWeWMyOXlPaUJ3YjJsdWRHVnlPMXh1SUNCOVhHNTlYRzVjYmk4dklFWnNaWGhwWW14bElHZHlhV1JjYmtCbWRXNWpkR2x2YmlCbWJHVjRMV2R5YVdRb0pHTnZiSFZ0Ym5Nc0lDUmpiMjUwWVdsdVpYSXRZMjlzZFcxdWN6b2dKR1puTFcxaGVDMWpiMngxYlc1ektTQjdYRzRnSUNSM2FXUjBhRG9nSkdOdmJIVnRibk1nS2lBa1ptY3RZMjlzZFcxdUlDc2dLQ1JqYjJ4MWJXNXpJQzBnTVNrZ0tpQWtabWN0WjNWMGRHVnlPMXh1SUNBa1kyOXVkR0ZwYm1WeUxYZHBaSFJvT2lBa1kyOXVkR0ZwYm1WeUxXTnZiSFZ0Ym5NZ0tpQWtabWN0WTI5c2RXMXVJQ3NnS0NSamIyNTBZV2x1WlhJdFkyOXNkVzF1Y3lBdElERXBJQ29nSkdabkxXZDFkSFJsY2p0Y2JpQWdRSEpsZEhWeWJpQndaWEpqWlc1MFlXZGxLQ1IzYVdSMGFDQXZJQ1JqYjI1MFlXbHVaWEl0ZDJsa2RHZ3BPMXh1WEc0Z0lFQjNZWEp1SUZ3aVZHaGxJR1pzWlhndFozSnBaQ0JtZFc1amRHbHZiaUJwY3lCa1pYQnlaV05oZEdWa0lHRnVaQ0IzYVd4c0lHSmxJSEpsYlc5MlpXUWdhVzRnZEdobElHNWxlSFFnYldGcWIzSWdkbVZ5YzJsdmJpQnlaV3hsWVhObFhDSTdYRzU5WEc1Y2JpOHZJRVpzWlhocFlteGxJR2QxZEhSbGNseHVRR1oxYm1OMGFXOXVJR1pzWlhndFozVjBkR1Z5S0NSamIyNTBZV2x1WlhJdFkyOXNkVzF1Y3pvZ0pHWm5MVzFoZUMxamIyeDFiVzV6TENBa1ozVjBkR1Z5T2lBa1ptY3RaM1YwZEdWeUtTQjdYRzRnSUNSamIyNTBZV2x1WlhJdGQybGtkR2c2SUNSamIyNTBZV2x1WlhJdFkyOXNkVzF1Y3lBcUlDUm1aeTFqYjJ4MWJXNGdLeUFvSkdOdmJuUmhhVzVsY2kxamIyeDFiVzV6SUMwZ01Ta2dLaUFrWm1jdFozVjBkR1Z5TzF4dUlDQkFjbVYwZFhKdUlIQmxjbU5sYm5SaFoyVW9KR2QxZEhSbGNpQXZJQ1JqYjI1MFlXbHVaWEl0ZDJsa2RHZ3BPMXh1WEc0Z0lFQjNZWEp1SUZ3aVZHaGxJR1pzWlhndFozVjBkR1Z5SUdaMWJtTjBhVzl1SUdseklHUmxjSEpsWTJGMFpXUWdZVzVrSUhkcGJHd2dZbVVnY21WdGIzWmxaQ0JwYmlCMGFHVWdibVY0ZENCdFlXcHZjaUIyWlhKemFXOXVJSEpsYkdWaGMyVmNJanRjYm4xY2JseHVRR1oxYm1OMGFXOXVJR2R5YVdRdGQybGtkR2dvSkc0cElIdGNiaUFnUUhKbGRIVnliaUFrYmlBcUlDUm5keTFqYjJ4MWJXNGdLeUFvSkc0Z0xTQXhLU0FxSUNSbmR5MW5kWFIwWlhJN1hHNWNiaUFnUUhkaGNtNGdYQ0pVYUdVZ1ozSnBaQzEzYVdSMGFDQm1kVzVqZEdsdmJpQnBjeUJrWlhCeVpXTmhkR1ZrSUdGdVpDQjNhV3hzSUdKbElISmxiVzkyWldRZ2FXNGdkR2hsSUc1bGVIUWdiV0ZxYjNJZ2RtVnljMmx2YmlCeVpXeGxZWE5sWENJN1hHNTlYRzVjYmtCbWRXNWpkR2x2YmlCbmIyeGtaVzR0Y21GMGFXOG9KSFpoYkhWbExDQWthVzVqY21WdFpXNTBLU0I3WEc0Z0lFQnlaWFIxY200Z2JXOWtkV3hoY2kxelkyRnNaU2drYVc1amNtVnRaVzUwTENBa2RtRnNkV1VzSUNSeVlYUnBiem9nSkdkdmJHUmxiaWs3WEc1Y2JpQWdRSGRoY200Z1hDSlVhR1VnWjI5c1pHVnVMWEpoZEdsdklHWjFibU4wYVc5dUlHbHpJR1JsY0hKbFkyRjBaV1FnWVc1a0lIZHBiR3dnWW1VZ2NtVnRiM1psWkNCcGJpQjBhR1VnYm1WNGRDQnRZV3B2Y2lCMlpYSnphVzl1SUhKbGJHVmhjMlV1SUZCc1pXRnpaU0IxYzJVZ2RHaGxJRzF2WkhWc1lYSXRjMk5oYkdVZ1puVnVZM1JwYjI0c0lHbHVjM1JsWVdRdVhDSTdYRzU5WEc1Y2JrQnRhWGhwYmlCaWIzZ3RjMmw2YVc1bktDUmliM2dwSUh0Y2JpQWdRR2x1WTJ4MVpHVWdjSEpsWm1sNFpYSW9ZbTk0TFhOcGVtbHVaeXdnSkdKdmVDd2dkMlZpYTJsMElHMXZlaUJ6Y0dWaktUdGNibHh1SUNCQWQyRnliaUJjSWxSb1pTQmliM2d0YzJsNmFXNW5JRzFwZUdsdUlHbHpJR1JsY0hKbFkyRjBaV1FnWVc1a0lIZHBiR3dnWW1VZ2NtVnRiM1psWkNCcGJpQjBhR1VnYm1WNGRDQnRZV3B2Y2lCMlpYSnphVzl1SUhKbGJHVmhjMlV1SUZSb2FYTWdjSEp2Y0dWeWRIa2dZMkZ1SUc1dmR5QmlaU0IxYzJWa0lIVnVMWEJ5WldacGVHVmtMbHdpTzF4dWZWeHVJaXdLQ1FraUx5OGdSblZ1WTNScGIyNXpYRzVBYVcxd2IzSjBJRndpWm5WdVkzUnBiMjV6TDNCeWFYWmhkR1ZjSWp0Y2JrQnBiWEJ2Y25RZ1hDSm1kVzVqZEdsdmJuTXZibVYzTFdKeVpXRnJjRzlwYm5SY0lqdGNibHh1THk4Z1UyVjBkR2x1WjNOY2JrQnBiWEJ2Y25RZ1hDSnpaWFIwYVc1bmN5OW5jbWxrWENJN1hHNUFhVzF3YjNKMElGd2ljMlYwZEdsdVozTXZkbWx6ZFdGc0xXZHlhV1JjSWp0Y2JrQnBiWEJ2Y25RZ1hDSnpaWFIwYVc1bmN5OWthWE5oWW14bExYZGhjbTVwYm1kelhDSTdYRzRpTEFvSkNTSWtjR0Z5Wlc1MExXTnZiSFZ0Ym5NNklDUm5jbWxrTFdOdmJIVnRibk1nSVdSbFptRjFiSFE3WEc0a1ptY3RZMjlzZFcxdU9pQWtZMjlzZFcxdU8xeHVKR1puTFdkMWRIUmxjam9nSkdkMWRIUmxjanRjYmlSbVp5MXRZWGd0WTI5c2RXMXVjem9nSkdkeWFXUXRZMjlzZFcxdWN6dGNiaVJqYjI1MFlXbHVaWEl0WkdsemNHeGhlUzEwWVdKc1pUb2dabUZzYzJVZ0lXUmxabUYxYkhRN1hHNGtiR0Y1YjNWMExXUnBjbVZqZEdsdmJqb2dURlJTSUNGa1pXWmhkV3gwTzF4dVhHNUFablZ1WTNScGIyNGdabXhsZUMxbmNtbGtLQ1JqYjJ4MWJXNXpMQ0FrWTI5dWRHRnBibVZ5TFdOdmJIVnRibk02SUNSbVp5MXRZWGd0WTI5c2RXMXVjeWtnZTF4dUlDQWtkMmxrZEdnNklDUmpiMngxYlc1eklDb2dKR1puTFdOdmJIVnRiaUFySUNna1kyOXNkVzF1Y3lBdElERXBJQ29nSkdabkxXZDFkSFJsY2p0Y2JpQWdKR052Ym5SaGFXNWxjaTEzYVdSMGFEb2dKR052Ym5SaGFXNWxjaTFqYjJ4MWJXNXpJQ29nSkdabkxXTnZiSFZ0YmlBcklDZ2tZMjl1ZEdGcGJtVnlMV052YkhWdGJuTWdMU0F4S1NBcUlDUm1aeTFuZFhSMFpYSTdYRzRnSUVCeVpYUjFjbTRnY0dWeVkyVnVkR0ZuWlNna2QybGtkR2dnTHlBa1kyOXVkR0ZwYm1WeUxYZHBaSFJvS1R0Y2JuMWNibHh1UUdaMWJtTjBhVzl1SUdac1pYZ3RaM1YwZEdWeUtDUmpiMjUwWVdsdVpYSXRZMjlzZFcxdWN6b2dKR1puTFcxaGVDMWpiMngxYlc1ekxDQWtaM1YwZEdWeU9pQWtabWN0WjNWMGRHVnlLU0I3WEc0Z0lDUmpiMjUwWVdsdVpYSXRkMmxrZEdnNklDUmpiMjUwWVdsdVpYSXRZMjlzZFcxdWN5QXFJQ1JtWnkxamIyeDFiVzRnS3lBb0pHTnZiblJoYVc1bGNpMWpiMngxYlc1eklDMGdNU2tnS2lBa1ptY3RaM1YwZEdWeU8xeHVJQ0JBY21WMGRYSnVJSEJsY21ObGJuUmhaMlVvSkdkMWRIUmxjaUF2SUNSamIyNTBZV2x1WlhJdGQybGtkR2dwTzF4dWZWeHVYRzVBWm5WdVkzUnBiMjRnWjNKcFpDMTNhV1IwYUNna2Jpa2dlMXh1SUNCQWNtVjBkWEp1SUNSdUlDb2dKR2QzTFdOdmJIVnRiaUFySUNna2JpQXRJREVwSUNvZ0pHZDNMV2QxZEhSbGNqdGNibjFjYmx4dVFHWjFibU4wYVc5dUlHZGxkQzF3WVhKbGJuUXRZMjlzZFcxdWN5Z2tZMjlzZFcxdWN5a2dlMXh1SUNCQWFXWWdKR052YkhWdGJuTWdJVDBnSkdkeWFXUXRZMjlzZFcxdWN5QjdYRzRnSUNBZ0pIQmhjbVZ1ZEMxamIyeDFiVzV6T2lBa1kyOXNkVzF1Y3lBaFoyeHZZbUZzTzF4dUlDQjlJRUJsYkhObElIdGNiaUFnSUNBa2NHRnlaVzUwTFdOdmJIVnRibk02SUNSbmNtbGtMV052YkhWdGJuTWdJV2RzYjJKaGJEdGNiaUFnZlZ4dVhHNGdJRUJ5WlhSMWNtNGdKSEJoY21WdWRDMWpiMngxYlc1ek8xeHVmVnh1WEc1QVpuVnVZM1JwYjI0Z2FYTXRaR2x6Y0d4aGVTMTBZV0pzWlNna1kyOXVkR0ZwYm1WeUxXbHpMV1JwYzNCc1lYa3RkR0ZpYkdVc0lDUmthWE53YkdGNUtTQjdYRzRnSUVCeVpYUjFjbTRnSkdOdmJuUmhhVzVsY2kxcGN5MWthWE53YkdGNUxYUmhZbXhsSUQwOUlIUnlkV1VnYjNJZ0pHUnBjM0JzWVhrZ1BUMGdkR0ZpYkdVN1hHNTlYRzRpTEFvSkNTSkFZMmhoY25ObGRDQmNJbFZVUmkwNFhDSTdYRzVjYmtCcFppQWtZbTl5WkdWeUxXSnZlQzF6YVhwcGJtY2dQVDBnZEhKMVpTQjdYRzRnSUdoMGJXd2dleUF2THlCb2RIUndPaTh2WW1sMExteDVMekZ4YXpKMFZsSmNiaUFnSUNCaWIzZ3RjMmw2YVc1bk9pQmliM0prWlhJdFltOTRPMXh1SUNCOVhHNWNiaUFnS2lCN1hHNGdJQ0FnSml4Y2JpQWdJQ0FtT2pwaFpuUmxjaXhjYmlBZ0lDQW1PanBpWldadmNtVWdlMXh1SUNBZ0lDQWdZbTk0TFhOcGVtbHVaem9nYVc1b1pYSnBkRHRjYmlBZ0lDQjlYRzRnSUgxY2JuMWNiaUlzQ2drSklrQmphR0Z5YzJWMElGd2lWVlJHTFRoY0lqdGNibHh1THk4dklGSmxiVzkyWlhNZ2RHaGxJR1ZzWlcxbGJuUW5jeUJuZFhSMFpYSWdiV0Z5WjJsdUxDQnlaV2RoY21Sc1pYTnpJRzltSUdsMGN5QndiM05wZEdsdmJpQnBiaUIwYUdVZ1ozSnBaQ0JvYVdWeVlYSmphSGtnYjNJZ1pHbHpjR3hoZVNCd2NtOXdaWEowZVM0Z1NYUWdZMkZ1SUhSaGNtZGxkQ0JoSUhOd1pXTnBabWxqSUdWc1pXMWxiblFzSUc5eUlHVjJaWEo1SUdCdWRHZ3RZMmhwYkdSZ0lHOWpZM1Z5Y21WdVkyVXVJRmR2Y210eklHOXViSGtnZDJsMGFDQmdZbXh2WTJ0Z0lHeGhlVzkxZEhNdVhHNHZMeTljYmk4dkx5QkFjR0Z5WVcwZ2UweHBjM1I5SUNSeGRXVnllU0JiWW14dlkydGRYRzR2THk4Z0lDQk1hWE4wSUc5bUlHRnlaM1Z0Wlc1MGN5NGdVM1Z3Y0c5eWRHVmtJR0Z5WjNWdFpXNTBjeUJoY21VZ1lHNTBhQzFqYUdsc1pHQWdjMlZzWldOMGIzSnpJQ2gwWVhKblpYUnpJR0VnYzNCbFkybG1hV01nY0hObGRXUnZJR1ZzWlcxbGJuUXBJR0Z1WkNCZ1lYVjBiMkFnS0hSaGNtZGxkSE1nWUd4aGMzUXRZMmhwYkdSZ0tTNWNiaTh2TDF4dUx5OHZJQ0FnVjJobGJpQndZWE56WldRZ1lXNGdZRzUwYUMxamFHbHNaR0FnWVhKbmRXMWxiblFnYjJZZ2RIbHdaU0JnS201Z0lIZHBkR2dnWUdKc2IyTnJZQ0JrYVhOd2JHRjVMQ0IwYUdVZ2IyMWxaMkVnYldsNGFXNGdZWFYwYjIxaGRHbGpZV3hzZVNCaFpHUnpJR0VnWTJ4bFlYSWdkRzhnZEdobElHQXFiaXN4WUNCMGFDQmxiR1Z0Wlc1MExpQk9iM1JsSUhSb1lYUWdZMjl0Y0c5emFYUmxJR0Z5WjNWdFpXNTBjeUJ6ZFdOb0lHRnpJR0F5YmlzeFlDQmtieUJ1YjNRZ2MzVndjRzl5ZENCMGFHbHpJR1psWVhSMWNtVXVYRzR2THk5Y2JpOHZMeUFnSUNvcVJHVndjbVZqWVhScGIyNGdkMkZ5Ym1sdVp5b3FPaUJVYUdVZ2IyMWxaMkVnYldsNGFXNGdkMmxzYkNCdWJ5QnNiMjVuWlhJZ2RHRnJaU0JoSUdBa1pHbHlaV04wYVc5dVlDQmhjbWQxYldWdWRDNGdWRzhnWTJoaGJtZGxJSFJvWlNCc1lYbHZkWFFnWkdseVpXTjBhVzl1TENCMWMyVWdZSEp2ZHlna1pHbHlaV04wYVc5dUtXQWdiM0lnYzJWMElHQWtaR1ZtWVhWc2RDMXNZWGx2ZFhRdFpHbHlaV04wYVc5dVlDQnBibk4wWldGa0xseHVMeTh2WEc0dkx5OGdRR1Y0WVcxd2JHVWdjMk56Y3lBdElGVnpZV2RsWEc0dkx5OGdJQ0F1Wld4bGJXVnVkQ0I3WEc0dkx5OGdJQ0FnSUVCcGJtTnNkV1JsSUc5dFpXZGhPMXh1THk4dklDQWdmVnh1THk4dlhHNHZMeThnSUNBdWJuUm9MV1ZzWlcxbGJuUWdlMXh1THk4dklDQWdJQ0JBYVc1amJIVmtaU0J2YldWbllTZzBiaWs3WEc0dkx5OGdJQ0I5WEc0dkx5OWNiaTh2THlCQVpYaGhiWEJzWlNCamMzTWdMU0JEVTFNZ1QzVjBjSFYwWEc0dkx5OGdJQ0F1Wld4bGJXVnVkQ0I3WEc0dkx5OGdJQ0FnSUcxaGNtZHBiaTF5YVdkb2REb2dNRHRjYmk4dkx5QWdJSDFjYmk4dkwxeHVMeTh2SUNBZ0xtNTBhQzFsYkdWdFpXNTBPbTUwYUMxamFHbHNaQ2cwYmlrZ2UxeHVMeTh2SUNBZ0lDQnRZWEpuYVc0dGNtbG5hSFE2SURBN1hHNHZMeThnSUNCOVhHNHZMeTljYmk4dkx5QWdJQzV1ZEdndFpXeGxiV1Z1ZERwdWRHZ3RZMmhwYkdRb05HNHJNU2tnZTF4dUx5OHZJQ0FnSUNCamJHVmhjam9nYkdWbWREdGNiaTh2THlBZ0lIMWNibHh1UUcxcGVHbHVJRzl0WldkaEtDUnhkV1Z5ZVRvZ1lteHZZMnNzSUNSa2FYSmxZM1JwYjI0NklHUmxabUYxYkhRcElIdGNiaUFnSkhSaFlteGxPaUJpWld4dmJtZHpMWFJ2S0hSaFlteGxMQ0FrY1hWbGNua3BPMXh1SUNBa1lYVjBiem9nWW1Wc2IyNW5jeTEwYnloaGRYUnZMQ0FrY1hWbGNua3BPMXh1WEc0Z0lFQnBaaUFrWkdseVpXTjBhVzl1SUNFOUlHUmxabUYxYkhRZ2UxeHVJQ0FnSUVCcGJtTnNkV1JsSUMxdVpXRjBMWGRoY200b1hDSlVhR1VnYjIxbFoyRWdiV2w0YVc0Z2QybHNiQ0J1YnlCc2IyNW5aWElnZEdGclpTQmhJQ1JrYVhKbFkzUnBiMjRnWVhKbmRXMWxiblF1SUZSdklHTm9ZVzVuWlNCMGFHVWdiR0Y1YjNWMElHUnBjbVZqZEdsdmJpd2dkWE5sSUhSb1pTQmthWEpsWTNScGIyNG9LWHN1TGk1OUlHMXBlR2x1TGx3aUtUdGNiaUFnZlNCQVpXeHpaU0I3WEc0Z0lDQWdKR1JwY21WamRHbHZiam9nWjJWMExXUnBjbVZqZEdsdmJpZ2tiR0Y1YjNWMExXUnBjbVZqZEdsdmJpd2dKR1JsWm1GMWJIUXRiR0Y1YjNWMExXUnBjbVZqZEdsdmJpazdYRzRnSUgxY2JseHVJQ0JBYVdZZ0pIUmhZbXhsSUh0Y2JpQWdJQ0JBYVc1amJIVmtaU0F0Ym1WaGRDMTNZWEp1S0Z3aVZHaGxJRzl0WldkaElHMXBlR2x1SUc1dklHeHZibWRsY2lCeVpXMXZkbVZ6SUhCaFpHUnBibWNnYVc0Z2RHRmliR1VnYkdGNWIzVjBjeTVjSWlrN1hHNGdJSDFjYmx4dUlDQkFhV1lnYkdWdVozUm9LQ1J4ZFdWeWVTa2dQVDBnTVNCN1hHNGdJQ0FnUUdsbUlDUmhkWFJ2SUh0Y2JpQWdJQ0FnSUNZNmJHRnpkQzFqYUdsc1pDQjdYRzRnSUNBZ0lDQWdJRzFoY21kcGJpMGpleVJrYVhKbFkzUnBiMjU5T2lBd08xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUVCbGJITmxJR2xtSUdOdmJuUmhhVzV6TFdScGMzQnNZWGt0ZG1Gc2RXVW9KSEYxWlhKNUtTQmhibVFnSkhSaFlteGxJRDA5SUdaaGJITmxJSHRjYmlBZ0lDQWdJRzFoY21kcGJpMGpleVJrYVhKbFkzUnBiMjU5T2lBd08xeHVJQ0FnSUgxY2JseHVJQ0FnSUVCbGJITmxJSHRjYmlBZ0lDQWdJRUJwYm1Oc2RXUmxJRzUwYUMxamFHbHNaQ2drY1hWbGNua3NJQ1JrYVhKbFkzUnBiMjRwTzF4dUlDQWdJSDFjYmlBZ2ZTQkFaV3h6WlNCcFppQnNaVzVuZEdnb0pIRjFaWEo1S1NBOVBTQXlJSHRjYmlBZ0lDQkFhV1lnSkdGMWRHOGdlMXh1SUNBZ0lDQWdKanBzWVhOMExXTm9hV3hrSUh0Y2JpQWdJQ0FnSUNBZ2JXRnlaMmx1TFNON0pHUnBjbVZqZEdsdmJuMDZJREE3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmU0JBWld4elpTQjdYRzRnSUNBZ0lDQkFhVzVqYkhWa1pTQnVkR2d0WTJocGJHUW9iblJvS0NSeGRXVnllU3dnTVNrc0lDUmthWEpsWTNScGIyNHBPMXh1SUNBZ0lIMWNiaUFnZlNCQVpXeHpaU0I3WEc0Z0lDQWdRR2x1WTJ4MVpHVWdMVzVsWVhRdGQyRnliaWhjSWxSdmJ5QnRZVzU1SUdGeVozVnRaVzUwY3lCd1lYTnpaV1FnZEc4Z2RHaGxJRzl0WldkaEtDa2diV2w0YVc0dVhDSXBPMXh1SUNCOVhHNTlYRzVjYmtCdGFYaHBiaUJ1ZEdndFkyaHBiR1FvSkhGMVpYSjVMQ0FrWkdseVpXTjBhVzl1S1NCN1hHNGdJQ1J2Y0hCdmMybDBaUzFrYVhKbFkzUnBiMjQ2SUdkbGRDMXZjSEJ2YzJsMFpTMWthWEpsWTNScGIyNG9KR1JwY21WamRHbHZiaWs3WEc1Y2JpQWdKanB1ZEdndFkyaHBiR1FvSTNza2NYVmxjbmw5S1NCN1hHNGdJQ0FnYldGeVoybHVMU043SkdScGNtVmpkR2x2Ym4wNklEQTdYRzRnSUgxY2JseHVJQ0JBYVdZZ2RIbHdaUzF2Wmlna2NYVmxjbmtwSUQwOUlHNTFiV0psY2lCaGJtUWdkVzVwZENna2NYVmxjbmtwSUQwOUlGd2libHdpSUh0Y2JpQWdJQ0FtT201MGFDMWphR2xzWkNnamV5UnhkV1Z5ZVgwck1Ta2dlMXh1SUNBZ0lDQWdZMnhsWVhJNklDUnZjSEJ2YzJsMFpTMWthWEpsWTNScGIyNDdYRzRnSUNBZ2ZWeHVJQ0I5WEc1OVhHNGlMQW9KQ1NKQVkyaGhjbk5sZENCY0lsVlVSaTA0WENJN1hHNWNiaTh2THlCTllXdGxjeUJoYmlCbGJHVnRaVzUwSUdFZ2IzVjBaWElnWTI5dWRHRnBibVZ5SUdKNUlHTmxiblJsY21sdVp5QnBkQ0JwYmlCMGFHVWdkbWxsZDNCdmNuUXNJR05zWldGeWFXNW5JR2wwY3lCbWJHOWhkSE1zSUdGdVpDQnpaWFIwYVc1bklHbDBjeUJnYldGNExYZHBaSFJvWUM1Y2JpOHZMeUJCYkhSb2IzVm5hQ0J2Y0hScGIyNWhiQ3dnZFhOcGJtY2dZRzkxZEdWeUxXTnZiblJoYVc1bGNtQWdhWE1nY21WamIyMXRaVzVrWldRdUlGUm9aU0J0YVhocGJpQmpZVzRnWW1VZ1kyRnNiR1ZrSUc5dUlHMXZjbVVnZEdoaGJpQnZibVVnWld4bGJXVnVkQ0J3WlhJZ2NHRm5aU3dnWVhNZ2JHOXVaeUJoY3lCMGFHVjVJR0Z5WlNCdWIzUWdibVZ6ZEdWa0xseHVMeTh2WEc0dkx5OGdRSEJoY21GdElIdE9kVzFpWlhJZ1czVnVhWFJkZlNBa2JHOWpZV3d0YldGNExYZHBaSFJvSUZza2JXRjRMWGRwWkhSb1hWeHVMeTh2SUNBZ1RXRjRJSGRwWkhSb0lIUnZJR0psSUdGd2NHeHBaV1FnZEc4Z2RHaGxJR1ZzWlcxbGJuUXVJRU5oYmlCaVpTQmhJSEJsY21ObGJuUmhaMlVnYjNJZ1lTQnRaV0Z6ZFhKbExseHVMeTh2WEc0dkx5OGdRR1Y0WVcxd2JHVWdjMk56Y3lBdElGVnpZV2RsWEc0dkx5OGdJQ0F1Wld4bGJXVnVkQ0I3WEc0dkx5OGdJQ0FnSUVCcGJtTnNkV1JsSUc5MWRHVnlMV052Ym5SaGFXNWxjaWd4TURBbEtUdGNiaTh2THlBZ0lIMWNiaTh2TDF4dUx5OHZJRUJsZUdGdGNHeGxJR056Y3lBdElFTlRVeUJQZFhSd2RYUmNiaTh2THlBZ0lDNWxiR1Z0Wlc1MElIdGNiaTh2THlBZ0lDQWdLbnB2YjIwNklERTdYRzR2THk4Z0lDQWdJRzFoZUMxM2FXUjBhRG9nTVRBd0pUdGNiaTh2THlBZ0lDQWdiV0Z5WjJsdUxXeGxablE2SUdGMWRHODdYRzR2THk4Z0lDQWdJRzFoY21kcGJpMXlhV2RvZERvZ1lYVjBienRjYmk4dkx5QWdJSDFjYmk4dkwxeHVMeTh2SUNBZ0xtVnNaVzFsYm5RNlltVm1iM0psTENBdVpXeGxiV1Z1ZERwaFpuUmxjaUI3WEc0dkx5OGdJQ0FnSUdOdmJuUmxiblE2SUZ3aUlGd2lPMXh1THk4dklDQWdJQ0JrYVhOd2JHRjVPaUIwWVdKc1pUdGNiaTh2THlBZ0lIMWNiaTh2TDF4dUx5OHZJQ0FnTG1Wc1pXMWxiblE2WVdaMFpYSWdlMXh1THk4dklDQWdJQ0JqYkdWaGNqb2dZbTkwYUR0Y2JpOHZMeUFnSUgxY2JseHVRRzFwZUdsdUlHOTFkR1Z5TFdOdmJuUmhhVzVsY2lna2JHOWpZV3d0YldGNExYZHBaSFJvT2lBa2JXRjRMWGRwWkhSb0tTQjdYRzRnSUVCcGJtTnNkV1JsSUdOc1pXRnlabWw0TzF4dUlDQnRZWGd0ZDJsa2RHZzZJQ1JzYjJOaGJDMXRZWGd0ZDJsa2RHZzdYRzRnSUcxaGNtZHBiam9nZTF4dUlDQWdJR3hsWm5RNklHRjFkRzg3WEc0Z0lDQWdjbWxuYUhRNklHRjFkRzg3WEc0Z0lIMWNibjFjYmlJc0Nna0pJa0JqYUdGeWMyVjBJRndpVlZSR0xUaGNJanRjYmx4dUx5OHZJRk53WldOcFptbGxjeUIwYUdVZ2JuVnRZbVZ5SUc5bUlHTnZiSFZ0Ym5NZ1lXNGdaV3hsYldWdWRDQnphRzkxYkdRZ2MzQmhiaTRnU1dZZ2RHaGxJSE5sYkdWamRHOXlJR2x6SUc1bGMzUmxaQ0IwYUdVZ2JuVnRZbVZ5SUc5bUlHTnZiSFZ0Ym5NZ2IyWWdhWFJ6SUhCaGNtVnVkQ0JsYkdWdFpXNTBJSE5vYjNWc1pDQmlaU0J3WVhOelpXUWdZWE1nWVc0Z1lYSm5kVzFsYm5RZ1lYTWdkMlZzYkM1Y2JpOHZMMXh1THk4dklFQndZWEpoYlNCN1RHbHpkSDBnSkhOd1lXNWNiaTh2THlBZ0lFRWdiR2x6ZENCamIyNTBZV2x1YVc1bklHQWtZMjlzZFcxdWMyQXNJSFJvWlNCMWJtbDBiR1Z6Y3lCdWRXMWlaWElnYjJZZ1kyOXNkVzF1Y3lCMGFHVWdaV3hsYldWdWRDQnpjR0Z1Y3lBb2NtVnhkV2x5WldRcExDQmhibVFnWUNSamIyNTBZV2x1WlhJdFkyOXNkVzF1YzJBc0lIUm9aU0J1ZFcxaVpYSWdiMllnWTI5c2RXMXVjeUIwYUdVZ2NHRnlaVzUwSUdWc1pXMWxiblFnYzNCaGJuTWdLRzl3ZEdsdmJtRnNLUzVjYmk4dkwxeHVMeTh2SUNBZ1NXWWdiMjVzZVNCdmJtVWdkbUZzZFdVZ2FYTWdjR0Z6YzJWa0xDQnBkQ0JwY3lCaGMzTjFiV1ZrSUhSb1lYUWdhWFFuY3lCZ0pHTnZiSFZ0Ym5OZ0lHRnVaQ0IwYUdGMElIUm9ZWFFnWUNSamIyNTBZV2x1WlhJdFkyOXNkVzF1YzJBZ2FYTWdaWEYxWVd3Z2RHOGdZQ1JuY21sa0xXTnZiSFZ0Ym5OZ0xDQjBhR1VnZEc5MFlXd2diblZ0WW1WeUlHOW1JR052YkhWdGJuTWdhVzRnZEdobElHZHlhV1F1WEc0dkx5OWNiaTh2THlBZ0lGUm9aU0IyWVd4MVpYTWdZMkZ1SUdKbElITmxjR0Z5WVhSbFpDQjNhWFJvSUdGdWVTQnpkSEpwYm1jZ2MzVmphQ0JoY3lCZ2IyWmdMQ0JnTDJBc0lHVjBZeTVjYmk4dkwxeHVMeTh2SUNBZ1lDUmpiMngxYlc1ellDQmhiSE52SUdGalkyVndkSE1nWkdWamFXMWhiSE1nWm05eUlIZG9aVzRnYVhRbmN5QnVaV05sYzNOaGNua2dkRzhnWW5KbFlXc2diM1YwSUc5bUlIUm9aU0J6ZEdGdVpHRnlaQ0JuY21sa0xpQkZMbWN1SUZCaGMzTnBibWNnWURJdU5HQWdhVzRnWVNCemRHRnVaR0Z5WkNBeE1pQmpiMngxYlc0Z1ozSnBaQ0IzYVd4c0lHUnBkbWxrWlNCMGFHVWdjbTkzSUdsdWRHOGdOU0JqYjJ4MWJXNXpMbHh1THk4dlhHNHZMeThnUUhCaGNtRnRJSHRUZEhKcGJtZDlJQ1JrYVhOd2JHRjVJRnRpYkc5amExMWNiaTh2THlBZ0lGTmxkSE1nZEdobElHUnBjM0JzWVhrZ2NISnZjR1Z5ZEhrZ2IyWWdkR2hsSUdWc1pXMWxiblF1SUVKNUlHUmxabUYxYkhRZ2FYUWdjMlYwY3lCMGFHVWdaR2x6Y0d4aGVTQndjbTl3WlhKMElHOW1JSFJvWlNCbGJHVnRaVzUwSUhSdklHQmliRzlqYTJBdVhHNHZMeTljYmk4dkx5QWdJRWxtSUhCaGMzTmxaQ0JnWW14dlkyc3RZMjlzYkdGd2MyVmdMQ0JwZENCaGJITnZJSEpsYlc5MlpYTWdkR2hsSUcxaGNtZHBiaUJuZFhSMFpYSWdZbmtnWVdSa2FXNW5JR2wwSUhSdklIUm9aU0JsYkdWdFpXNTBJSGRwWkhSb0xseHVMeTh2WEc0dkx5OGdJQ0JKWmlCd1lYTnpaV1FnWUhSaFlteGxZQ3dnYVhRZ2MyVjBjeUIwYUdVZ1pHbHpjR3hoZVNCd2NtOXdaWEowZVNCMGJ5QmdkR0ZpYkdVdFkyVnNiR0FnWVc1a0lHTmhiR04xYkdGMFpYTWdkR2hsSUhkcFpIUm9JRzltSUhSb1pTQmxiR1Z0Wlc1MElIZHBkR2h2ZFhRZ2RHRnJhVzVuSUdkMWRIUmxjbk1nYVc1MGJ5QmpiMjV6YVdSbGNtRjBhVzl1TGlCVWFHVWdjbVZ6ZFd4MElHUnZaWE1nYm05MElHRnNhV2R1SUhkcGRHZ2dkR2hsSUdKc2IyTnJMV0poYzJWa0lHZHlhV1F1WEc0dkx5OWNiaTh2THlCQVpYaGhiWEJzWlNCelkzTnpJQzBnVlhOaFoyVmNiaTh2THlBZ0lDNWxiR1Z0Wlc1MElIdGNiaTh2THlBZ0lDQWdRR2x1WTJ4MVpHVWdjM0JoYmkxamIyeDFiVzV6S0RZcE8xeHVMeTh2WEc0dkx5OGdJQ0FnTG01bGMzUmxaQzFsYkdWdFpXNTBJSHRjYmk4dkx5QWdJQ0FnSUVCcGJtTnNkV1JsSUhOd1lXNHRZMjlzZFcxdWN5Z3lJRzltSURZcE8xeHVMeTh2SUNBZ0lIMWNiaTh2THlBZ2ZWeHVMeTh2WEc0dkx5OGdRR1Y0WVcxd2JHVWdZM056SUMwZ1ExTlRJRTkxZEhCMWRGeHVMeTh2SUNBZ0xtVnNaVzFsYm5RZ2UxeHVMeTh2SUNBZ0lDQmthWE53YkdGNU9pQmliRzlqYXp0Y2JpOHZMeUFnSUNBZ1pteHZZWFE2SUd4bFpuUTdYRzR2THk4Z0lDQWdJRzFoY21kcGJpMXlhV2RvZERvZ01pNHpOVGMyTlNVN1hHNHZMeThnSUNBZ0lIZHBaSFJvT2lBME9DNDRNakV4TnlVN1hHNHZMeThnSUNCOVhHNHZMeTljYmk4dkx5QWdJQzVsYkdWdFpXNTBPbXhoYzNRdFkyaHBiR1FnZTF4dUx5OHZJQ0FnSUNCdFlYSm5hVzR0Y21sbmFIUTZJREE3WEc0dkx5OGdJQ0I5WEc0dkx5OWNiaTh2THlBZ0lDNWxiR1Z0Wlc1MElDNXVaWE4wWldRdFpXeGxiV1Z1ZENCN1hHNHZMeThnSUNBZ0lHUnBjM0JzWVhrNklHSnNiMk5yTzF4dUx5OHZJQ0FnSUNCbWJHOWhkRG9nYkdWbWREdGNiaTh2THlBZ0lDQWdiV0Z5WjJsdUxYSnBaMmgwT2lBMExqZ3lPVEUySlR0Y2JpOHZMeUFnSUNBZ2QybGtkR2c2SURNd0xqRXhNemc1SlR0Y2JpOHZMeUFnSUgxY2JpOHZMMXh1THk4dklDQWdMbVZzWlcxbGJuUWdMbTVsYzNSbFpDMWxiR1Z0Wlc1ME9teGhjM1F0WTJocGJHUWdlMXh1THk4dklDQWdJQ0J0WVhKbmFXNHRjbWxuYUhRNklEQTdYRzR2THk4Z0lDQjlYRzVjYmtCdGFYaHBiaUJ6Y0dGdUxXTnZiSFZ0Ym5Nb0pITndZVzQ2SUNSamIyeDFiVzV6SUc5bUlDUmpiMjUwWVdsdVpYSXRZMjlzZFcxdWN5d2dKR1JwYzNCc1lYazZJR0pzYjJOcktTQjdYRzRnSUNSamIyeDFiVzV6T2lCdWRHZ29KSE53WVc0c0lERXBPMXh1SUNBa1kyOXVkR0ZwYm1WeUxXTnZiSFZ0Ym5NNklHTnZiblJoYVc1bGNpMXpjR0Z1S0NSemNHRnVLVHRjYmx4dUlDQWtjR0Z5Wlc1MExXTnZiSFZ0Ym5NNklHZGxkQzF3WVhKbGJuUXRZMjlzZFcxdWN5Z2tZMjl1ZEdGcGJtVnlMV052YkhWdGJuTXBJQ0ZuYkc5aVlXdzdYRzVjYmlBZ0pHUnBjbVZqZEdsdmJqb2daMlYwTFdScGNtVmpkR2x2Ymlna2JHRjViM1YwTFdScGNtVmpkR2x2Yml3Z0pHUmxabUYxYkhRdGJHRjViM1YwTFdScGNtVmpkR2x2YmlrN1hHNGdJQ1J2Y0hCdmMybDBaUzFrYVhKbFkzUnBiMjQ2SUdkbGRDMXZjSEJ2YzJsMFpTMWthWEpsWTNScGIyNG9KR1JwY21WamRHbHZiaWs3WEc1Y2JpQWdKR1JwYzNCc1lYa3RkR0ZpYkdVNklHbHpMV1JwYzNCc1lYa3RkR0ZpYkdVb0pHTnZiblJoYVc1bGNpMWthWE53YkdGNUxYUmhZbXhsTENBa1pHbHpjR3hoZVNrN1hHNWNiaUFnUUdsbUlDUmthWE53YkdGNUxYUmhZbXhsSUNCN1hHNGdJQ0FnWkdsemNHeGhlVG9nZEdGaWJHVXRZMlZzYkR0Y2JpQWdJQ0IzYVdSMGFEb2djR1Z5WTJWdWRHRm5aU2drWTI5c2RXMXVjeUF2SUNSamIyNTBZV2x1WlhJdFkyOXNkVzF1Y3lrN1hHNGdJSDBnUUdWc2MyVWdlMXh1SUNBZ0lHWnNiMkYwT2lBamV5UnZjSEJ2YzJsMFpTMWthWEpsWTNScGIyNTlPMXh1WEc0Z0lDQWdRR2xtSUNSa2FYTndiR0Y1SUNFOUlHNXZMV1JwYzNCc1lYa2dlMXh1SUNBZ0lDQWdaR2x6Y0d4aGVUb2dZbXh2WTJzN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnUUdsbUlDUmthWE53YkdGNUlEMDlJR052Ykd4aGNITmxJSHRjYmlBZ0lDQWdJRUJwYm1Oc2RXUmxJQzF1WldGMExYZGhjbTRvWENKVWFHVWdKMk52Ykd4aGNITmxKeUJoY21kMWJXVnVkQ0IzYVd4c0lHSmxJR1JsY0hKbFkyRjBaV1F1SUZWelpTQW5ZbXh2WTJzdFkyOXNiR0Z3YzJVbklHbHVjM1JsWVdRdVhDSXBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lFQnBaaUFrWkdsemNHeGhlU0E5UFNCamIyeHNZWEJ6WlNCdmNpQWtaR2x6Y0d4aGVTQTlQU0JpYkc5amF5MWpiMnhzWVhCelpTQjdYRzRnSUNBZ0lDQjNhV1IwYURvZ1pteGxlQzFuY21sa0tDUmpiMngxYlc1ekxDQWtZMjl1ZEdGcGJtVnlMV052YkhWdGJuTXBJQ3NnWm14bGVDMW5kWFIwWlhJb0pHTnZiblJoYVc1bGNpMWpiMngxYlc1ektUdGNibHh1SUNBZ0lDQWdKanBzWVhOMExXTm9hV3hrSUh0Y2JpQWdJQ0FnSUNBZ2QybGtkR2c2SUdac1pYZ3RaM0pwWkNna1kyOXNkVzF1Y3l3Z0pHTnZiblJoYVc1bGNpMWpiMngxYlc1ektUdGNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lIMGdRR1ZzYzJVZ2UxeHVJQ0FnSUNBZ2JXRnlaMmx1TFNON0pHUnBjbVZqZEdsdmJuMDZJR1pzWlhndFozVjBkR1Z5S0NSamIyNTBZV2x1WlhJdFkyOXNkVzF1Y3lrN1hHNGdJQ0FnSUNCM2FXUjBhRG9nWm14bGVDMW5jbWxrS0NSamIyeDFiVzV6TENBa1kyOXVkR0ZwYm1WeUxXTnZiSFZ0Ym5NcE8xeHVYRzRnSUNBZ0lDQW1PbXhoYzNRdFkyaHBiR1FnZTF4dUlDQWdJQ0FnSUNCdFlYSm5hVzR0STNza1pHbHlaV04wYVc5dWZUb2dNRHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUgxY2JuMWNiaUlzQ2drSklrQmphR0Z5YzJWMElGd2lWVlJHTFRoY0lqdGNibHh1THk4dklFUmxjMmxuYm1GMFpYTWdkR2hsSUdWc1pXMWxiblFnWVhNZ1lTQnliM2NnYjJZZ1kyOXNkVzF1Y3lCcGJpQjBhR1VnWjNKcFpDQnNZWGx2ZFhRdUlFbDBJR05zWldGeWN5QjBhR1VnWm14dllYUnpJRzl1SUhSb1pTQmxiR1Z0Wlc1MElHRnVaQ0J6WlhSeklHbDBjeUJrYVhOd2JHRjVJSEJ5YjNCbGNuUjVMaUJTYjNkeklHTmhiaWQwSUdKbElHNWxjM1JsWkN3Z1luVjBJSFJvWlhKbElHTmhiaUJpWlNCdGIzSmxJSFJvWVc0Z2IyNWxJSEp2ZHlCbGJHVnRaVzUwNG9DVWQybDBhQ0JrYVdabVpYSmxiblFnWkdsemNHeGhlU0J3Y205d1pYSjBhV1Z6NG9DVWNHVnlJR3hoZVc5MWRDNWNiaTh2TDF4dUx5OHZJRUJ3WVhKaGJTQjdVM1J5YVc1bmZTQWtaR2x6Y0d4aGVTQmJaR1ZtWVhWc2RGMWNiaTh2THlBZ1UyVjBjeUIwYUdVZ1pHbHpjR3hoZVNCd2NtOXdaWEowZVNCdlppQjBhR1VnWld4bGJXVnVkQ0JoYm1RZ2RHaGxJR1JwYzNCc1lYa2dZMjl1ZEdWNGRDQjBhR0YwSUhkcGJHd2dZbVVnZFhObFpDQmllU0JwZEhNZ1kyaHBiR1J5Wlc0dUlFTmhiaUJpWlNCZ1lteHZZMnRnSUc5eUlHQjBZV0pzWldBdVhHNHZMeTljYmk4dkx5QkFjR0Z5WVcwZ2UxTjBjbWx1WjMwZ0pHUnBjbVZqZEdsdmJpQmJKR1JsWm1GMWJIUXRiR0Y1YjNWMExXUnBjbVZqZEdsdmJsMWNiaTh2THlBZ1UyVjBjeUIwYUdVZ2JHRjViM1YwSUdScGNtVmpkR2x2Ymk0Z1EyRnVJR0psSUdCTVZGSmdJQ2hzWldaMExYUnZMWEpwWjJoMEtTQnZjaUJnVWxSTVlDQW9jbWxuYUhRdGRHOHRiR1ZtZENrdVhHNHZMeTljYmk4dkx5QkFaWGhoYlhCc1pTQnpZM056SUMwZ1ZYTmhaMlZjYmk4dkx5QWdMbVZzWlcxbGJuUWdlMXh1THk4dklDQWdJRUJwYm1Oc2RXUmxJSEp2ZHlncE8xeHVMeTh2SUNCOVhHNHZMeTljYmk4dkx5QkFaWGhoYlhCc1pTQmpjM01nTFNCRFUxTWdUM1YwY0hWMFhHNHZMeThnSUM1bGJHVnRaVzUwSUh0Y2JpOHZMeUFnSUNBcWVtOXZiVG9nTVR0Y2JpOHZMeUFnSUNCa2FYTndiR0Y1T2lCaWJHOWphenRjYmk4dkx5QWdmVnh1THk4dlhHNHZMeThnTG1Wc1pXMWxiblE2WW1WbWIzSmxMQ0F1Wld4bGJXVnVkRHBoWm5SbGNpQjdYRzR2THk4Z0lDQmpiMjUwWlc1ME9pQmNJaUJjSWp0Y2JpOHZMeUFnSUdScGMzQnNZWGs2SUhSaFlteGxPMXh1THk4dklIMWNiaTh2TDF4dUx5OHZJQzVsYkdWdFpXNTBPbUZtZEdWeUlIdGNiaTh2THlBZ0lHTnNaV0Z5T2lCaWIzUm9PMXh1THk4dklIMWNibHh1UUcxcGVHbHVJSEp2ZHlna1pHbHpjR3hoZVRvZ1pHVm1ZWFZzZEN3Z0pHUnBjbVZqZEdsdmJqb2dKR1JsWm1GMWJIUXRiR0Y1YjNWMExXUnBjbVZqZEdsdmJpa2dlMXh1SUNCQWFXWWdKR1JwY21WamRHbHZiaUFoUFNBa1pHVm1ZWFZzZEMxc1lYbHZkWFF0WkdseVpXTjBhVzl1SUh0Y2JpQWdJQ0JBYVc1amJIVmtaU0F0Ym1WaGRDMTNZWEp1S0Z3aVZHaGxJQ1JrYVhKbFkzUnBiMjRnWVhKbmRXMWxiblFnZDJsc2JDQmlaU0JrWlhCeVpXTmhkR1ZrSUdsdUlHWjFkSFZ5WlNCMlpYSnphVzl1Y3lCcGJpQm1ZWFp2Y2lCdlppQjBhR1VnWkdseVpXTjBhVzl1S0NsN0xpNHVmU0J0YVhocGJpNWNJaWs3WEc0Z0lIMWNibHh1SUNBa2JHRjViM1YwTFdScGNtVmpkR2x2YmpvZ0pHUnBjbVZqZEdsdmJpQWhaMnh2WW1Gc08xeHVYRzRnSUVCcFppQWtaR2x6Y0d4aGVTQWhQU0JrWldaaGRXeDBJSHRjYmlBZ0lDQkFhVzVqYkhWa1pTQXRibVZoZEMxM1lYSnVLRndpVkdobElDUmthWE53YkdGNUlHRnlaM1Z0Wlc1MElIZHBiR3dnWW1VZ1pHVndjbVZqWVhSbFpDQnBiaUJtZFhSMWNtVWdkbVZ5YzJsdmJuTWdhVzRnWm1GMmIzSWdiMllnZEdobElHUnBjM0JzWVhrb0tYc3VMaTU5SUcxcGVHbHVMbHdpS1R0Y2JpQWdmVnh1WEc0Z0lFQnBaaUFrWkdsemNHeGhlU0E5UFNCMFlXSnNaU0I3WEc0Z0lDQWdaR2x6Y0d4aGVUb2dkR0ZpYkdVN1hHNGdJQ0FnUUdsdVkyeDFaR1VnWm1sc2JDMXdZWEpsYm5RN1hHNGdJQ0FnZEdGaWJHVXRiR0Y1YjNWME9pQm1hWGhsWkR0Y2JpQWdJQ0FrWTI5dWRHRnBibVZ5TFdScGMzQnNZWGt0ZEdGaWJHVTZJSFJ5ZFdVZ0lXZHNiMkpoYkR0Y2JpQWdmU0JBWld4elpTQjdYRzRnSUNBZ1FHbHVZMngxWkdVZ1kyeGxZWEptYVhnN1hHNGdJQ0FnWkdsemNHeGhlVG9nWW14dlkyczdYRzRnSUNBZ0pHTnZiblJoYVc1bGNpMWthWE53YkdGNUxYUmhZbXhsT2lCbVlXeHpaU0FoWjJ4dlltRnNPMXh1SUNCOVhHNTlYRzRpTEFvSkNTSkFZMmhoY25ObGRDQmNJbFZVUmkwNFhDSTdYRzVjYmk4dkx5QlVjbUZ1YzJ4aGRHVnpJR0Z1SUdWc1pXMWxiblFnYUc5eWFYcHZiblJoYkd4NUlHSjVJR0VnYm5WdFltVnlJRzltSUdOdmJIVnRibk11SUZCdmMybDBhWFpsSUdGeVozVnRaVzUwY3lCemFHbG1kQ0IwYUdVZ1pXeGxiV1Z1ZENCMGJ5QjBhR1VnWVdOMGFYWmxJR3hoZVc5MWRDQmthWEpsWTNScGIyNHNJSGRvYVd4bElHNWxaMkYwYVhabElHOXVaWE1nYzJocFpuUWdhWFFnZEc4Z2RHaGxJRzl3Y0c5emFYUmxJR1JwY21WamRHbHZiaTVjYmk4dkwxeHVMeTh2SUVCd1lYSmhiU0I3VG5WdFltVnlJQ2gxYm1sMGJHVnpjeWw5SUNSdUxXTnZiSFZ0Ym5NZ1d6RmRYRzR2THk4Z0lDQk9kVzFpWlhJZ2IyWWdZMjlzZFcxdWN5QmllU0IzYUdsamFDQjBhR1VnWld4bGJXVnVkQ0J6YUdsbWRITXVYRzR2THk5Y2JpOHZMeUJBWlhoaGJYQnNaU0J6WTNOeklDMGdWWE5oWjJWY2JpOHZMeUFnSUM1bGJHVnRaVzUwSUh0Y2JpOHZMeUFnSUNBZ1FHbHVZMngxWkdVZ2MyaHBablFvTFRNcE8xeHVMeTh2SUNBZ2ZWeHVMeTh2WEc0dkx5OGdRR1Y0WVcxd2JHVWdZM056SUMwZ1ExTlRJRzkxZEhCMWRGeHVMeTh2SUNBZ0xtVnNaVzFsYm5RZ2UxeHVMeTh2SUNBZ0lDQnRZWEpuYVc0dGJHVm1kRG9nTFRJMUxqVTRPVFF4SlR0Y2JpOHZMeUFnSUgxY2JseHVRRzFwZUdsdUlITm9hV1owS0NSdUxXTnZiSFZ0Ym5NNklERXBJSHRjYmlBZ1FHbHVZMngxWkdVZ2MyaHBablF0YVc0dFkyOXVkR1Y0ZENna2JpMWpiMngxYlc1ektUdGNibjFjYmx4dUx5OHZJRlJ5WVc1emJHRjBaWE1nWVc0Z1pXeGxiV1Z1ZENCb2IzSnBlbTl1ZEdGc2JIa2dZbmtnWVNCdWRXMWlaWElnYjJZZ1kyOXNkVzF1Y3l3Z2FXNGdZU0J6Y0dWamFXWnBZeUJ1WlhOMGFXNW5JR052Ym5SbGVIUXVYRzR2THk5Y2JpOHZMeUJBY0dGeVlXMGdlMHhwYzNSOUlDUnphR2xtZEZ4dUx5OHZJQ0FnUVNCc2FYTjBJR052Ym5SaGFXNXBibWNnZEdobElHNTFiV0psY2lCdlppQmpiMngxYlc1eklIUnZJSE5vYVdaMElDaGdKR052YkhWdGJuTmdLU0JoYm1RZ2RHaGxJRzUxYldKbGNpQnZaaUJqYjJ4MWJXNXpJRzltSUhSb1pTQndZWEpsYm5RZ1pXeGxiV1Z1ZENBb1lDUmpiMjUwWVdsdVpYSXRZMjlzZFcxdWMyQXBMbHh1THk4dlhHNHZMeThnSUNCVWFHVWdkSGR2SUhaaGJIVmxjeUJqWVc0Z1ltVWdjMlZ3WVhKaGRHVmtJSGRwZEdnZ1lXNTVJSE4wY21sdVp5QnpkV05vSUdGeklHQnZabUFzSUdBdllDd2daWFJqTGx4dUx5OHZYRzR2THk4Z1FHVjRZVzF3YkdVZ2MyTnpjeUF0SUZWellXZGxYRzR2THk4Z0lDQXVaV3hsYldWdWRDQjdYRzR2THk4Z0lDQWdJRUJwYm1Oc2RXUmxJSE5vYVdaMEtDMHpJRzltSURZcE8xeHVMeTh2SUNBZ2ZWeHVMeTh2WEc0dkx5OGdRR1Y0WVcxd2JHVWdZM056SUMwZ1ExTlRJRzkxZEhCMWRGeHVMeTh2SUNBZ0xtVnNaVzFsYm5RZ2UxeHVMeTh2SUNBZ0lDQnRZWEpuYVc0dGJHVm1kRG9nTFRVeUxqUXhORFU0SlR0Y2JpOHZMeUFnSUgxY2JseHVRRzFwZUdsdUlITm9hV1owTFdsdUxXTnZiblJsZUhRb0pITm9hV1owT2lBa1kyOXNkVzF1Y3lCdlppQWtZMjl1ZEdGcGJtVnlMV052YkhWdGJuTXBJSHRjYmlBZ0pHNHRZMjlzZFcxdWN6b2diblJvS0NSemFHbG1kQ3dnTVNrN1hHNGdJQ1J3WVhKbGJuUXRZMjlzZFcxdWN6b2dZMjl1ZEdGcGJtVnlMWE5vYVdaMEtDUnphR2xtZENrZ0lXZHNiMkpoYkR0Y2JseHVJQ0FrWkdseVpXTjBhVzl1T2lCblpYUXRaR2x5WldOMGFXOXVLQ1JzWVhsdmRYUXRaR2x5WldOMGFXOXVMQ0FrWkdWbVlYVnNkQzFzWVhsdmRYUXRaR2x5WldOMGFXOXVLVHRjYmlBZ0pHOXdjRzl6YVhSbExXUnBjbVZqZEdsdmJqb2daMlYwTFc5d2NHOXphWFJsTFdScGNtVmpkR2x2Ymlna1pHbHlaV04wYVc5dUtUdGNibHh1SUNCdFlYSm5hVzR0STNza2IzQndiM05wZEdVdFpHbHlaV04wYVc5dWZUb2dKRzR0WTI5c2RXMXVjeUFxSUdac1pYZ3RaM0pwWkNneExDQWtjR0Z5Wlc1MExXTnZiSFZ0Ym5NcElDc2dKRzR0WTI5c2RXMXVjeUFxSUdac1pYZ3RaM1YwZEdWeUtDUndZWEpsYm5RdFkyOXNkVzF1Y3lrN1hHNWNiaUFnTHk4Z1VtVnpaWFFnYm1WemRHbHVaeUJqYjI1MFpYaDBYRzRnSUNSd1lYSmxiblF0WTI5c2RXMXVjem9nSkdkeWFXUXRZMjlzZFcxdWN5QWhaMnh2WW1Gc08xeHVmVnh1SWl3S0NRa2lRR05vWVhKelpYUWdYQ0pWVkVZdE9Gd2lPMXh1WEc0dkx5OGdRV1JrY3lCd1lXUmthVzVuSUhSdklIUm9aU0JsYkdWdFpXNTBMbHh1THk4dlhHNHZMeThnUUhCaGNtRnRJSHRNYVhOMGZTQWtjR0ZrWkdsdVp5QmJabXhsZUMxbmRYUjBaWElvS1YxY2JpOHZMeUFnSUVFZ2JHbHpkQ0J2WmlCd1lXUmthVzVuSUhaaGJIVmxLSE1wSUhSdklIVnpaUzRnVUdGemMybHVaeUJnWkdWbVlYVnNkR0FnYVc0Z2RHaGxJR3hwYzNRZ2QybHNiQ0J5WlhOMWJIUWdhVzRnZFhOcGJtY2dkR2hsSUdkMWRIUmxjaUIzYVdSMGFDQmhjeUJoSUhCaFpHUnBibWNnZG1Gc2RXVXVYRzR2THk5Y2JpOHZMeUJBWlhoaGJYQnNaU0J6WTNOeklDMGdWWE5oWjJWY2JpOHZMeUFnSUM1bGJHVnRaVzUwSUh0Y2JpOHZMeUFnSUNBZ1FHbHVZMngxWkdVZ2NHRmtLRE13Y0hnZ0xUSXdjSGdnTVRCd2VDQmtaV1poZFd4MEtUdGNiaTh2THlBZ0lIMWNiaTh2TDF4dUx5OHZJRUJsZUdGdGNHeGxJR056Y3lBdElFTlRVeUJQZFhSd2RYUmNiaTh2THlBZ0lDNWxiR1Z0Wlc1MElIdGNiaTh2THlBZ0lDQWdjR0ZrWkdsdVp6b2dNekJ3ZUNBdE1qQndlQ0F4TUhCNElESXVNelUzTmpVbE8xeHVMeTh2SUNBZ2ZWeHVYRzVBYldsNGFXNGdjR0ZrS0NSd1lXUmthVzVuT2lCbWJHVjRMV2QxZEhSbGNpZ3BLU0I3WEc0Z0lDUndZV1JrYVc1bkxXeHBjM1E2SUc1MWJHdzdYRzRnSUVCbFlXTm9JQ1IyWVd4MVpTQnBiaUFrY0dGa1pHbHVaeUI3WEc0Z0lDQWdKSFpoYkhWbE9pQnBaaWdrZG1Gc2RXVWdQVDBnSjJSbFptRjFiSFFuTENCbWJHVjRMV2QxZEhSbGNpZ3BMQ0FrZG1Gc2RXVXBPMXh1SUNBZ0lDUndZV1JrYVc1bkxXeHBjM1E2SUdwdmFXNG9KSEJoWkdScGJtY3RiR2x6ZEN3Z0pIWmhiSFZsS1R0Y2JpQWdmVnh1SUNCd1lXUmthVzVuT2lBa2NHRmtaR2x1Wnkxc2FYTjBPMXh1ZlZ4dUlpd0tDUWtpUUdOb1lYSnpaWFFnWENKVlZFWXRPRndpTzF4dVhHNHZMeThnUm05eVkyVnpJSFJvWlNCbGJHVnRaVzUwSUhSdklHWnBiR3dnYVhSeklIQmhjbVZ1ZENCamIyNTBZV2x1WlhJdVhHNHZMeTljYmk4dkx5QkFaWGhoYlhCc1pTQnpZM056SUMwZ1ZYTmhaMlZjYmk4dkx5QWdJQzVsYkdWdFpXNTBJSHRjYmk4dkx5QWdJQ0FnUUdsdVkyeDFaR1VnWm1sc2JDMXdZWEpsYm5RN1hHNHZMeThnSUNCOVhHNHZMeTljYmk4dkx5QkFaWGhoYlhCc1pTQmpjM01nTFNCRFUxTWdUM1YwY0hWMFhHNHZMeThnSUNBdVpXeGxiV1Z1ZENCN1hHNHZMeThnSUNBZ0lIZHBaSFJvT2lBeE1EQWxPMXh1THk4dklDQWdJQ0JpYjNndGMybDZhVzVuT2lCaWIzSmtaWEl0WW05NE8xeHVMeTh2SUNBZ2ZWeHVYRzVBYldsNGFXNGdabWxzYkMxd1lYSmxiblFvS1NCN1hHNGdJSGRwWkhSb09pQXhNREFsTzF4dVhHNGdJRUJwWmlBa1ltOXlaR1Z5TFdKdmVDMXphWHBwYm1jZ1BUMGdabUZzYzJVZ2UxeHVJQ0FnSUdKdmVDMXphWHBwYm1jNklHSnZjbVJsY2kxaWIzZzdYRzRnSUgxY2JuMWNiaUlzQ2drSklrQmphR0Z5YzJWMElGd2lWVlJHTFRoY0lqdGNibHh1THk4dklFOTFkSEIxZEhNZ1lTQnRaV1JwWVMxeGRXVnllU0JpYkc5amF5QjNhWFJvSUdGdUlHOXdkR2x2Ym1Gc0lHZHlhV1FnWTI5dWRHVjRkQ0FvZEdobElIUnZkR0ZzSUc1MWJXSmxjaUJ2WmlCamIyeDFiVzV6SUhWelpXUWdhVzRnZEdobElHZHlhV1FwTGx4dUx5OHZYRzR2THk4Z1FIQmhjbUZ0SUh0TWFYTjBmU0FrY1hWbGNubGNiaTh2THlBZ0lFRWdiR2x6ZENCdlppQnRaV1JwWVNCeGRXVnllU0JtWldGMGRYSmxjeUJoYm1RZ2RtRnNkV1Z6TENCM2FHVnlaU0JsWVdOb0lHQWtabVZoZEhWeVpXQWdjMmh2ZFd4a0lHaGhkbVVnWVNCamIzSnlaWE53YjI1a2FXNW5JR0FrZG1Gc2RXVmdMbHh1THk4dklDQWdSbTl5SUdFZ2JHbHpkQ0J2WmlCMllXeHBaQ0IyWVd4MVpYTWdabTl5SUdBa1ptVmhkSFZ5WldBc0lHTnNhV05ySUZ0b1pYSmxYU2hvZEhSd09pOHZkM2QzTG5jekxtOXlaeTlVVWk5amMzTXpMVzFsWkdsaGNYVmxjbWxsY3k4amJXVmthV0V4S1M1Y2JpOHZMMXh1THk4dklDQWdTV1lnZEdobGNtVWdhWE1nYjI1c2VTQmhJSE5wYm1kc1pTQmdKSFpoYkhWbFlDQnBiaUJnSkhGMVpYSjVZQ3dnWUNSa1pXWmhkV3gwTFdabFlYUjFjbVZnSUdseklHZHZhVzVuSUhSdklHSmxJSFZ6WldRdVhHNHZMeTljYmk4dkx5QWdJRlJvWlNCdWRXMWlaWElnYjJZZ2RHOTBZV3dnWTI5c2RXMXVjeUJwYmlCMGFHVWdaM0pwWkNCallXNGdZbVVnYzJWMElHSjVJSEJoYzNOcGJtY2dZQ1JqYjJ4MWJXNXpZQ0JoZENCMGFHVWdaVzVrSUc5bUlIUm9aU0JzYVhOMElDaHZkbVZ5Y21sa1pYTWdZQ1IwYjNSaGJDMWpiMngxYlc1ellDa3VYRzR2THk5Y2JpOHZMMXh1THk4dklFQndZWEpoYlNCN1RuVnRZbVZ5SUNoMWJtbDBiR1Z6Y3lsOUlDUjBiM1JoYkMxamIyeDFiVzV6SUZza1ozSnBaQzFqYjJ4MWJXNXpYVnh1THk4dklDQWdMU0JPZFcxaVpYSWdiMllnWTI5c2RXMXVjeUIwYnlCMWMyVWdhVzRnZEdobElHNWxkeUJuY21sa0lHTnZiblJsZUhRdUlFTmhiaUJpWlNCelpYUWdZWE1nWVNCemFHOXlkR2hoYm1RZ2FXNGdkR2hsSUdacGNuTjBJSEJoY21GdFpYUmxjaTVjYmk4dkwxeHVMeTh2SUVCbGVHRnRjR3hsSUhOamMzTWdMU0JWYzJGblpWeHVMeTh2SUNBZ0xuSmxjM0J2Ym5OcGRtVXRaV3hsYldWdWRDQjdYRzR2THk4Z0lDQWdJQ0JBYVc1amJIVmtaU0J0WldScFlTZzNOamx3ZUNrZ2UxeHVMeTh2SUNBZ0lDQWdJQ0JBYVc1amJIVmtaU0J6Y0dGdUxXTnZiSFZ0Ym5Nb05pazdYRzR2THk4Z0lDQWdJQ0I5WEc0dkx5OGdJQ0I5WEc0dkx5OWNiaTh2THlBZ0xtNWxkeTFqYjI1MFpYaDBMV1ZzWlcxbGJuUWdlMXh1THk4dklDQWdJRUJwYm1Oc2RXUmxJRzFsWkdsaEtHMXBiaTEzYVdSMGFDQXpNakJ3ZUNCdFlYZ3RkMmxrZEdnZ05EZ3djSGdzSURZcElIdGNiaTh2THlBZ0lDQWdJRUJwYm1Oc2RXUmxJSE53WVc0dFkyOXNkVzF1Y3lnMktUdGNiaTh2THlBZ0lDQjlYRzR2THk4Z0lIMWNiaTh2TDF4dUx5OHZJRUJsZUdGdGNHeGxJR056Y3lBdElFTlRVeUJQZFhSd2RYUmNiaTh2THlBZ1FHMWxaR2xoSUhOamNtVmxiaUJoYm1RZ0tHMXBiaTEzYVdSMGFEb2dOelk1Y0hncElIdGNiaTh2THlBZ0lDQXVjbVZ6Y0c5dWMybDJaUzFsYkdWdFpXNTBJSHRjYmk4dkx5QWdJQ0FnSUdScGMzQnNZWGs2SUdKc2IyTnJPMXh1THk4dklDQWdJQ0FnWm14dllYUTZJR3hsWm5RN1hHNHZMeThnSUNBZ0lDQnRZWEpuYVc0dGNtbG5hSFE2SURJdU16VTNOalVsTzF4dUx5OHZJQ0FnSUNBZ2QybGtkR2c2SURRNExqZ3lNVEUzSlR0Y2JpOHZMeUFnSUNCOVhHNHZMeTljYmk4dkx5QWdJQ0F1Y21WemNHOXVjMmwyWlMxbGJHVnRaVzUwT214aGMzUXRZMmhwYkdRZ2UxeHVMeTh2SUNBZ0lDQWdiV0Z5WjJsdUxYSnBaMmgwT2lBd08xeHVMeTh2SUNBZ0lIMWNiaTh2THlBZ2ZWeHVMeTh2WEc0dkx5OGdJRUJ0WldScFlTQnpZM0psWlc0Z1lXNWtJQ2h0YVc0dGQybGtkR2c2SURNeU1IQjRLU0JoYm1RZ0tHMWhlQzEzYVdSMGFEb2dORGd3Y0hncElIdGNiaTh2THlBZ0lDQXVibVYzTFdOdmJuUmxlSFF0Wld4bGJXVnVkQ0I3WEc0dkx5OGdJQ0FnSUNCa2FYTndiR0Y1T2lCaWJHOWphenRjYmk4dkx5QWdJQ0FnSUdac2IyRjBPaUJzWldaME8xeHVMeTh2SUNBZ0lDQWdiV0Z5WjJsdUxYSnBaMmgwT2lBMExqZ3lPVEUySlR0Y2JpOHZMeUFnSUNBZ0lIZHBaSFJvT2lBeE1EQWxPMXh1THk4dklDQWdJSDFjYmk4dkwxeHVMeTh2SUNBZ0lDNXVaWGN0WTI5dWRHVjRkQzFsYkdWdFpXNTBPbXhoYzNRdFkyaHBiR1FnZTF4dUx5OHZJQ0FnSUNBZ2JXRnlaMmx1TFhKcFoyaDBPaUF3TzF4dUx5OHZJQ0FnSUgxY2JpOHZMeUFnZlZ4dVhHNUFiV2w0YVc0Z2JXVmthV0VvSkhGMVpYSjVPaUFrWm1WaGRIVnlaU0FrZG1Gc2RXVWdKR052YkhWdGJuTXNJQ1IwYjNSaGJDMWpiMngxYlc1ek9pQWtaM0pwWkMxamIyeDFiVzV6S1NCN1hHNGdJRUJwWmlCc1pXNW5kR2dvSkhGMVpYSjVLU0E5UFNBeElIdGNiaUFnSUNCQWJXVmthV0VnYzJOeVpXVnVJR0Z1WkNBb0pHUmxabUYxYkhRdFptVmhkSFZ5WlRvZ2JuUm9LQ1J4ZFdWeWVTd2dNU2twSUh0Y2JpQWdJQ0FnSUNSa1pXWmhkV3gwTFdkeWFXUXRZMjlzZFcxdWN6b2dKR2R5YVdRdFkyOXNkVzF1Y3p0Y2JpQWdJQ0FnSUNSbmNtbGtMV052YkhWdGJuTTZJQ1IwYjNSaGJDMWpiMngxYlc1eklDRm5iRzlpWVd3N1hHNGdJQ0FnSUNCQVkyOXVkR1Z1ZER0Y2JpQWdJQ0FnSUNSbmNtbGtMV052YkhWdGJuTTZJQ1JrWldaaGRXeDBMV2R5YVdRdFkyOXNkVzF1Y3lBaFoyeHZZbUZzTzF4dUlDQWdJSDFjYmlBZ2ZTQkFaV3h6WlNCN1hHNGdJQ0FnSkd4dmIzQXRkRzg2SUd4bGJtZDBhQ2drY1hWbGNua3BPMXh1SUNBZ0lDUnRaV1JwWVMxeGRXVnllVG9nWENKelkzSmxaVzRnWVc1a0lGd2lPMXh1SUNBZ0lDUmtaV1poZFd4MExXZHlhV1F0WTI5c2RXMXVjem9nSkdkeWFXUXRZMjlzZFcxdWN6dGNiaUFnSUNBa1ozSnBaQzFqYjJ4MWJXNXpPaUFrZEc5MFlXd3RZMjlzZFcxdWN5QWhaMnh2WW1Gc08xeHVYRzRnSUNBZ1FHbG1JR2x6TFc1dmRDaHBjeTFsZG1WdUtHeGxibWQwYUNna2NYVmxjbmtwS1NrZ2UxeHVJQ0FnSUNBZ0pHZHlhV1F0WTI5c2RXMXVjem9nYm5Sb0tDUnhkV1Z5ZVN3Z0pHeHZiM0F0ZEc4cElDRm5iRzlpWVd3N1hHNGdJQ0FnSUNBa2JHOXZjQzEwYnpvZ0pHeHZiM0F0ZEc4Z0xTQXhPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDUnBPaUF4TzF4dUlDQWdJRUIzYUdsc1pTQWthU0E4UFNBa2JHOXZjQzEwYnlCN1hHNGdJQ0FnSUNBa2JXVmthV0V0Y1hWbGNuazZJQ1J0WldScFlTMXhkV1Z5ZVNBcklGd2lLRndpSUNzZ2JuUm9LQ1J4ZFdWeWVTd2dKR2twSUNzZ1hDSTZJRndpSUNzZ2JuUm9LQ1J4ZFdWeWVTd2dKR2tnS3lBeEtTQXJJRndpS1NCY0lqdGNibHh1SUNBZ0lDQWdRR2xtSUNna2FTQXJJREVwSUNFOUlDUnNiMjl3TFhSdklIdGNiaUFnSUNBZ0lDQWdKRzFsWkdsaExYRjFaWEo1T2lBa2JXVmthV0V0Y1hWbGNua2dLeUJjSW1GdVpDQmNJanRjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSkdrNklDUnBJQ3NnTWp0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JBYldWa2FXRWdJM3NrYldWa2FXRXRjWFZsY25sOUlIdGNiaUFnSUNBZ0lFQmpiMjUwWlc1ME8xeHVJQ0FnSUNBZ0pHZHlhV1F0WTI5c2RXMXVjem9nSkdSbFptRjFiSFF0WjNKcFpDMWpiMngxYlc1eklDRm5iRzlpWVd3N1hHNGdJQ0FnZlZ4dUlDQjlYRzU5WEc0aUxBb0pDU0pBWTJoaGNuTmxkQ0JjSWxWVVJpMDRYQ0k3WEc1Y2JrQnRhWGhwYmlCaWNtVmhhM0J2YVc1MEtDUnhkV1Z5ZVRva1ptVmhkSFZ5WlNBa2RtRnNkV1VnSkdOdmJIVnRibk1zSUNSMGIzUmhiQzFqYjJ4MWJXNXpPaUFrWjNKcFpDMWpiMngxYlc1ektTQjdYRzRnSUVCcGJtTnNkV1JsSUMxdVpXRjBMWGRoY200b1hDSlVhR1VnWW5KbFlXdHdiMmx1ZENncElHMXBlR2x1SUhkaGN5QnlaVzVoYldWa0lIUnZJRzFsWkdsaEtDa2dhVzRnVG1WaGRDQXhMakF1SUZCc1pXRnpaU0IxY0dSaGRHVWdlVzkxY2lCd2NtOXFaV04wSUhkcGRHZ2dkR2hsSUc1bGR5QnplVzUwWVhnZ1ltVm1iM0psSUhSb1pTQnVaWGgwSUhabGNuTnBiMjRnWW5WdGNDNWNJaWs3WEc1Y2JpQWdRR2xtSUd4bGJtZDBhQ2drY1hWbGNua3BJRDA5SURFZ2UxeHVJQ0FnSUVCdFpXUnBZU0J6WTNKbFpXNGdZVzVrSUNna1pHVm1ZWFZzZEMxbVpXRjBkWEpsT2lCdWRHZ29KSEYxWlhKNUxDQXhLU2tnZTF4dUlDQWdJQ0FnSkdSbFptRjFiSFF0WjNKcFpDMWpiMngxYlc1ek9pQWtaM0pwWkMxamIyeDFiVzV6TzF4dUlDQWdJQ0FnSkdkeWFXUXRZMjlzZFcxdWN6b2dKSFJ2ZEdGc0xXTnZiSFZ0Ym5NN1hHNGdJQ0FnSUNCQVkyOXVkR1Z1ZER0Y2JpQWdJQ0FnSUNSbmNtbGtMV052YkhWdGJuTTZJQ1JrWldaaGRXeDBMV2R5YVdRdFkyOXNkVzF1Y3p0Y2JpQWdJQ0I5WEc0Z0lIMGdRR1ZzYzJVZ2FXWWdiR1Z1WjNSb0tDUnhkV1Z5ZVNrZ1BUMGdNaUI3WEc0Z0lDQWdRRzFsWkdsaElITmpjbVZsYmlCaGJtUWdLRzUwYUNna2NYVmxjbmtzSURFcE9pQnVkR2dvSkhGMVpYSjVMQ0F5S1NrZ2UxeHVJQ0FnSUNBZ0pHUmxabUYxYkhRdFozSnBaQzFqYjJ4MWJXNXpPaUFrWjNKcFpDMWpiMngxYlc1ek8xeHVJQ0FnSUNBZ0pHZHlhV1F0WTI5c2RXMXVjem9nSkhSdmRHRnNMV052YkhWdGJuTTdYRzRnSUNBZ0lDQkFZMjl1ZEdWdWREdGNiaUFnSUNBZ0lDUm5jbWxrTFdOdmJIVnRibk02SUNSa1pXWmhkV3gwTFdkeWFXUXRZMjlzZFcxdWN6dGNiaUFnSUNCOVhHNGdJSDBnUUdWc2MyVWdhV1lnYkdWdVozUm9LQ1J4ZFdWeWVTa2dQVDBnTXlCN1hHNGdJQ0FnUUcxbFpHbGhJSE5qY21WbGJpQmhibVFnS0c1MGFDZ2tjWFZsY25rc0lERXBPaUJ1ZEdnb0pIRjFaWEo1TENBeUtTa2dlMXh1SUNBZ0lDQWdKR1JsWm1GMWJIUXRaM0pwWkMxamIyeDFiVzV6T2lBa1ozSnBaQzFqYjJ4MWJXNXpPMXh1SUNBZ0lDQWdKR2R5YVdRdFkyOXNkVzF1Y3pvZ2JuUm9LQ1J4ZFdWeWVTd2dNeWs3WEc0Z0lDQWdJQ0JBWTI5dWRHVnVkRHRjYmlBZ0lDQWdJQ1JuY21sa0xXTnZiSFZ0Ym5NNklDUmtaV1poZFd4MExXZHlhV1F0WTI5c2RXMXVjenRjYmlBZ0lDQjlYRzRnSUgwZ1FHVnNjMlVnYVdZZ2JHVnVaM1JvS0NSeGRXVnllU2tnUFQwZ05DQjdYRzRnSUNBZ1FHMWxaR2xoSUhOamNtVmxiaUJoYm1RZ0tHNTBhQ2drY1hWbGNua3NJREVwT2lCdWRHZ29KSEYxWlhKNUxDQXlLU2tnWVc1a0lDaHVkR2dvSkhGMVpYSjVMQ0F6S1RvZ2JuUm9LQ1J4ZFdWeWVTd2dOQ2twSUh0Y2JpQWdJQ0FnSUNSa1pXWmhkV3gwTFdkeWFXUXRZMjlzZFcxdWN6b2dKR2R5YVdRdFkyOXNkVzF1Y3p0Y2JpQWdJQ0FnSUNSbmNtbGtMV052YkhWdGJuTTZJQ1IwYjNSaGJDMWpiMngxYlc1ek8xeHVJQ0FnSUNBZ1FHTnZiblJsYm5RN1hHNGdJQ0FnSUNBa1ozSnBaQzFqYjJ4MWJXNXpPaUFrWkdWbVlYVnNkQzFuY21sa0xXTnZiSFZ0Ym5NN1hHNGdJQ0FnZlZ4dUlDQjlJRUJsYkhObElHbG1JR3hsYm1kMGFDZ2tjWFZsY25rcElEMDlJRFVnZTF4dUlDQWdJRUJ0WldScFlTQnpZM0psWlc0Z1lXNWtJQ2h1ZEdnb0pIRjFaWEo1TENBeEtUb2diblJvS0NSeGRXVnllU3dnTWlrcElHRnVaQ0FvYm5Sb0tDUnhkV1Z5ZVN3Z015azZJRzUwYUNna2NYVmxjbmtzSURRcEtTQjdYRzRnSUNBZ0lDQWtaR1ZtWVhWc2RDMW5jbWxrTFdOdmJIVnRibk02SUNSbmNtbGtMV052YkhWdGJuTTdYRzRnSUNBZ0lDQWtaM0pwWkMxamIyeDFiVzV6T2lCdWRHZ29KSEYxWlhKNUxDQTFLVHRjYmlBZ0lDQWdJRUJqYjI1MFpXNTBPMXh1SUNBZ0lDQWdKR2R5YVdRdFkyOXNkVzF1Y3pvZ0pHUmxabUYxYkhRdFozSnBaQzFqYjJ4MWJXNXpPMXh1SUNBZ0lIMWNiaUFnZlNCQVpXeHpaU0I3WEc0Z0lDQWdRR2x1WTJ4MVpHVWdMVzVsWVhRdGQyRnliaWhjSWxkeWIyNW5JRzUxYldKbGNpQnZaaUJoY21kMWJXVnVkSE1nWm05eUlHSnlaV0ZyY0c5cGJuUW9LUzRnVW1WaFpDQjBhR1VnWkc5amRXMWxiblJoZEdsdmJpQm1iM0lnYlc5eVpTQmtaWFJoYVd4ekxsd2lLVHRjYmlBZ2ZWeHVmVnh1WEc1QWJXbDRhVzRnYm5Sb0xXOXRaV2RoS0NSdWRHZ3NJQ1JrYVhOd2JHRjVPaUJpYkc5amF5d2dKR1JwY21WamRHbHZiam9nWkdWbVlYVnNkQ2tnZTF4dUlDQkFhVzVqYkhWa1pTQXRibVZoZEMxM1lYSnVLRndpVkdobElHNTBhQzF2YldWbllTZ3BJRzFwZUdsdUlHbHpJR1JsY0hKbFkyRjBaV1F1SUZCc1pXRnpaU0IxYzJVZ2IyMWxaMkVvS1NCcGJuTjBaV0ZrTGx3aUtUdGNiaUFnUUdsdVkyeDFaR1VnYjIxbFoyRW9KRzUwYUNBa1pHbHpjR3hoZVN3Z0pHUnBjbVZqZEdsdmJpazdYRzU5WEc1Y2JpOHZMeUJTWlhObGRITWdkR2hsSUdGamRHbDJaU0JrYVhOd2JHRjVJSEJ5YjNCbGNuUjVJSFJ2SUdCaWJHOWphMkF1SUZCaGNuUnBZM1ZzWVhKc2VTQjFjMlZtZFd3Z2QyaGxiaUJqYUdGdVoybHVaeUIwYUdVZ1pHbHpjR3hoZVNCd2NtOXdaWEowZVNCcGJpQmhJSE5wYm1kc1pTQnliM2N1WEc0dkx5OWNiaTh2THlCQVpYaGhiWEJzWlNCelkzTnpJQzBnVlhOaFoyVmNiaTh2THlBZ0lDNWxiR1Z0Wlc1MElIdGNiaTh2THlBZ0lDQWdRR2x1WTJ4MVpHVWdjbTkzS0hSaFlteGxLVHRjYmk4dkx5QWdJQ0FnTHk4Z1EyOXVkR1Y0ZENCamFHRnVaMlZrSUhSdklIUmhZbXhsSUdScGMzQnNZWGxjYmk4dkx5QWdJSDFjYmk4dkwxeHVMeTh2SUNBZ1FHbHVZMngxWkdVZ2NtVnpaWFF0WkdsemNHeGhlVHRjYmk4dkx5QWdJQzh2SUVOdmJuUmxlSFFnYVhNZ2NtVnpaWFFnZEc4Z1lteHZZMnNnWkdsemNHeGhlVnh1WEc1QWJXbDRhVzRnY21WelpYUXRaR2x6Y0d4aGVTQjdYRzRnSUNSamIyNTBZV2x1WlhJdFpHbHpjR3hoZVMxMFlXSnNaVG9nWm1Gc2MyVWdJV2RzYjJKaGJEdGNiaUFnUUdsdVkyeDFaR1VnTFc1bFlYUXRkMkZ5YmloY0lsSmxjMlYwZEdsdVp5QWtaR2x6Y0d4aGVTQjNhV3hzSUdKbElHUmxjSEpsWTJGMFpXUWdhVzRnWm5WMGRYSmxJSFpsY25OcGIyNXpJR2x1SUdaaGRtOXlJRzltSUhSb1pTQmthWE53YkdGNUtDbDdMaTR1ZlNCdGFYaHBiaTVjSWlrN1hHNTlYRzVjYmk4dkx5QlNaWE5sZEhNZ2RHaGxJR0ZqZEdsMlpTQnNZWGx2ZFhRZ1pHbHlaV04wYVc5dUlIUnZJSFJvWlNCa1pXWmhkV3gwSUhaaGJIVmxJSE5sZENCcGJpQmdKR1JsWm1GMWJIUXRiR0Y1YjNWMExXUnBjbVZqZEdsdmJtQXVJRkJoY25ScFkzVnNZWEpzZVNCMWMyVm1kV3dnZDJobGJpQmphR0Z1WjJsdVp5QjBhR1VnYkdGNWIzVjBJR1JwY21WamRHbHZiaUJwYmlCaElITnBibWRzWlNCeWIzY3VYRzR2THk5Y2JpOHZMeUJBWlhoaGJYQnNaU0J6WTNOeklDMGdWWE5oWjJWY2JpOHZMeUFnSUM1bGJHVnRaVzUwSUh0Y2JpOHZMeUFnSUNBZ1FHbHVZMngxWkdVZ2NtOTNLQ1JrYVhKbFkzUnBiMjQ2SUZKVVRDazdYRzR2THk4Z0lDQWdJQzh2SUVOdmJuUmxlSFFnWTJoaGJtZGxaQ0IwYnlCeWFXZG9kQzEwYnkxc1pXWjBYRzR2THk4Z0lDQjlYRzR2THk5Y2JpOHZMeUFnSUVCcGJtTnNkV1JsSUhKbGMyVjBMV3hoZVc5MWRDMWthWEpsWTNScGIyNDdYRzR2THk4Z0lDQXZMeUJEYjI1MFpYaDBJR2x6SUhKbGMyVjBJSFJ2SUd4bFpuUXRkRzh0Y21sbmFIUmNibHh1UUcxcGVHbHVJSEpsYzJWMExXeGhlVzkxZEMxa2FYSmxZM1JwYjI0Z2UxeHVJQ0FrYkdGNWIzVjBMV1JwY21WamRHbHZiam9nSkdSbFptRjFiSFF0YkdGNWIzVjBMV1JwY21WamRHbHZiaUFoWjJ4dlltRnNPMXh1SUNCQWFXNWpiSFZrWlNBdGJtVmhkQzEzWVhKdUtGd2lVbVZ6WlhSMGFXNW5JQ1JrYVhKbFkzUnBiMjRnZDJsc2JDQmlaU0JrWlhCeVpXTmhkR1ZrSUdsdUlHWjFkSFZ5WlNCMlpYSnphVzl1Y3lCcGJpQm1ZWFp2Y2lCdlppQjBhR1VnWkdseVpXTjBhVzl1S0NsN0xpNHVmU0J0YVhocGJpNWNJaWs3WEc1OVhHNWNiaTh2THlCU1pYTmxkSE1nWW05MGFDQjBhR1VnWVdOMGFYWmxJR3hoZVc5MWRDQmthWEpsWTNScGIyNGdZVzVrSUhSb1pTQmhZM1JwZG1VZ1pHbHpjR3hoZVNCd2NtOXdaWEowZVM1Y2JpOHZMMXh1THk4dklFQmxlR0Z0Y0d4bElITmpjM01nTFNCVmMyRm5aVnh1THk4dklDQWdMbVZzWlcxbGJuUWdlMXh1THk4dklDQWdJQ0JBYVc1amJIVmtaU0J5YjNjb2RHRmliR1VzSUZKVVRDazdYRzR2THk4Z0lDQWdJQzh2SUVOdmJuUmxlSFFnWTJoaGJtZGxaQ0IwYnlCMFlXSnNaU0IwWVdKc1pTQmhibVFnY21sbmFIUXRkRzh0YkdWbWRGeHVMeTh2SUNBZ2ZWeHVMeTh2WEc0dkx5OGdJQ0JBYVc1amJIVmtaU0J5WlhObGRDMWhiR3c3WEc0dkx5OGdJQ0F2THlCRGIyNTBaWGgwSUdseklISmxjMlYwSUhSdklHSnNiMk5ySUdScGMzQnNZWGtnWVc1a0lHeGxablF0ZEc4dGNtbG5hSFJjYmx4dVFHMXBlR2x1SUhKbGMyVjBMV0ZzYkNCN1hHNGdJRUJwYm1Oc2RXUmxJSEpsYzJWMExXUnBjM0JzWVhrN1hHNGdJRUJwYm1Oc2RXUmxJSEpsYzJWMExXeGhlVzkxZEMxa2FYSmxZM1JwYjI0N1hHNTlYRzRpTEFvSkNTSkFZMmhoY25ObGRDQmNJbFZVUmkwNFhDSTdYRzVjYmtCdGFYaHBiaUJuY21sa0xXTnZiSFZ0YmkxbmNtRmthV1Z1ZENna2RtRnNkV1Z6TGk0dUtTQjdYRzRnSUdKaFkydG5jbTkxYm1RdGFXMWhaMlU2SUMxM1pXSnJhWFF0YkdsdVpXRnlMV2R5WVdScFpXNTBLR3hsWm5Rc0lDUjJZV3gxWlhNcE8xeHVJQ0JpWVdOclozSnZkVzVrTFdsdFlXZGxPaUF0Ylc5NkxXeHBibVZoY2kxbmNtRmthV1Z1ZENoc1pXWjBMQ0FrZG1Gc2RXVnpLVHRjYmlBZ1ltRmphMmR5YjNWdVpDMXBiV0ZuWlRvZ0xXMXpMV3hwYm1WaGNpMW5jbUZrYVdWdWRDaHNaV1owTENBa2RtRnNkV1Z6S1R0Y2JpQWdZbUZqYTJkeWIzVnVaQzFwYldGblpUb2dMVzh0YkdsdVpXRnlMV2R5WVdScFpXNTBLR3hsWm5Rc0lDUjJZV3gxWlhNcE8xeHVJQ0JpWVdOclozSnZkVzVrTFdsdFlXZGxPaUIxYm5GMWIzUmxLRndpYkdsdVpXRnlMV2R5WVdScFpXNTBLSFJ2SUd4bFpuUXNJQ043SkhaaGJIVmxjMzBwWENJcE8xeHVmVnh1WEc1QWFXWWdKSFpwYzNWaGJDMW5jbWxrSUQwOUlIUnlkV1VnYjNJZ0pIWnBjM1ZoYkMxbmNtbGtJRDA5SUhsbGN5QjdYRzRnSUdKdlpIazZZbVZtYjNKbElIdGNiaUFnSUNCQWFXNWpiSFZrWlNCbmNtbGtMV052YkhWdGJpMW5jbUZrYVdWdWRDaG5jbUZrYVdWdWRDMXpkRzl3Y3lna1ozSnBaQzFqYjJ4MWJXNXpLU2s3WEc0Z0lDQWdZMjl1ZEdWdWREb2dYQ0pjSWp0Y2JpQWdJQ0JrYVhOd2JHRjVPaUJwYm14cGJtVXRZbXh2WTJzN1hHNGdJQ0FnYUdWcFoyaDBPaUF4TURBbE8xeHVJQ0FnSUd4bFpuUTZJREE3WEc0Z0lDQWdiV0Z5WjJsdU9pQXdJR0YxZEc4N1hHNGdJQ0FnYldGNExYZHBaSFJvT2lBa2JXRjRMWGRwWkhSb08xeHVJQ0FnSUc5d1lXTnBkSGs2SUNSMmFYTjFZV3d0WjNKcFpDMXZjR0ZqYVhSNU8xeHVJQ0FnSUhCdmFXNTBaWEl0WlhabGJuUnpPaUJ1YjI1bE8xeHVJQ0FnSUhCdmMybDBhVzl1T2lCbWFYaGxaRHRjYmlBZ0lDQnlhV2RvZERvZ01EdGNiaUFnSUNCM2FXUjBhRG9nTVRBd0pUdGNibHh1SUNBZ0lFQnBaaUFrZG1semRXRnNMV2R5YVdRdGFXNWtaWGdnUFQwZ1ltRmpheUI3WEc0Z0lDQWdJQ0I2TFdsdVpHVjRPaUF0TVR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JBWld4elpTQnBaaUFrZG1semRXRnNMV2R5YVdRdGFXNWtaWGdnUFQwZ1puSnZiblFnZTF4dUlDQWdJQ0FnZWkxcGJtUmxlRG9nT1RrNU9UdGNiaUFnSUNCOVhHNWNiaUFnSUNCQVpXRmphQ0FrWW5KbFlXdHdiMmx1ZENCcGJpQWtkbWx6ZFdGc0xXZHlhV1F0WW5KbFlXdHdiMmx1ZEhNZ2UxeHVJQ0FnSUNBZ1FHbG1JQ1JpY21WaGEzQnZhVzUwSUh0Y2JpQWdJQ0FnSUNBZ1FHbHVZMngxWkdVZ2JXVmthV0VvSkdKeVpXRnJjRzlwYm5RcElIdGNiaUFnSUNBZ0lDQWdJQ0JBYVc1amJIVmtaU0JuY21sa0xXTnZiSFZ0YmkxbmNtRmthV1Z1ZENobmNtRmthV1Z1ZEMxemRHOXdjeWdrWjNKcFpDMWpiMngxYlc1ektTazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUgxY2JuMWNiaUlzQ2drSklrQmphR0Z5YzJWMElGd2lWVlJHTFRoY0lqdGNibHh1THk4dklFTm9ZVzVuWlhNZ2RHaGxJR1JwYzNCc1lYa2djSEp2Y0dWeWRIa2dkWE5sWkNCaWVTQnZkR2hsY2lCdGFYaHBibk1nWTJGc2JHVmtJR2x1SUhSb1pTQmpiMlJsSUdKc2IyTnJJR0Z5WjNWdFpXNTBMbHh1THk4dlhHNHZMeThnUUhCaGNtRnRJSHRUZEhKcGJtZDlJQ1JrYVhOd2JHRjVJRnRpYkc5amExMWNiaTh2THlBZ0lFUnBjM0JzWVhrZ2RtRnNkV1VnZEc4Z1ltVWdkWE5sWkNCM2FYUm9hVzRnZEdobElHSnNiMk5yTGlCRFlXNGdZbVVnWUhSaFlteGxZQ0J2Y2lCZ1lteHZZMnRnTGx4dUx5OHZYRzR2THk4Z1FHVjRZVzF3YkdVZ2MyTnpjMXh1THk4dklDQWdRR2x1WTJ4MVpHVWdaR2x6Y0d4aGVTMWpiMjUwWlhoMEtIUmhZbXhsS1NCN1hHNHZMeThnSUNBZ0xtUnBjM0JzWVhrdGRHRmliR1VnZTF4dUx5OHZJQ0FnSUNBZ1FHbHVZMngxWkdVZ2MzQmhiaTFqYjJ4MWJXNXpLRFlwTzF4dUx5OHZJQ0FnSUNCOVhHNHZMeThnSUNCOVhHNHZMeTljYmk4dkx5QkFaWGhoYlhCc1pTQmpjM05jYmk4dkx5QWdJQzVrYVhOd2JHRjVMWFJoWW14bElIdGNiaTh2THlBZ0lDQWdJR1JwYzNCc1lYazZJSFJoWW14bExXTmxiR3c3WEc0dkx5OGdJQ0FnSUNBdUxpNWNiaTh2THlBZ0lIMWNibHh1UUcxcGVHbHVJR1JwYzNCc1lYa3RZMjl1ZEdWNGRDZ2taR2x6Y0d4aGVUb2dZbXh2WTJzcElIdGNiaUFnSkhOamIzQmxMV1JwYzNCc1lYazZJQ1JqYjI1MFlXbHVaWEl0WkdsemNHeGhlUzEwWVdKc1pUdGNiaUFnSkdOdmJuUmhhVzVsY2kxa2FYTndiR0Y1TFhSaFlteGxPaUFrWkdsemNHeGhlU0E5UFNCMFlXSnNaU0FoWjJ4dlltRnNPMXh1WEc0Z0lFQmpiMjUwWlc1ME8xeHVYRzRnSUNSamIyNTBZV2x1WlhJdFpHbHpjR3hoZVMxMFlXSnNaVG9nSkhOamIzQmxMV1JwYzNCc1lYa2dJV2RzYjJKaGJEdGNibjFjYmlJc0Nna0pJa0JqYUdGeWMyVjBJRndpVlZSR0xUaGNJanRjYmx4dUx5OHZJRU5vWVc1blpYTWdkR2hsSUdScGNtVmpkR2x2YmlCd2NtOXdaWEowZVNCMWMyVmtJR0o1SUc5MGFHVnlJRzFwZUdsdWN5QmpZV3hzWldRZ2FXNGdkR2hsSUdOdlpHVWdZbXh2WTJzZ1lYSm5kVzFsYm5RdVhHNHZMeTljYmk4dkx5QkFjR0Z5WVcwZ2UxTjBjbWx1WjMwZ0pHUnBjbVZqZEdsdmJpQmJiR1ZtZEMxMGJ5MXlhV2RvZEYxY2JpOHZMeUFnSUV4aGVXOTFkQ0JrYVhKbFkzUnBiMjRnZEc4Z1ltVWdkWE5sWkNCM2FYUm9hVzRnZEdobElHSnNiMk5yTGlCRFlXNGdZbVVnWUd4bFpuUXRkRzh0Y21sbmFIUmdJRzl5SUdCeWFXZG9kQzEwYnkxc1pXWjBZQzVjYmk4dkwxeHVMeTh2SUVCbGVHRnRjR3hsSUhOamMzTWdMU0JWYzJGblpWeHVMeTh2SUNBZ1FHbHVZMngxWkdVZ1pHbHlaV04wYVc5dUxXTnZiblJsZUhRb2NtbG5hSFF0ZEc4dGJHVm1kQ2tnZTF4dUx5OHZJQ0FnSUM1eWFXZG9kQzEwYnkxc1pXWjBMV0pzYjJOcklIdGNiaTh2THlBZ0lDQWdJRUJwYm1Oc2RXUmxJSE53WVc0dFkyOXNkVzF1Y3lnMktUdGNiaTh2THlBZ0lDQWdmVnh1THk4dklDQWdmVnh1THk4dlhHNHZMeThnUUdWNFlXMXdiR1VnWTNOeklDMGdRMU5USUU5MWRIQjFkRnh1THk4dklDQWdMbkpwWjJoMExYUnZMV3hsWm5RdFlteHZZMnNnZTF4dUx5OHZJQ0FnSUNCbWJHOWhkRG9nY21sbmFIUTdYRzR2THk4Z0lDQWdJQ0F1TGk1Y2JpOHZMeUFnSUgxY2JseHVRRzFwZUdsdUlHUnBjbVZqZEdsdmJpMWpiMjUwWlhoMEtDUmthWEpsWTNScGIyNDZJR3hsWm5RdGRHOHRjbWxuYUhRcElIdGNiaUFnSkhOamIzQmxMV1JwY21WamRHbHZiam9nSkd4aGVXOTFkQzFrYVhKbFkzUnBiMjQ3WEc1Y2JpQWdRR2xtSUhSdkxXeHZkMlZ5TFdOaGMyVW9KR1JwY21WamRHbHZiaWtnUFQwZ1hDSnNaV1owTFhSdkxYSnBaMmgwWENJZ2UxeHVJQ0FnSUNSc1lYbHZkWFF0WkdseVpXTjBhVzl1T2lCTVZGSWdJV2RzYjJKaGJEdGNiaUFnZlNCQVpXeHpaU0JwWmlCMGJ5MXNiM2RsY2kxallYTmxLQ1JrYVhKbFkzUnBiMjRwSUQwOUlGd2ljbWxuYUhRdGRHOHRiR1ZtZEZ3aUlIdGNiaUFnSUNBa2JHRjViM1YwTFdScGNtVmpkR2x2YmpvZ1VsUk1JQ0ZuYkc5aVlXdzdYRzRnSUgxY2JseHVJQ0JBWTI5dWRHVnVkRHRjYmx4dUlDQWtiR0Y1YjNWMExXUnBjbVZqZEdsdmJqb2dKSE5qYjNCbExXUnBjbVZqZEdsdmJpQWhaMnh2WW1Gc08xeHVmVnh1SWl3S0NRa2lMeThnVG05MElHWjFibU4wYVc5dUlHWnZjaUJNYVdKellYTnpJR052YlhCaGRHbGlhV3hwZEhsY2JpOHZJR2gwZEhCek9pOHZaMmwwYUhWaUxtTnZiUzl6WVhOekwyeHBZbk5oYzNNdmFYTnpkV1Z6THpNMk9GeHVRR1oxYm1OMGFXOXVJR2x6TFc1dmRDZ2tkbUZzZFdVcElIdGNiaUFnUUhKbGRIVnliaUJwWmlna2RtRnNkV1VzSUdaaGJITmxMQ0IwY25WbEtUdGNibjFjYmx4dUx5OGdRMmhsWTJ0eklHbG1JR0VnYm5WdFltVnlJR2x6SUdWMlpXNWNia0JtZFc1amRHbHZiaUJwY3kxbGRtVnVLQ1JwYm5RcElIdGNiaUFnUUhKbGRIVnliaUFrYVc1MElDVWdNaUE5UFNBd08xeHVmVnh1WEc0dkx5QkRhR1ZqYTNNZ2FXWWdZVzRnWld4bGJXVnVkQ0JpWld4dmJtZHpJSFJ2SUdFZ2JHbHpkQ0J2Y2lCdWIzUmNia0JtZFc1amRHbHZiaUJpWld4dmJtZHpMWFJ2S0NSMFpYTjBaV1F0YVhSbGJTd2dKR3hwYzNRcElIdGNiaUFnUUhKbGRIVnliaUJwY3kxdWIzUW9ibTkwTFdKbGJHOXVaM010ZEc4b0pIUmxjM1JsWkMxcGRHVnRMQ0FrYkdsemRDa3BPMXh1ZlZ4dVhHNUFablZ1WTNScGIyNGdibTkwTFdKbGJHOXVaM010ZEc4b0pIUmxjM1JsWkMxcGRHVnRMQ0FrYkdsemRDa2dlMXh1SUNCQWNtVjBkWEp1SUdsekxXNXZkQ2hwYm1SbGVDZ2tiR2x6ZEN3Z0pIUmxjM1JsWkMxcGRHVnRLU2s3WEc1OVhHNWNiaTh2SUVOdmJuUmhhVzV6SUdScGMzQnNZWGtnZG1Gc2RXVmNia0JtZFc1amRHbHZiaUJqYjI1MFlXbHVjeTFrYVhOd2JHRjVMWFpoYkhWbEtDUnhkV1Z5ZVNrZ2UxeHVJQ0JBY21WMGRYSnVJR0psYkc5dVozTXRkRzhvZEdGaWJHVXNJQ1J4ZFdWeWVTbGNiaUFnSUNBZ0lDQnZjaUJpWld4dmJtZHpMWFJ2S0dKc2IyTnJMQ0FrY1hWbGNua3BYRzRnSUNBZ0lDQWdiM0lnWW1Wc2IyNW5jeTEwYnlocGJteHBibVV0WW14dlkyc3NJQ1J4ZFdWeWVTbGNiaUFnSUNBZ0lDQnZjaUJpWld4dmJtZHpMWFJ2S0dsdWJHbHVaU3dnSkhGMVpYSjVLVHRjYm4xY2JseHVMeThnVUdGeWMyVnpJSFJvWlNCbWFYSnpkQ0JoY21kMWJXVnVkQ0J2WmlCemNHRnVMV052YkhWdGJuTW9LVnh1UUdaMWJtTjBhVzl1SUdOdmJuUmhhVzVsY2kxemNHRnVLQ1J6Y0dGdU9pQWtjM0JoYmlrZ2UxeHVJQ0JBYVdZZ2JHVnVaM1JvS0NSemNHRnVLU0E5UFNBeklIdGNiaUFnSUNBa1kyOXVkR0ZwYm1WeUxXTnZiSFZ0Ym5NNklHNTBhQ2drYzNCaGJpd2dNeWs3WEc0Z0lDQWdRSEpsZEhWeWJpQWtZMjl1ZEdGcGJtVnlMV052YkhWdGJuTTdYRzRnSUgwZ1FHVnNjMlVnYVdZZ2JHVnVaM1JvS0NSemNHRnVLU0E5UFNBeUlIdGNiaUFnSUNBa1kyOXVkR0ZwYm1WeUxXTnZiSFZ0Ym5NNklHNTBhQ2drYzNCaGJpd2dNaWs3WEc0Z0lDQWdRSEpsZEhWeWJpQWtZMjl1ZEdGcGJtVnlMV052YkhWdGJuTTdYRzRnSUgxY2JseHVJQ0JBY21WMGRYSnVJQ1JuY21sa0xXTnZiSFZ0Ym5NN1hHNTlYRzVjYmtCbWRXNWpkR2x2YmlCamIyNTBZV2x1WlhJdGMyaHBablFvSkhOb2FXWjBPaUFrYzJocFpuUXBJSHRjYmlBZ0pIQmhjbVZ1ZEMxamIyeDFiVzV6T2lBa1ozSnBaQzFqYjJ4MWJXNXpJQ0ZrWldaaGRXeDBJQ0ZuYkc5aVlXdzdYRzVjYmlBZ1FHbG1JR3hsYm1kMGFDZ2tjMmhwWm5RcElEMDlJRE1nZTF4dUlDQWdJQ1JqYjI1MFlXbHVaWEl0WTI5c2RXMXVjem9nYm5Sb0tDUnphR2xtZEN3Z015azdYRzRnSUNBZ1FISmxkSFZ5YmlBa1kyOXVkR0ZwYm1WeUxXTnZiSFZ0Ym5NN1hHNGdJSDBnUUdWc2MyVWdhV1lnYkdWdVozUm9LQ1J6YUdsbWRDa2dQVDBnTWlCN1hHNGdJQ0FnSkdOdmJuUmhhVzVsY2kxamIyeDFiVzV6T2lCdWRHZ29KSE5vYVdaMExDQXlLVHRjYmlBZ0lDQkFjbVYwZFhKdUlDUmpiMjUwWVdsdVpYSXRZMjlzZFcxdWN6dGNiaUFnZlZ4dVhHNGdJRUJ5WlhSMWNtNGdKSEJoY21WdWRDMWpiMngxYlc1ek8xeHVmVnh1WEc0dkx5QkhaVzVsY21GMFpYTWdZU0J6ZEhKcGNHVmtJR0poWTJ0bmNtOTFibVJjYmtCbWRXNWpkR2x2YmlCbmNtRmthV1Z1ZEMxemRHOXdjeWdrWjNKcFpDMWpiMngxYlc1ekxDQWtZMjlzYjNJNklDUjJhWE4xWVd3dFozSnBaQzFqYjJ4dmNpa2dlMXh1SUNBa2RISmhibk53WVhKbGJuUTZJSFJ5WVc1emNHRnlaVzUwTzF4dVhHNGdJQ1JqYjJ4MWJXNHRkMmxrZEdnNklHWnNaWGd0WjNKcFpDZ3hMQ0FrWjNKcFpDMWpiMngxYlc1ektUdGNiaUFnSkdkMWRIUmxjaTEzYVdSMGFEb2dabXhsZUMxbmRYUjBaWElvSkdkeWFXUXRZMjlzZFcxdWN5azdYRzRnSUNSamIyeDFiVzR0YjJabWMyVjBPaUFrWTI5c2RXMXVMWGRwWkhSb08xeHVYRzRnSUNSMllXeDFaWE02SUNna2RISmhibk53WVhKbGJuUWdNQ3dnSkdOdmJHOXlJREFwTzF4dVhHNGdJRUJtYjNJZ0pHa2dabkp2YlNBeElIUnZJQ1JuY21sa0xXTnZiSFZ0Ym5NcU1pQjdYRzRnSUNBZ1FHbG1JR2x6TFdWMlpXNG9KR2twSUh0Y2JpQWdJQ0FnSUNSMllXeDFaWE02SUdGd2NHVnVaQ2drZG1Gc2RXVnpMQ0FrZEhKaGJuTndZWEpsYm5RZ0pHTnZiSFZ0YmkxdlptWnpaWFFzSUdOdmJXMWhLVHRjYmlBZ0lDQWdJQ1IyWVd4MVpYTTZJR0Z3Y0dWdVpDZ2tkbUZzZFdWekxDQWtZMjlzYjNJZ0pHTnZiSFZ0YmkxdlptWnpaWFFzSUdOdmJXMWhLVHRjYmlBZ0lDQWdJQ1JqYjJ4MWJXNHRiMlptYzJWME9pQWtZMjlzZFcxdUxXOW1abk5sZENBcklDUmpiMngxYlc0dGQybGtkR2c3WEc0Z0lDQWdmU0JBWld4elpTQjdYRzRnSUNBZ0lDQWtkbUZzZFdWek9pQmhjSEJsYm1Rb0pIWmhiSFZsY3l3Z0pHTnZiRzl5SUNSamIyeDFiVzR0YjJabWMyVjBMQ0JqYjIxdFlTazdYRzRnSUNBZ0lDQWtkbUZzZFdWek9pQmhjSEJsYm1Rb0pIWmhiSFZsY3l3Z0pIUnlZVzV6Y0dGeVpXNTBJQ1JqYjJ4MWJXNHRiMlptYzJWMExDQmpiMjF0WVNrN1hHNGdJQ0FnSUNBa1kyOXNkVzF1TFc5bVpuTmxkRG9nSkdOdmJIVnRiaTF2Wm1aelpYUWdLeUFrWjNWMGRHVnlMWGRwWkhSb08xeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lFQnlaWFIxY200Z0pIWmhiSFZsY3p0Y2JuMWNibHh1THk4Z1RHRjViM1YwSUdScGNtVmpkR2x2Ymx4dVFHWjFibU4wYVc5dUlHZGxkQzFrYVhKbFkzUnBiMjRvSkd4aGVXOTFkQ3dnSkdSbFptRjFiSFFwSUh0Y2JpQWdKR1JwY21WamRHbHZiam9nYm5Wc2JEdGNibHh1SUNCQWFXWWdkRzh0ZFhCd1pYSXRZMkZ6WlNna2JHRjViM1YwS1NBOVBTQmNJa3hVVWx3aUlHOXlJSFJ2TFhWd2NHVnlMV05oYzJVb0pHeGhlVzkxZENrZ1BUMGdYQ0pTVkV4Y0lpQjdYRzRnSUNBZ0pHUnBjbVZqZEdsdmJqb2daR2x5WldOMGFXOXVMV1p5YjIwdGJHRjViM1YwS0NSc1lYbHZkWFFwTzF4dUlDQjlJRUJsYkhObElIdGNiaUFnSUNBa1pHbHlaV04wYVc5dU9pQmthWEpsWTNScGIyNHRabkp2YlMxc1lYbHZkWFFvSkdSbFptRjFiSFFwTzF4dUlDQjlYRzVjYmlBZ1FISmxkSFZ5YmlBa1pHbHlaV04wYVc5dU8xeHVmVnh1WEc1QVpuVnVZM1JwYjI0Z1pHbHlaV04wYVc5dUxXWnliMjB0YkdGNWIzVjBLQ1JzWVhsdmRYUXBJSHRjYmlBZ0pHUnBjbVZqZEdsdmJqb2diblZzYkR0Y2JseHVJQ0JBYVdZZ2RHOHRkWEJ3WlhJdFkyRnpaU2drYkdGNWIzVjBLU0E5UFNCY0lreFVVbHdpSUh0Y2JpQWdJQ0FrWkdseVpXTjBhVzl1T2lCeWFXZG9kRHRjYmlBZ2ZTQkFaV3h6WlNCN1hHNGdJQ0FnSkdScGNtVmpkR2x2YmpvZ2JHVm1kRHRjYmlBZ2ZWeHVYRzRnSUVCeVpYUjFjbTRnSkdScGNtVmpkR2x2Ymp0Y2JuMWNibHh1UUdaMWJtTjBhVzl1SUdkbGRDMXZjSEJ2YzJsMFpTMWthWEpsWTNScGIyNG9KR1JwY21WamRHbHZiaWtnZTF4dUlDQWtiM0J3YjNOcGRHVXRaR2x5WldOMGFXOXVPaUJzWldaME8xeHVYRzRnSUVCcFppQWtaR2x5WldOMGFXOXVJRDA5SUZ3aWJHVm1kRndpSUh0Y2JpQWdJQ0FrYjNCd2IzTnBkR1V0WkdseVpXTjBhVzl1T2lCeWFXZG9kRHRjYmlBZ2ZWeHVYRzRnSUVCeVpYUjFjbTRnSkc5d2NHOXphWFJsTFdScGNtVmpkR2x2Ymp0Y2JuMWNiaUlzQ2drSklrQmphR0Z5YzJWMElGd2lWVlJHTFRoY0lqdGNibHh1THk4dklGSmxkSFZ5Ym5NZ1lTQnRaV1JwWVNCamIyNTBaWGgwSUNodFpXUnBZU0J4ZFdWeWVTQXZJR2R5YVdRZ1kyOXVkR1Y0ZENrZ2RHaGhkQ0JqWVc0Z1ltVWdjM1J2Y21Wa0lHbHVJR0VnZG1GeWFXRmliR1VnWVc1a0lIQmhjM05sWkNCMGJ5QmdiV1ZrYVdFb0tXQWdZWE1nWVNCemFXNW5iR1V0YTJWNWQyOXlaQ0JoY21kMWJXVnVkQzRnVFdWa2FXRWdZMjl1ZEdWNGRITWdaR1ZtYVc1bFpDQjFjMmx1WnlCZ2JtVjNMV0p5WldGcmNHOXBiblJnSUdGeVpTQjFjMlZrSUdKNUlIUm9aU0IyYVhOMVlXd2daM0pwWkN3Z1lYTWdiRzl1WnlCaGN5QjBhR1Y1SUdGeVpTQmtaV1pwYm1Wa0lHSmxabTl5WlNCcGJYQnZjblJwYm1jZ1RtVmhkQzVjYmk4dkwxeHVMeTh2SUVCd1lYSmhiU0I3VEdsemRIMGdKSEYxWlhKNVhHNHZMeThnSUNCQklHeHBjM1FnYjJZZ2JXVmthV0VnY1hWbGNua2dabVZoZEhWeVpYTWdZVzVrSUhaaGJIVmxjeTRnUldGamFDQmdKR1psWVhSMWNtVmdJSE5vYjNWc1pDQm9ZWFpsSUdFZ1kyOXljbVZ6Y0c5dVpHbHVaeUJnSkhaaGJIVmxZQzVjYmk4dkwxeHVMeTh2SUNBZ1NXWWdkR2hsY21VZ2FYTWdiMjVzZVNCaElITnBibWRzWlNCZ0pIWmhiSFZsWUNCcGJpQmdKSEYxWlhKNVlDd2dZQ1JrWldaaGRXeDBMV1psWVhSMWNtVmdJR2x6SUdkdmFXNW5JSFJ2SUdKbElIVnpaV1F1WEc0dkx5OWNiaTh2THlBZ0lGUm9aU0J1ZFcxaVpYSWdiMllnZEc5MFlXd2dZMjlzZFcxdWN5QnBiaUIwYUdVZ1ozSnBaQ0JqWVc0Z1ltVWdjMlYwSUdKNUlIQmhjM05wYm1jZ1lDUmpiMngxYlc1ellDQmhkQ0IwYUdVZ1pXNWtJRzltSUhSb1pTQnNhWE4wSUNodmRtVnljbWxrWlhNZ1lDUjBiM1JoYkMxamIyeDFiVzV6WUNrdUlFWnZjaUJoSUd4cGMzUWdiMllnZG1Gc2FXUWdkbUZzZFdWeklHWnZjaUJnSkdabFlYUjFjbVZnTENCamJHbGpheUJiYUdWeVpWMG9hSFIwY0RvdkwzZDNkeTUzTXk1dmNtY3ZWRkl2WTNOek15MXRaV1JwWVhGMVpYSnBaWE12STIxbFpHbGhNU2t1WEc0dkx5OWNiaTh2THlCQWNHRnlZVzBnZTA1MWJXSmxjaUFvZFc1cGRHeGxjM01wZlNBa2RHOTBZV3d0WTI5c2RXMXVjeUJiSkdkeWFXUXRZMjlzZFcxdWMxMWNiaTh2THlBZ0lDMGdUblZ0WW1WeUlHOW1JR052YkhWdGJuTWdkRzhnZFhObElHbHVJSFJvWlNCdVpYY2daM0pwWkNCamIyNTBaWGgwTGlCRFlXNGdZbVVnYzJWMElHRnpJR0VnYzJodmNuUm9ZVzVrSUdsdUlIUm9aU0JtYVhKemRDQndZWEpoYldWMFpYSXVYRzR2THk5Y2JpOHZMeUJBWlhoaGJYQnNaU0J6WTNOeklDMGdWWE5oWjJWY2JpOHZMeUFnSUNSdGIySnBiR1U2SUc1bGR5MWljbVZoYTNCdmFXNTBLRzFoZUMxM2FXUjBhQ0EwT0RCd2VDQTBLVHRjYmk4dkwxeHVMeTh2SUNBZ0xtVnNaVzFsYm5RZ2UxeHVMeTh2SUNBZ0lDQkFhVzVqYkhWa1pTQnRaV1JwWVNna2JXOWlhV3hsS1NCN1hHNHZMeThnSUNBZ0lDQWdRR2x1WTJ4MVpHVWdjM0JoYmkxamIyeDFiVzV6S0RRcE8xeHVMeTh2SUNBZ0lDQjlYRzR2THk4Z0lDQjlYRzR2THk5Y2JpOHZMeUJBWlhoaGJYQnNaU0JqYzNNZ0xTQkRVMU1nVDNWMGNIVjBYRzR2THk4Z0lDQkFiV1ZrYVdFZ2MyTnlaV1Z1SUdGdVpDQW9iV0Y0TFhkcFpIUm9PaUEwT0RCd2VDa2dlMXh1THk4dklDQWdJQ0F1Wld4bGJXVnVkQ0I3WEc0dkx5OGdJQ0FnSUNBZ1pHbHpjR3hoZVRvZ1lteHZZMnM3WEc0dkx5OGdJQ0FnSUNBZ1pteHZZWFE2SUd4bFpuUTdYRzR2THk4Z0lDQWdJQ0FnYldGeVoybHVMWEpwWjJoME9pQTNMalF5TWprM0pUdGNiaTh2THlBZ0lDQWdJQ0IzYVdSMGFEb2dNVEF3SlR0Y2JpOHZMeUFnSUNBZ2ZWeHVMeTh2SUNBZ0lDQXVaV3hsYldWdWREcHNZWE4wTFdOb2FXeGtJSHRjYmk4dkx5QWdJQ0FnSUNCdFlYSm5hVzR0Y21sbmFIUTZJREE3WEc0dkx5OGdJQ0FnSUgxY2JpOHZMeUFnSUgxY2JseHVRR1oxYm1OMGFXOXVJRzVsZHkxaWNtVmhhM0J2YVc1MEtDUnhkV1Z5ZVRvZ0pHWmxZWFIxY21VZ0pIWmhiSFZsSUNSamIyeDFiVzV6TENBa2RHOTBZV3d0WTI5c2RXMXVjem9nSkdkeWFXUXRZMjlzZFcxdWN5a2dlMXh1SUNCQWFXWWdiR1Z1WjNSb0tDUnhkV1Z5ZVNrZ1BUMGdNU0I3WEc0Z0lDQWdKSEYxWlhKNU9pQWtaR1ZtWVhWc2RDMW1aV0YwZFhKbElHNTBhQ2drY1hWbGNua3NJREVwSUNSMGIzUmhiQzFqYjJ4MWJXNXpPMXh1SUNCOUlFQmxiSE5sSUdsbUlHbHpMV1YyWlc0b2JHVnVaM1JvS0NSeGRXVnllU2twSUh0Y2JpQWdJQ0FrY1hWbGNuazZJR0Z3Y0dWdVpDZ2tjWFZsY25rc0lDUjBiM1JoYkMxamIyeDFiVzV6S1R0Y2JpQWdmVnh1WEc0Z0lFQnBaaUJwY3kxdWIzUW9ZbVZzYjI1bmN5MTBieWdrY1hWbGNua3NJQ1IyYVhOMVlXd3RaM0pwWkMxaWNtVmhhM0J2YVc1MGN5a3BJSHRjYmlBZ0lDQWtkbWx6ZFdGc0xXZHlhV1F0WW5KbFlXdHdiMmx1ZEhNNklHRndjR1Z1WkNna2RtbHpkV0ZzTFdkeWFXUXRZbkpsWVd0d2IybHVkSE1zSUNSeGRXVnllU3dnWTI5dGJXRXBJQ0ZuYkc5aVlXdzdYRzRnSUgxY2JseHVJQ0JBY21WMGRYSnVJQ1J4ZFdWeWVUdGNibjFjYmlJc0Nna0pJa0JqYUdGeWMyVjBJRndpVlZSR0xUaGNJanRjYmx4dUx5OHZJRk5sZEhNZ2RHaGxJSEpsYkdGMGFYWmxJSGRwWkhSb0lHOW1JR0VnYzJsdVoyeGxJR2R5YVdRZ1kyOXNkVzF1TGlCVWFHVWdkVzVwZENCMWMyVmtJSE5vYjNWc1pDQmlaU0IwYUdVZ2MyRnRaU0J2Ym1VZ2RYTmxaQ0IwYnlCa1pXWnBibVVnWUNSbmRYUjBaWEpnTGlCVWJ5QnNaV0Z5YmlCdGIzSmxJR0ZpYjNWMElHQnRiMlIxYkdGeUxYTmpZV3hsS0NsZ0lITmxaU0JiUW05MWNtSnZiaUJrYjJOelhTaG9kSFJ3T2k4dlltOTFjbUp2Ymk1cGJ5OWtiMk56THlOdGIyUjFiR0Z5TFhOallXeGxLUzRnVTJWMElIZHBkR2dnWVNCZ0lXZHNiMkpoYkdBZ1pteGhaeTVjYmk4dkwxeHVMeTh2SUVCMGVYQmxJRTUxYldKbGNpQW9WVzVwZENsY2JseHVKR052YkhWdGJqb2diVzlrZFd4aGNpMXpZMkZzWlNnekxDQXhaVzBzSUNSbmIyeGtaVzRwSUNGa1pXWmhkV3gwTzF4dVhHNHZMeThnVTJWMGN5QjBhR1VnY21Wc1lYUnBkbVVnZDJsa2RHZ2diMllnWVNCemFXNW5iR1VnWjNKcFpDQm5kWFIwWlhJdUlGUm9aU0IxYm1sMElIVnpaV1FnYzJodmRXeGtJR0psSUhSb1pTQnpZVzFsSUc5dVpTQjFjMlZrSUhSdklHUmxabWx1WlNCZ0pHTnZiSFZ0Ym1BdUlGUnZJR3hsWVhKdUlHMXZjbVVnWVdKdmRYUWdZRzF2WkhWc1lYSXRjMk5oYkdVb0tXQWdjMlZsSUZ0Q2IzVnlZbTl1SUdSdlkzTmRLR2gwZEhBNkx5OWliM1Z5WW05dUxtbHZMMlJ2WTNNdkkyMXZaSFZzWVhJdGMyTmhiR1VwTGlCVFpYUWdkMmwwYUNCMGFHVWdZQ0ZuYkc5aVlXeGdJR1pzWVdjdVhHNHZMeTljYmk4dkx5QkFkSGx3WlNCT2RXMWlaWElnS0ZWdWFYUXBYRzVjYmlSbmRYUjBaWEk2SUcxdlpIVnNZWEl0YzJOaGJHVW9NU3dnTVdWdExDQWtaMjlzWkdWdUtTQWhaR1ZtWVhWc2REdGNibHh1THk4dklGTmxkSE1nZEdobElIUnZkR0ZzSUc1MWJXSmxjaUJ2WmlCamIyeDFiVzV6SUdsdUlIUm9aU0JuY21sa0xpQkpkSE1nZG1Gc2RXVWdZMkZ1SUdKbElHOTJaWEp5YVdSa1pXNGdhVzV6YVdSbElHRWdiV1ZrYVdFZ2NYVmxjbmtnZFhOcGJtY2dkR2hsSUdCdFpXUnBZU2dwWUNCdGFYaHBiaTRnVTJWMElIZHBkR2dnZEdobElHQWhaMnh2WW1Gc1lDQm1iR0ZuTGx4dUx5OHZYRzR2THk4Z1FIUjVjR1VnVG5WdFltVnlJQ2hWYm1sMGJHVnpjeWxjYmx4dUpHZHlhV1F0WTI5c2RXMXVjem9nTVRJZ0lXUmxabUYxYkhRN1hHNWNiaTh2THlCVFpYUnpJSFJvWlNCdFlYZ3RkMmxrZEdnZ2NISnZjR1Z5ZEhrZ2IyWWdkR2hsSUdWc1pXMWxiblFnZEdoaGRDQnBibU5zZFdSbGN5QmdiM1YwWlhJdFkyOXVkR0ZwYm1WeUtDbGdMaUJUWlhRZ2QybDBhQ0IwYUdVZ1lDRm5iRzlpWVd4Z0lHWnNZV2N1WEc0dkx5OWNiaTh2THlCQWRIbHdaU0JPZFcxaVpYSWdLRlZ1YVhRcFhHNHZMeTljYmlSdFlYZ3RkMmxrZEdnNklERXlNREJ3ZUNBaFpHVm1ZWFZzZER0Y2JseHVMeTh2SUZkb1pXNGdjMlYwSUhSdklIUnlkV1VzSUdsMElITmxkSE1nZEdobElHSnZlQzF6YVhwcGJtY2djSEp2Y0dWeWRIa2diMllnWVd4c0lHVnNaVzFsYm5SeklIUnZJR0JpYjNKa1pYSXRZbTk0WUM0Z1UyVjBJSGRwZEdnZ1lTQmdJV2RzYjJKaGJHQWdabXhoWnk1Y2JpOHZMMXh1THk4dklFQjBlWEJsSUVKdmIyeGNiaTh2TDF4dUx5OHZJRUJsZUdGdGNHeGxJR056Y3lBdElFTlRVeUJQZFhSd2RYUmNiaTh2THlBZ0lHaDBiV3dnZTF4dUx5OHZJQ0FnSUNCaWIzZ3RjMmw2YVc1bk9pQmliM0prWlhJdFltOTRPeUI5WEc0dkx5OWNiaTh2THlBZ0lDb3NJQ282T21GbWRHVnlMQ0FxT2pwaVpXWnZjbVVnZTF4dUx5OHZJQ0FnSUNCaWIzZ3RjMmw2YVc1bk9pQnBibWhsY21sME8xeHVMeTh2SUNBZ2ZWeHVYRzRrWW05eVpHVnlMV0p2ZUMxemFYcHBibWM2SUhSeWRXVWdJV1JsWm1GMWJIUTdYRzVjYmk4dkx5QlRaWFJ6SUhSb1pTQmtaV1poZFd4MElGdHRaV1JwWVNCbVpXRjBkWEpsWFNob2RIUndPaTh2ZDNkM0xuY3pMbTl5Wnk5VVVpOWpjM016TFcxbFpHbGhjWFZsY21sbGN5OGpiV1ZrYVdFcElIUm9ZWFFnWUcxbFpHbGhLQ2xnSUdGdVpDQmdibVYzTFdKeVpXRnJjRzlwYm5Rb0tXQWdjbVYyWlhKMElIUnZJSGRvWlc0Z2IyNXNlU0JoSUdKeVpXRnJjRzlwYm5RZ2RtRnNkV1VnYVhNZ2NHRnpjMlZrTGlCVFpYUWdkMmwwYUNCaElHQWhaMnh2WW1Gc1lDQm1iR0ZuTGx4dUx5OHZYRzR2THk4Z1FIUjVjR1VnVTNSeWFXNW5YRzVjYmlSa1pXWmhkV3gwTFdabFlYUjFjbVU2SUcxcGJpMTNhV1IwYURzZ0x5OGdSR1ZtWVhWc2RDQkFiV1ZrYVdFZ1ptVmhkSFZ5WlNCbWIzSWdkR2hsSUdKeVpXRnJjRzlwYm5Rb0tTQnRhWGhwYmx4dVhHNHZMeTlUWlhSeklIUm9aU0JrWldaaGRXeDBJR3hoZVc5MWRDQmthWEpsWTNScGIyNGdiMllnZEdobElHZHlhV1F1SUVOaGJpQmlaU0JnVEZSU1lDQnZjaUJnVWxSTVlDNGdVMlYwSUhkcGRHZ2dZU0JnSVdkc2IySmhiR0FnWm14aFp5NWNiaTh2TDF4dUx5OHZRSFI1Y0dVZ1UzUnlhVzVuWEc1Y2JpUmtaV1poZFd4MExXeGhlVzkxZEMxa2FYSmxZM1JwYjI0NklFeFVVaUFoWkdWbVlYVnNkRHRjYmlJc0Nna0pJa0JqYUdGeWMyVjBJRndpVlZSR0xUaGNJanRjYmx4dUx5OHZJRVJwYzNCc1lYbHpJSFJvWlNCMmFYTjFZV3dnWjNKcFpDQjNhR1Z1SUhObGRDQjBieUIwY25WbExpQlVhR1VnYjNabGNteGhhV1FnWjNKcFpDQnRZWGtnWW1VZ1ptVjNJSEJwZUdWc2N5QnZabVlnWkdWd1pXNWthVzVuSUc5dUlIUm9aU0JpY205M2MyVnlKM01nY21WdVpHVnlhVzVuSUdWdVoybHVaU0JoYm1RZ2NHbDRaV3dnY205MWJtUnBibWNnWVd4bmIzSnBkR2h0TGlCVFpYUWdkMmwwYUNCMGFHVWdZQ0ZuYkc5aVlXeGdJR1pzWVdjdVhHNHZMeTljYmk4dkx5QkFkSGx3WlNCQ2IyOXNYRzVjYmlSMmFYTjFZV3d0WjNKcFpEb2dabUZzYzJVZ0lXUmxabUYxYkhRN1hHNWNiaTh2THlCVFpYUnpJSFJvWlNCMmFYTjFZV3dnWjNKcFpDQmpiMnh2Y2k0Z1UyVjBJSGRwZEdnZ1lDRm5iRzlpWVd4Z0lHWnNZV2N1WEc0dkx5OWNiaTh2THlCQWRIbHdaU0JEYjJ4dmNseHVYRzRrZG1semRXRnNMV2R5YVdRdFkyOXNiM0k2SUNObFpXVWdJV1JsWm1GMWJIUTdYRzVjYmk4dkx5QlRaWFJ6SUhSb1pTQmdlaTFwYm1SbGVHQWdjSEp2Y0dWeWRIa2diMllnZEdobElIWnBjM1ZoYkNCbmNtbGtMaUJEWVc0Z1ltVWdZR0poWTJ0Z0lDaGlaV2hwYm1RZ1kyOXVkR1Z1ZENrZ2IzSWdZR1p5YjI1MFlDQW9hVzRnWm5KdmJuUWdiMllnWTI5dWRHVnVkQ2t1SUZObGRDQjNhWFJvSUdBaFoyeHZZbUZzWUNCbWJHRm5MbHh1THk4dlhHNHZMeThnUUhSNWNHVWdVM1J5YVc1blhHNWNiaVIyYVhOMVlXd3RaM0pwWkMxcGJtUmxlRG9nWW1GamF5QWhaR1ZtWVhWc2REdGNibHh1THk4dklGTmxkSE1nZEdobElHOXdZV05wZEhrZ2NISnZjR1Z5ZEhrZ2IyWWdkR2hsSUhacGMzVmhiQ0JuY21sa0xpQlRaWFFnZDJsMGFDQmdJV2RzYjJKaGJHQWdabXhoWnk1Y2JpOHZMMXh1THk4dklFQjBlWEJsSUU1MWJXSmxjaUFvZFc1cGRHeGxjM01wWEc1Y2JpUjJhWE4xWVd3dFozSnBaQzF2Y0dGamFYUjVPaUF3TGpRZ0lXUmxabUYxYkhRN1hHNWNiaVIyYVhOMVlXd3RaM0pwWkMxaWNtVmhhM0J2YVc1MGN6b2dLQ2tnSVdSbFptRjFiSFE3WEc0aUxBb0pDU0pBWTJoaGNuTmxkQ0JjSWxWVVJpMDRYQ0k3WEc1Y2JpOHZMeUJFYVhOaFlteGxJR0ZzYkNCa1pYQnlaV05oZEdsdmJpQjNZWEp1YVc1bmN5NGdSR1ZtWVhWc2RITWdkRzhnWUdaaGJITmxZQzRnVTJWMElIZHBkR2dnWVNCZ0lXZHNiMkpoYkdBZ1pteGhaeTVjYmk4dkwxeHVMeTh2SUVCMGVYQmxJRUp2YjJ4Y2JseHVKR1JwYzJGaWJHVXRkMkZ5Ym1sdVozTTZJR1poYkhObElDRmtaV1poZFd4ME8xeHVYRzVBYldsNGFXNGdMVzVsWVhRdGQyRnliaWdrYldWemMyRm5aU2tnZTF4dUlDQkFhV1lnSkdScGMyRmliR1V0ZDJGeWJtbHVaM01nUFQwZ1ptRnNjMlVnZTF4dUlDQWdJRUIzWVhKdUlGd2lJM3NrYldWemMyRm5aWDFjSWp0Y2JpQWdmVnh1ZlZ4dUlnb0pYU3dLQ1NKdFlYQndhVzVuY3lJNklDSkJRMEZCTERSRlFVRTBSVHRCUVVVMVJUczdPenRIUVVsSE8wRkJSVWdzU1VGQlNTeERRVUZETzBWQlEwZ3NWMEZCVnl4RlFVRkZMRlZCUVZjN1JVRkJSU3hQUVVGUE8wVkJRMnBETEc5Q1FVRnZRaXhGUVVGRkxFbEJRVXM3UlVGQlJTeFBRVUZQTzBWQlEzQkRMSGRDUVVGM1FpeEZRVUZGTEVsQlFVczdSVUZCUlN4UFFVRlBMRVZCU0hCRE96dEJRVTFPT3p0SFFVVkhPMEZCUlVnc1NVRkJTU3hEUVVGRE8wVkJRMGdzVFVGQlRTeEZRVUZGTEVOQlFVVXNSMEZFVGpzN1FVRkpUanRuUmtGRFowWTdRVUZGYUVZN096czdPMGRCUzBjN1FVRmpTQ3hQUVVGUE8wRkJRMUFzUzBGQlN6dEJRVU5NTEU5QlFVODdRVUZEVUN4VlFVRlZPMEZCUTFZc1RVRkJUVHRCUVVOT0xFMUJRVTA3UVVGRFRpeE5RVUZOTzBGQlEwNHNUVUZCVFR0QlFVTk9MRWxCUVVrN1FVRkRTaXhKUVVGSk8wRkJRMG9zUjBGQlJ6dEJRVU5JTEU5QlFVODdRVUZEVUN4UFFVRlBMRU5CV2tNN1JVRkRUaXhQUVVGUExFVkJRVVVzUzBGQlRTeEhRVVJTT3p0QlFVbFVPenM3UjBGSFJ6dEJRVXRJTEV0QlFVczdRVUZEVEN4TlFVRk5PMEZCUTA0c1VVRkJVVHRCUVVOU0xFdEJRVXNzUTBGSVF6dEZRVU5LTEU5QlFVOHNSVUZCUlN4WlFVRmhPMFZCUVVVc1QwRkJUenRGUVVNdlFpeGpRVUZqTEVWQlFVVXNVVUZCVXp0RlFVRkZMRTlCUVU4c1JVRkdOMEk3TzBGQlMxQTdPenRIUVVkSE8wRkJSV2xDTEV0QlFVc3NRVUZCUVN4TFFVRkxMRU5CUVVFc1FVRkJRU3hSUVVGRExFRkJRVUVzUjBGQlZEdEZRVU53UWl4UFFVRlBMRVZCUVVVc1NVRkJTenRGUVVOa0xFMUJRVTBzUlVGQlJTeERRVUZGTEVkQlJsYzdPMEZCUzNaQ096czdSMEZIUnp0RFFVZElMRUZCUVVFc1RVRkJReXhCUVVGQk8wRkJRMFFzVVVGQlVTeERRVVJETzBWQlExQXNUMEZCVHl4RlFVRkZMRWxCUVVzc1IwRkVUanM3UVVGSlZqdG5Sa0ZEWjBZN1FVRkZhRVk3TzBkQlJVYzdRVUZGU0N4RFFVRkRMRU5CUVVNN1JVRkRRU3huUWtGQlowSXNSVUZCUlN4WFFVRlpMRWRCUkRkQ096dEJRVWxJT3pzN1IwRkhSenRCUVVkR0xFTkJRVU1zUVVGQlFTeFBRVUZQTzBGQlExUXNRMEZCUXl4QlFVRkJMRTFCUVUwc1EwRkVRenRGUVVOT0xFOUJRVThzUlVGQlJTeERRVUZGTEVkQlJFbzdPMEZCU1ZRN1owWkJRMmRHTzBGQlJXaEdPenRIUVVWSE8wRkJSVThzU1VGQlNTeERRVUZCTEVGQlFVRXNTMEZCUXl4QlFVRkJMRVZCUVVnN1JVRkRWaXhoUVVGaExFVkJRVVVzVlVGQlZ5eEhRVVJtT3p0QlFVbGlPenRIUVVWSE8wRkJSMGdzUTBGQlF6dEJRVU5FTEUxQlFVMHNRMEZFUXp0RlFVTk1MRmRCUVZjc1JVRkJSU3hKUVVGTExFZEJSRm83TzBGQlNWSTdPMGRCUlVjN1FVRkZTQ3hIUVVGSExFTkJRVU03UlVGRFJpeFZRVUZWTEVWQlFVVXNUVUZCVHl4SFFVUm9RanM3UVVGSlREczdPMGRCUjBjN1FVRkZTQ3hGUVVGRkxFTkJRVU03UlVGRFJDeFRRVUZUTEVWQlFVVXNSMEZCU1R0RlFVTm1MRTFCUVUwc1JVRkJSU3hSUVVGVExFZEJSbVk3TzBGQlMwbzdPMGRCUlVjN1FVRkZTQ3hKUVVGSkxFTkJRVU03UlVGRFNDeFZRVUZWTEVWQlFVVXNTVUZCU3p0RlFVTnFRaXhMUVVGTExFVkJRVVVzU1VGQlN5eEhRVVpTT3p0QlFVdE9PenRIUVVWSE8wRkJSVWdzUzBGQlN5eERRVUZETzBWQlEwb3NVMEZCVXl4RlFVRkZMRWRCUVVrc1IwRkVWanM3UVVGSlVEczdSMEZGUnp0QlFVZElMRWRCUVVjN1FVRkRTQ3hIUVVGSExFTkJSRU03UlVGRFJpeFRRVUZUTEVWQlFVVXNSMEZCU1R0RlFVTm1MRmRCUVZjc1JVRkJSU3hEUVVGRk8wVkJRMllzVVVGQlVTeEZRVUZGTEZGQlFWTTdSVUZEYmtJc1kwRkJZeXhGUVVGRkxGRkJRVk1zUjBGS2RFSTdPMEZCVDB3c1IwRkJSeXhEUVVGRE8wVkJRMFlzUjBGQlJ5eEZRVUZGTEUxQlFVOHNSMEZFVkRzN1FVRkpUQ3hIUVVGSExFTkJRVU03UlVGRFJpeE5RVUZOTEVWQlFVVXNUMEZCVVN4SFFVUmlPenRCUVVsTU8yZEdRVU5uUmp0QlFVVm9SanM3UjBGRlJ6dEJRVVZJTEVkQlFVY3NRMEZCUXp0RlFVTkdMRTFCUVUwc1JVRkJSU3hEUVVGRkxFZEJSRkE3TzBGQlNVdzdPMGRCUlVjN1FVRkZWU3hIUVVGSExFRkJRVUVzUzBGQlN5eEJRVUZCTEV0QlFVc3NSVUZCV0R0RlFVTmlMRkZCUVZFc1JVRkJSU3hOUVVGUExFZEJSRWc3TzBGQlNXaENPMmRHUVVOblJqdEJRVVZvUmpzN1IwRkZSenRCUVVWSUxFMUJRVTBzUTBGQlF6dEZRVU5NTEUxQlFVMHNSVUZCUlN4SFFVRkhMRU5CUVVNc1NVRkJTU3hIUVVSV096dEJRVWxTT3p0SFFVVkhPMEZCUlVnc1JVRkJSU3hEUVVGRE8wVkJRMFFzVlVGQlZTeEZRVUZGTEZkQlFWazdSVUZEZUVJc1RVRkJUU3hGUVVGRkxFTkJRVVVzUjBGR1VqczdRVUZMU2pzN1IwRkZSenRCUVVWSUxFZEJRVWNzUTBGQlF6dEZRVU5HTEZGQlFWRXNSVUZCUlN4SlFVRkxMRWRCUkZvN08wRkJTVXc3TzBkQlJVYzdRVUZMU0N4SlFVRkpPMEZCUTBvc1IwRkJSenRCUVVOSUxFZEJRVWM3UVVGRFNDeEpRVUZKTEVOQlNFTTdSVUZEU0N4WFFVRlhMRVZCUVVVc2IwSkJRWEZDTzBWQlEyeERMRk5CUVZNc1JVRkJSU3hIUVVGSkxFZEJSbGc3TzBGQlMwNDdaMFpCUTJkR08wRkJSV2hHT3pzN1IwRkhSenRCUVVWSU96czdPenRIUVV0SE8wRkJUVWdzVFVGQlRUdEJRVU5PTEV0QlFVczdRVUZEVEN4UlFVRlJPMEZCUTFJc1RVRkJUVHRCUVVOT0xGRkJRVkVzUTBGS1F6dEZRVU5RTEV0QlFVc3NSVUZCUlN4UFFVRlJPMFZCUVVVc1QwRkJUenRGUVVONFFpeEpRVUZKTEVWQlFVVXNUMEZCVVR0RlFVRkZMRTlCUVU4N1JVRkRka0lzVFVGQlRTeEZRVUZGTEVOQlFVVTdSVUZCUlN4UFFVRlBMRVZCU0ZnN08wRkJUVlk3TzBkQlJVYzdRVUZGU0N4TlFVRk5MRU5CUVVNN1JVRkRUQ3hSUVVGUkxFVkJRVVVzVDBGQlVTeEhRVVJhT3p0QlFVbFNPenM3T3p0SFFVdEhPMEZCUjBnc1RVRkJUVHRCUVVOT0xFMUJRVTBzUTBGRVF6dEZRVU5NTEdOQlFXTXNSVUZCUlN4SlFVRkxMRWRCUkdZN08wRkJTVkk3T3pzN096dEhRVTFITzBGQlMyZENMRTFCUVUwN1FVRkRla0lzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUVN4QlFVRkJMRWxCUVVNc1EwRkJTeXhSUVVGUkxFRkJRV0lzUjBGQlowSXNTMEZCU3l4RFFVRkJMRUZCUVVFc1NVRkJReXhEUVVGTExFOUJRVThzUVVGQldqdEJRVU5xUXl4TFFVRkxMRU5CUVVFc1FVRkJRU3hKUVVGRExFTkJRVXNzVVVGQlVTeEJRVUZpTEVWQlJtVTdSVUZEYmtJc2EwSkJRV3RDTEVWQlFVVXNUVUZCVHp0RlFVRkZMRTlCUVU4N1JVRkRjRU1zVFVGQlRTeEZRVUZGTEU5QlFWRTdSVUZCUlN4UFFVRlBMRVZCUmt3N08wRkJTM1JDT3p0SFFVVkhPMEZCUjJkQ0xFMUJRVTBzUTBGQlFTeEJRVUZCTEZGQlFVTXNRVUZCUVR0QlFVTXhRaXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZCTEVGQlFVRXNVVUZCUXl4QlFVRkJMRVZCUkZVN1JVRkRia0lzVFVGQlRTeEZRVUZGTEU5QlFWRXNSMEZFU1RzN1FVRkpkRUk3TzBkQlJVYzdRVUZIUlN4TlFVRk5MRUZCUVVFc2EwSkJRV3RDTzBGQlF6ZENMRXRCUVVzc1FVRkJRU3hyUWtGQmEwSXNRMEZFUXp0RlFVTjBRaXhOUVVGTkxFVkJRVVVzUTBGQlJUdEZRVU5XTEU5QlFVOHNSVUZCUlN4RFFVRkZMRWRCUmxrN08wRkJTM3BDT3pzN1IwRkhSenRCUVVWSUxFdEJRVXNzUTBGQlF6dEZRVU5LTEZkQlFWY3NSVUZCUlN4TlFVRlBMRWRCUkdZN08wRkJTVkE3T3pzN096dEhRVTFITzBGQlIyVXNTMEZCU3l4RFFVRkJMRUZCUVVFc1NVRkJReXhEUVVGTExGVkJRVlVzUVVGQlpqdEJRVU40UWl4TFFVRkxMRU5CUVVFc1FVRkJRU3hKUVVGRExFTkJRVXNzVDBGQlR5eEJRVUZhTEVWQlJHTTdSVUZEYkVJc1ZVRkJWU3hGUVVGRkxGVkJRVmM3UlVGQlJTeFBRVUZQTzBWQlEyaERMRTlCUVU4c1JVRkJSU3hEUVVGRk8wVkJRVVVzVDBGQlR5eEZRVVpFT3p0QlFVdHlRanM3T3p0SFFVbEhPMEZCUjJsQ0xFdEJRVXNzUTBGQlFTeEJRVUZCTEVsQlFVTXNRMEZCU3l4UlFVRlJMRUZCUVdJc1EwRkJZeXd5UWtGQk1rSTdRVUZEYmtVc1MwRkJTeXhEUVVGQkxFRkJRVUVzU1VGQlF5eERRVUZMTEZGQlFWRXNRVUZCWWl4RFFVRmpMREpDUVVFeVFpeERRVVJETzBWQlF6bERMRTFCUVUwc1JVRkJSU3hKUVVGTExFZEJSR3RET3p0QlFVbHFSRHM3TzBkQlIwYzdRVUZGWjBJc1MwRkJTeXhEUVVGQkxFRkJRVUVzU1VGQlF5eERRVUZMTEZGQlFWRXNRVUZCWWl4RlFVRktPMFZCUTI1Q0xHdENRVUZyUWl4RlFVRkZMRk5CUVZVN1JVRkJSU3hQUVVGUE8wVkJRM1pETEZWQlFWVXNSVUZCUlN4WFFVRlpPMFZCUVVVc1QwRkJUeXhGUVVaaU96dEJRVXQwUWpzN096dEhRVWxITzBGQlIybENMRXRCUVVzc1EwRkJRU3hCUVVGQkxFbEJRVU1zUTBGQlN5eFJRVUZSTEVGQlFXSXNRMEZCWXl3NFFrRkJPRUk3UVVGRGRFVXNTMEZCU3l4RFFVRkJMRUZCUVVFc1NVRkJReXhEUVVGTExGRkJRVkVzUVVGQllpeERRVUZqTERKQ1FVRXlRaXhEUVVSRE8wVkJRemxETEd0Q1FVRnJRaXhGUVVGRkxFbEJRVXNzUjBGRWMwSTdPMEZCU1dwRU96dEhRVVZITzBGQlJVZ3NVVUZCVVN4RFFVRkRPMFZCUTFBc1RVRkJUU3hGUVVGRkxHbENRVUZyUWp0RlFVTXhRaXhOUVVGTkxFVkJRVVVzUTBGQlF5eERRVUZETEVkQlFVYzdSVUZEWWl4UFFVRlBMRVZCUVVVc1RVRkJUU3hEUVVGRExFOUJRVThzUTBGQlF5eE5RVUZOTEVkQlNIUkNPenRCUVUxV096czdSMEZIUnp0QlFVVklMRTFCUVUwc1EwRkJRenRGUVVOTUxFMUJRVTBzUlVGQlJTeERRVUZGTzBWQlFVVXNUMEZCVHp0RlFVTnVRaXhQUVVGUExFVkJRVVVzUTBGQlJUdEZRVUZGTEU5QlFVOHNSVUZHWkRzN1FVRkxVanM3UjBGRlJ6dEJRVVZJTEZGQlFWRXNRMEZCUXp0RlFVTlFMRkZCUVZFc1JVRkJSU3hKUVVGTExFZEJSRkE3TzBGQlNWWTdPenRIUVVkSE8wRkJSVWdzVVVGQlVTeERRVUZETzBWQlExQXNWMEZCVnl4RlFVRkZMRWxCUVVzc1IwRkVWanM3UVVGSlZqdG5Sa0ZEWjBZN1FVRkZhRVk3TzBkQlJVYzdRVUZGU0N4TFFVRkxMRU5CUVVNN1JVRkRTaXhsUVVGbExFVkJRVVVzVVVGQlV6dEZRVU14UWl4alFVRmpMRVZCUVVVc1EwRkJSU3hIUVVaaU96dEJRVTFRTEVWQlFVVTdRVUZEUml4RlFVRkZMRU5CUkVNN1JVRkRSQ3hQUVVGUExFVkJRVVVzUTBGQlJTeEhRVVJVT3p0QmIwZHNZVVlzU1VGQlNTeERRVUZETzBWQlEwZ3NWVUZCVlN4RlFVRkZMRlZCUVZjc1IwRkVia0k3TzBGQlQwZ3NRMEZCUXp0QlFVTk9MRU5CUVVNc1FVRkJRU3hQUVVGUE8wRkJRMUlzUTBGQlF5eEJRVUZCTEZGQlFWRXNRMEZHU3p0RlFVTlNMRlZCUVZVc1JVRkJSU3hQUVVGUkxFZEJSRmc3TzBGcVIyZEZaaXd3UTBGQk1FTTdRVWQwUlRGRE96dEhRVVZITzBGQlEwZ3NTVUZCU1N4RFFVRkRPMFZCUTBnc1ZVRkJWU3hGUVVGRkxGVkJRVmNzUjBGRWJrSTdPMEZCU1U0N096czdPMGRCUzBjN1FVRkRXU3hEUVVGRExFVkJRVVVzUTBGQlF5eEJRVUZCTEZGQlFWRXNSVUZCUlN4RFFVRkRMRUZCUVVFc1QwRkJUeXhEUVVGa08wVkJRM0pDTEZWQlFWVXNSVUZCUlN4UFFVRlJMRWRCUkVVN08wRkJTWGhDT3p0SFFVVkhPMEZCUTBnc1EwRkJReXhEUVVGRE8wVkJRMEVzUzBGQlN5eEZTRU5QTEU5QlFVODdSVWRCYmtJc1pVRkJaU3hGUVVGRkxFbEJRVXNzUjBGR2NrSTdSVVJNUlN4RFFVRkRMRUZCUVVFc1RVRkJUVHRGUVVOYUxFTkJRVU1zUVVGQlFTeFBRVUZQTzBWQlExSXNRMEZCUXl4QlFVRkJMRTFCUVUwc1EwRkdTenRKUTFWU0xFdEJRVXNzUlVoUVNTeEpRVUZKTzBsSFVXSXNaVUZCWlN4RlFVRkZMRk5CUVZVc1IwUlliRUk3TzBGRFpXSXNTVUZCU1N4RFFVRkRPMFZCUTBRc1MwRkJTeXhGUVVGRkxFbEJRVXM3UlVGRFdpeFRRVUZUTEVWQlFVVXNSMEZCU1R0RlFVTm1MRmRCUVZjc1JVRkJSU3hIUVVGSkxFZEJTR1k3TzBGQlRVNHNaMEpCUVdkQ0xFTkJRVU03UlVGRFlpeFZRVUZWTEVWQlFVVXNUMEZCVVR0RlFVTndRaXhYUVVGWExFVkJRVVVzU1VGQlN5eEhRVVpLT3p0QlFVdHNRaXhYUVVGWExFTkJRVU03UlVGRFVpeFZRVUZWTEVWQlFVVXNUMEZCVVR0RlFVTndRaXhYUVVGWExFVkJRVVVzU1VGQlN5eEhRVVpVT3p0QlFVdGlMRVZCUVVVc1EwRkJRenRGUVVORExFOUJRVThzUlVGQlJTeExRVUZOTzBWQlEyWXNUVUZCVFN4RlFVRkZMRWRCUVVrN1JVRkRXaXhOUVVGTkxFVkJRVVVzUTBGQlJUdEZRVU5XTEZWQlFWVXNSVUZCUlN4alFVRmxPMFZCUXpOQ0xFMUJRVTBzUlVGQlJTeExRVUZOTzBWQlEyUXNUMEZCVHl4RlFVRkZMRU5CUVVVc1IwRk9XRHM3UVVGalNpeExRVUZMTzBGQlEwd3NUVUZCVFR0QlFVTk9MRTFCUVUwN1FVRkRUaXhIUVVGSE8wRkJRMGdzUjBGQlJ6dEJRVU5JTEV0QlFVc3NRMEZNUXp0RlFVTkdMR05CUVdNc1JVRkJSU3hOUVVGUExFZEJSSEJDT3p0QlFVbFFMRkZCUVZFc1EwRkJRenRGUVVOTUxFMUJRVTBzUlVGQlJTeERRVUZGTzBWQlExWXNUVUZCVFN4RlFVRkZMRU5CUVVVN1JVRkRWaXhQUVVGUExFVkJRVVVzUTBGQlJTeEhRVWhNT3p0QlFVMVdMRkZCUVZFc1EwRkJRenRGUVVOTUxFMUJRVTBzUlVGQlJTeFJRVUZUTEVkQlJGZzdPMEZEZGtWV0xGVkJRVlU3UlVGQlJ5eFhRVUZYTEVWQlFVVXNUVUZCVHp0RlFVRkZMRWRCUVVjc1JVRkJSU3gxUWtGQlJ6czdRVU5JTTBNN08wZEJSVWM3UVVGRFNDeEpRVUZKTEVOQlFVTTdSVUZEU0N4TFFVRkxMRVZNYTBKTkxFbEJRVWs3UlV0cVFtWXNTVUZCU1N4RlFVRkZMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVWNzUjBGQlJ5eERURXRRTEZkQlFWY3NSVUZCUlN4elFrRkJjMElzUlVGQlJTeG5Ra0ZCWjBJc1JVRkJSU3hYUVVGWExFVkJRVVVzVDBGQlR5eEZRVUZGTEZWQlFWVXNSMHRRYmtjN08wRkRRMDQ3TzBkQlJVYzdRVUZEVFN4VFFVRlRMRUZCUVVFc1QwRkJUeXhEUVVGU08wVkJRMllzUzBGQlN5eEZRVUZGTEVsQlFVczdSVUZEV2l4UFFVRlBMRVZCUVVVc1JVRkJSenRGUVVOYUxFOUJRVThzUlVGQlJTeExRVUZOTEVkQlNFTTdPMEZCVDFRc1UwRkJVeXhCUVVGQkxFOUJRVTg3UVVGRGVrSXNVMEZCVXl4QlFVRkJMRTFCUVUwc1EwRkVRenRGUVVOYUxFOUJRVThzUlVGQlJTeEhRVUZKTzBWQlEySXNUMEZCVHl4RlFVRkZMRXRCUVUwc1IwRkdSanM3UVVGTFVpeFRRVUZUTEVGQlFVRXNUVUZCVFN4RFFVRlNPMFZCUTFvc1MwRkJTeXhGUVVGRkxFbEJRVXNzUjBGRVF6czdRVUZKYWtJc1UwRkJVeXhEUVVGRE8wVkJRMDRzUzBGQlN5eEZRVUZGTEVOQlFVVXNSMEZFUmpzN1FVRkpXRHM3T3pzN1IwRkxSenRCUVVOSUxGVkJRVlVzUTBGQlF6dEZRVU5VTEZOQlFWTXNSVTVoUXl4TFFVRkxPMFZOWWxFc1QwRkJUenRGUVVNNVFpeFhRVUZYTEVWQlFVVXNTVUZCU3p0RlFVRkZMRTlCUVU4N1JVRkRNMElzV1VGQldTeEZRVUZGTEVsQlFVczdSVUZCUlN4UFFVRlBPMFZCUXpWQ0xGbEJRVmtzUlVGQlJTeEpRVUZMTzBWQlFVVXNUMEZCVHp0RlFVTTFRaXhoUVVGaExFVkJRVVVzU1VGQlN6dEZRVUZGTEU5QlFVODdSVUZETjBJc1MwRkJTeXhGUVVGRkxFbEJRVXM3UlVGQlJTeFBRVUZQTEVWQlRsZzdPMEZCVTFvN096czdSMEZKUnp0QlFVTklMRlZCUVZVc1EwRkJRenRGUVVOVUxGRkJRVkVzUlVGQlJTeE5RVUZQTzBWQlEycENMRTlCUVU4c1JVRkJSU3hEUVVGRk8wVkJRVVVzVDBGQlR6dEZRVU53UWl4WFFVRlhMRVZCUVVVc1NVRkJTenRGUVVOc1FpeFhRVUZYTEVWQlFVVXNUVUZCVHl4SFFVcFdPenRCUVU5YU96czdPMGRCU1VjN1FVRkRTQ3huUWtGQlowSXNRMEZCUXp0RlFVTm1MRTFCUVUwc1JVRkJSU3hEUVVGRk8wVkJRMVlzU1VGQlNTeEZRVUZGTEdGQlFVazdSVUZEVml4TlFVRk5MRVZCUVVVc1IwRkJTVHRGUVVOYUxFMUJRVTBzUlVGQlJTeEpRVUZMTzBWQlEySXNVVUZCVVN4RlFVRkZMRTFCUVU4N1JVRkRha0lzVDBGQlR5eEZRVUZGTEVOQlFVVTdSVUZEV0N4UlFVRlJMRVZCUVVVc1VVRkJVenRGUVVOdVFpeExRVUZMTEVWQlFVVXNSMEZCU1N4SFFWSkxPenRCUVZkc1FpeFBRVUZQTEVOQlFVTTdSVUZEU2l4UFFVRlBMRVZCUVVVc1pVRkJaMEk3UlVGRGVrSXNWVUZCVlN4RlFVRkZMRTFCUVU4c1IwRkdaRHM3UVVGTFZDeGxRVUZsTEVOQlFVTTdSVUZEV2l4TlFVRk5MRVZCUVVVc1EwRkJSVHRGUVVOV0xFbEJRVWtzUlVGQlJTeGhRVUZKTzBWQlExWXNUVUZCVFN4RlFVRkZMRWRCUVVrN1JVRkRXaXhOUVVGTkxFVkJRVVVzU1VGQlN6dEZRVU5pTEZGQlFWRXNSVUZCUlN4TlFVRlBPMFZCUTJwQ0xFOUJRVThzUlVGQlJTeERRVUZGTzBWQlExZ3NVVUZCVVN4RlFVRkZMRkZCUVZNN1JVRkRia0lzUzBGQlN5eEZRVUZGTEVkQlFVa3NSMEZTUlRzN1FVRlpVU3hsUVVGbExFRkJRVUVzVlVGQlZTeEJRVUZCTEU5QlFVODdRVUZEZWtRc1pVRkJaU3hCUVVGQkxGVkJRVlVzUVVGQlFTeE5RVUZOTEVOQlJFTTdSVUZETlVJc1NVRkJTU3hGUVVGRkxFbEJRVXM3UlVGRFdDeE5RVUZOTEVWQlFVVXNTVUZCU3p0RlFVTmlMRTFCUVUwc1JVRkJSU3hEUVVGRk8wVkJRMVlzVVVGQlVTeEZRVUZGTEU5QlFWRTdSVUZEYkVJc1VVRkJVU3hGUVVGRkxFMUJRVTg3UlVGRGFrSXNTMEZCU3l4RlFVRkZMRWxCUVVzc1IwRk9hVUk3TzBGQlUycERMRlZCUVZVc1EwRkJRenRGUVVOUUxGVkJRVlVzUlVGQlJTeE5RVUZQTEVkQlJGZzdPMEZEYUVkYUxFMUJRVTBzUTBGQlRpeExRVUZMTzBWQlIwRXNRMEZCUXp0RlFVTk9MRU5CUVVNc1FVRkJRU3hQUVVGUE8wVkJRMUlzUTBGQlF5eEJRVUZCTEUxQlFVMHNRMEZHU3p0SlFVTktMRlZCUVZVc1JVRkJSU3h6UWtGQmRVSTdTVUZEYmtNc1MwRkJTeXhGUVVGRkxHVkJRV2RDTzBsQlEzWkNMRlZCUVZVc1JVRkJSU3hsUVVGblFqdEpRVU0xUWl4WFFVRlhMRVZCUVVVc1pVRkJaMElzUjBGS2VFSTdSVUZSVWl4RFFVRkRPMFZCUTA0c1EwRkJReXhCUVVGQkxGRkJRVkVzUTBGRVN6dEpRVU5PTEdWQlFXVXNSVUZCUlN4VFFVRlZMRWRCUkhCQ08wVkJTVW9zUTBGQlF5eERRVUZCTEVGQlFVRXNTVUZCUXl4QlFVRkJMRU5CUVVzc1RVRkJUU3hEUVVGT08wbEJRMVlzVDBGQlR5eEZRVUZGTEVsQlFVa3NRMEZCUXl4VlFVRkpMRU5CUVU4c1IwRkJSeXhIUVVScVFqdEZRVWxLTEVsQlFVa3NRMEZCUVN4QlFVRkJMRXRCUVVNc1FVRkJRU3hEUVVGTkxFMUJRVTBzUTBGQlZqdEpRVU5rTEU5QlFVOHNSVUZCUlN4SlFVRkpMRU5CUVVNc1YwRkJTU3hEUVVGUkxFZEJRVWNzUjBGRVpEdEZRVXRITEVOQlFVTXNRMEZCUVN4QlFVRkJMRWxCUVVNc1JVRkJUU3hIUVVGSExFRkJRVlFzUTBGQlZTeE5RVUZOTzBWQlF6VkRMRU5CUVVNc1EwRkJRU3hCUVVGQkxFbEJRVU1zUlVGQlRTeGhRVUZoTEVGQlFXNUNMRU5CUVc5Q0xFMUJRVTBzUTBGRVN6dEpRVU42UWl4UFFVRlBMRVZCUVVVc1JVRkJSeXhIUVVSak8wVkJTemxDTEVkQlFVYzdSVUZEVUN4VlFVRlZMRU5CUkVzN1NVRkRVQ3hOUVVGTkxFVkJRVVVzWTBGQlpUdEpRVU4yUWl4cFFrRkJhVUlzUlVGQlJTeExRVUZOTEVkQlJtcENPMFZCUzFvc1MwRkJTeXhEUVVGRE8wbEJRMFlzVDBGQlR5eEZRVUZGTEd0Q1FVRnRRaXhIUVVSNlFqdEZRVXRRTEVWQlFVVTdSVUZEVGl4SFFVRkhMRU5CUkVzN1NVRkRRU3hwUWtGQmFVSXNSVUZCUlN4TFFVRk5MRWRCUkhoQ08wVkJTVXdzUjBGQlJ5eERRVUZETzBsQlEwRXNVMEZCVXl4RlFVRkZMR1ZCUVdkQ0xFZEJSREZDTzBWQlRVd3NRMEZCUXp0RlFVTk1MRVZCUVVVN1JVRkRSaXhGUVVGRkxFTkJSa3M3U1VGRFF5eFBRVUZQTEVWQlFVVXNRMEZCUlR0SlFVTllMRTFCUVUwc1JVRkJSU3hEUVVGRkxFZEJSbFk3UlVGTlNpeEZRVUZGTzBWQlEwNHNSVUZCUlN4RFFVUkxPMGxCUTBNc1owSkJRV2RDTEVWQlFVVXNTMEZCVFN4SFFVUjRRanM3UVVOdVJGSXNhVUpCUVdsQ0xFTkJRMnBDTzBVeVJqSkNSU3hUUVVGVExFVnVSMlZETEV0QlFVczdSVzFIWkdZc1RVRkJUU3hCUVVGQkxFTkJRVU1zUVVGRFRDeEpRVUZKTEVWQlFVVXNTVUZCU3p0RlFVUmlMRTFCUVUwc1FVRkJRU3hEUVVGRExFRkJSVXdzUzBGQlN5eEZRVUZGTEVsQlFVc3NSek5HT1VKbU8wVjNSV05GTEdsQ1FVRnBRaXhCUVVGQkxFOUJRVThzUTBGQmFFSTdTVUZEVUN4TFFVRkxMRVZCUVVVc1NVRkJTenRKUVVOYUxFOUJRVThzUlVGQlJTeEZRVUZITzBsQlExb3NUMEZCVHl4RlFVRkZMRXRCUVUwc1IwRklVRHM3UVhoRlZsb3NaVUZCWlN4RFFVTm1PMFZCUTBNc1owSkJRV2RDTEVWQlFVVXNUMEZCVVR0RlFVRkZMRXRCUVVzc1JVRkJSU3hKUVVGTE8wVkJRVVVzVFVGQlRTeEZRVUZGTEVsQlFVczdSVUZEZGtRc05rTkJRVFpETzBWQlF6ZERMRmRCUVZjc1JVRkJSU3hOUVVGUE8wVkJRM0JDTEU5QlFVOHNSVUZCUlN4SFFVRkpPMFUwUm5GRVZpeExRVUZMTEVWQlFVRXNTVUZCUXp0RlFVZEtMRTlCUVU4c1JVRkJSU3hMUVVGTk8wVkJaV1lzV1VGQmIwSXNSVXAwUldoQ0xGRkJRVlU3UlVsMVJXUXNTMEZCU3l4RlNqVkZSQ3hUUVVGVkxFZDRSa0Z1UWp0RlFVdEJMR1ZCUVdVc1EwRkJReXhIUVVGSExFTkJRV1k3U1VGRFNDeE5RVUZOTEVWQlFVVXNRMEZCUlR0SlFVTldMRTlCUVU4c1JVRkJSU3hEUVVGRkxFZEJSbEE3UlVGSlRDeGxRVUZsTEVOQlFVTXNSVUZCUlN4RFFVRm1PMGxCUTBZc1UwRkJVeXhGUVVGRkxFMUJRVTg3U1VGRGJFSXNUMEZCVHl4RlFVRkZMRU5CUVVVN1NVRkRXQ3hOUVVGTkxFVkJRVVVzUTBGQlF5eERRVUZETEVkQlFVY3NSMEZJVmp0RlFVdEtMR1ZCUVdVc1EwRkJReXhEUVVGRExFTkJRV1k3U1VGRFJDeFBRVUZQTEVWQlFVVXNRMEZCUlR0SlFVTllMRTFCUVUwc1JVRkJSU3hEUVVGRExFTkJRVU1zUjBGQlJ5eEhRVVpZTzBVMFJtZEZSeXhsUVVGbExFRkJRVUVzVjBGQlZ5eERRVUZrTzBsQlExZ3NXVUZCYjBJc1JVRkJSU3hEUVVGRkxFZEJSRm83TzBFMVJqRkVjRUlzWTBGQll5eERRVU5rTzBWQlEwTXNWVUZCVlN4RlFVRkZMRzlDUVVGSE8wVkJRMllzVFVGQlRTeEZRVUZGTEV0QlFVMHNSMEZHWkRzN1FVTXpRa2tzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCU2p0RlFVTllMRlZCUVZVc1JVRkJSU3h2UkVGQlpUdEZRVUYxUXl4VFFVRlRPMFZCUXpORkxFdEJRVXNzUlVGQlJTeExRVUZOTzBWQlEySXNUMEZCVHl4RlFVRkZMRTFCUVU4N1JVRkRhRUlzVlVGQlZTeEZRVUZGTEUxQlFVOHNSMEZLVURzN1FVTktZaXhqUVVGakxFTkJRVU03UlhsR1owTmlMRk5CUVZNc1JXNUhaVU1zUzBGQlN6dEZiVWRrWml4TlFVRk5MRUZCUVVFc1EwRkJReXhCUVVOTUxFbEJRVWtzUlVGQlJTeEpRVUZMTzBWQlJHSXNUVUZCVFN4QlFVRkJMRU5CUVVNc1FVRkZUQ3hMUVVGTExFVkJRVVVzU1VGQlN5eEhla1p1UTBFN1JYTkZiVUppTEdOQlFXTXNRVUZCUVN4UFFVRlBMRU5CUVdJN1NVRkRVQ3hMUVVGTExFVkJRVVVzU1VGQlN6dEpRVU5hTEU5QlFVOHNSVUZCUlN4RlFVRkhPMGxCUTFvc1QwRkJUeXhGUVVGRkxFdEJRVTBzUjBGSVVEczdRWFJGWmt3c1RVRkJUU3hEUVVGRExFZEJRVWNzUTBGQlRqdEZRVU5XTEZWQlFWVXNSVUZCUlN4dlJFRkJaVHRGUVVGelF5eFRRVUZUTzBWQlF6RkZMRXRCUVVzc1JVRkJSU3hKUVVGTE8wVkJRMW9zVDBGQlR5eEZRVUZGTEZsQlFXRXNSMEZJV0R0RlFVbFlMRTFCUVUwc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF5eERRVUZXTzBsQlEwUXNUMEZCVHl4RlFVRkRMRXRCUVUwN1NVRkRaQ3hMUVVGTExFVkJRVU1zUzBGQlRUdEpRVU5hTEZkQlFWY3NSVUZCUXl4SlFVRkxMRWRCU0dZN1NVRkpSQ3hOUVVGTkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNRVUZCUVN4TlFVRk5MRU5CUVZnN1RVRkRVQ3hsUVVGbExFVkJRVVVzVTBGQlZTeEhRVVJ1UWp0SlFVZERMRTFCUVUwc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF5eEJRVUZCTEUxQlFVMHNSVUZCUlN4TlFVRk5MRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU1zUVVGQlFTeFJRVUZSTEVOQlFTOUNPMDFCUTJ4Q0xFdEJRVXNzUlVGQlF5eExRVUZOTEVkQlJFODdSVUZKY2tJc1RVRkJUU3hEUVVGRExFZEJRVWNzUTBGQlF5eEZRVUZGTEVOQlFWWTdTVUZEUml4bFFVRmxMRVZCUVVVc1NVRkJTenRKUVVOMFFpeFBRVUZQTEVWQlFVVXNXVUZCWVR0SlFVTjBRaXhOUVVGTkxFVkJRVVVzUTBGQlJUdEpRVU5XTEU5QlFVOHNSVUZCUlN4RFFVRkZMRWRCU2xJN1JVRk5TaXhOUVVGTkxFTkJRVU1zUjBGQlJ5eERRVUZETEVWQlFVVXNRMEZCVmp0SlFVTkdMRXRCUVVzc1JVRkJSU3hKUVVGTE8wbEJRMW9zVDBGQlR5eEZRVUZGTEV0QlFVc3NRMEZCUXl4TFFVRkxPMGxCUTNCQ0xFdEJRVXNzUlVGQlJTeExRVUZOTzBsQlEySXNWMEZCVnl4RlFVRkZMR2xDUVVGclFqdEpRVU12UWl4WlFVRlpMRVZCUVVVc2FVSkJRV3RDTzBsQlEyaERMRmRCUVZjc1JVRkJSU3hMUVVGTk8wbEJRMjVDTEZkQlFWY3NSVUZCUlN4SlFVRkxPMGxCUTJ4Q0xGTkJRVk1zUlVGQlJTeExRVUZOTEVkQlVtUTdTVUZUUml4TlFVRk5MRU5CUVVNc1IwRkJSeXhEUVVGRExFVkJRVVVzUVVGQlFTeFpRVUZaTEVOQlFWbzdUVUZEWWl4WFFVRlhMRVZCUVVVc1NVRkJTeXhIUVVSS08wbEJSMlFzVFVGQlRTeERRVUZETEVkQlFVY3NRMEZCUXl4RlFVRkZMRUZCUVVFc1YwRkJWeXhEUVVGYU8wMUJRMW9zV1VGQldTeEZRVUZGTEVsQlFVc3NSMEZFVGpzN1FVRk5WQ3hOUVVGTkxFTkJRVU1zUjBGQlJ5eERRVUZPTzBWQlExWXNUMEZCVHl4RlFVRkZMRmxCUVdFc1IwRkVXRHRGUVVWWUxFMUJRVTBzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRldPMGxCUTBRc1MwRkJTeXhGUVVGRExFdEJRVTBzUjBGRVZqdEpRVVZFTEUxQlFVMHNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhCUVVGQkxFMUJRVTBzUTBGQldEdE5RVU5RTEdWQlFXVXNSVUZCUlN4VFFVRlZMRWRCUkc1Q08wbEJSME1zVFVGQlRTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRUZCUVVFc1RVRkJUU3hGUVVGRkxFMUJRVTBzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4QlFVRkJMRkZCUVZFc1EwRkJMMEk3VFVGRGJFSXNTMEZCU3l4RlFVRkRMRXRCUVUwc1IwRkVUenRGUVVseVFpeE5RVUZOTEVOQlFVTXNSMEZCUnl4RFFVRkRMRVZCUVVVc1EwRkJWanRKUVVOR0xHVkJRV1VzUlVGQlJTeEpRVUZMTzBsQlEzUkNMRTFCUVUwc1JVRkJSU3hEUVVGRk8wbEJRMVlzVDBGQlR5eEZRVUZGTEVOQlFVVXNSMEZJVWp0RlFVdEtMRTFCUVUwc1EwRkJReXhIUVVGSExFTkJRVU1zUlVGQlJTeERRVUZXTzBsQlEwWXNTMEZCU3l4RlFVRkZMRWxCUVVzN1NVRkRXaXhQUVVGUExFVkJRVVVzUzBGQlN5eERRVUZETEV0QlFVczdTVUZEY0VJc1MwRkJTeXhGUVVGRkxFdEJRVTA3U1VGRFlpeFhRVUZYTEVWQlFVVXNTMEZCVFN4SFFVcG9RanM3UVVNelJFd3NTVUZCU1N4RFFVRkRPMFZCUTBvc1MwRkJTeXhGUVVGRkxFbEJRVXNzUjBGRVVEczdRVUZIYlVJc1QwRkJUeXhEUVVGRExFdEJRVXNzUTBGQlFTeEJRVUZCTEVsQlFVTXNRMEZCU3l4TlFVRk5MRUZCUVZnc1JVRkJXanRGUVVNeFFpeGhRVUZoTEVWQlFVVXNTMEZCU3l4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUzBGQlN6dEZRVU01UWl4TlFVRk5MRVZCUVVVc1EwRkJSVHRGUVVOV0xFMUJRVTBzUlVGQlJTeERRVUZGTzBWQlExWXNaVUZCWlN4RlFVRkZMRXRCUVVzc1EwRkJSU3hKUVVGSExFTkJRVVVzU1VGQlJ5eERRVUZETEVkQlFVY3NRMEZCUXl4SFFVRkhMRU5CUVVNc1NVRkJTVHRGUVVNM1F5eHJRa0ZCYTBJc1JVRkJSU3hMUVVGTExFTkJRVVVzU1VGQlJ5eERRVUZGTEVsQlFVY3NRMEZCUXl4SFFVRkhMRU5CUVVNc1IwRkJSeXhEUVVGRExFbEJRVWs3UlVGRGFFUXNWVUZCVlN4RlFVRkZMRXRCUVVzc1EwRkJReXhMUVVGTExFTkJRVU1zUzBGQlN5eERRVUZETEUxQlFVMHNRMEZCUXl4SFFVRkhMRU5CUVVNc1NVRkJTVHRGUVVNM1F5eExRVUZMTEVWQlFVVXNTVUZCU3p0RlFVTmFMRTlCUVU4c1JVRkJSU3hKUVVGTExFZEJVbUU3TzBGQlZVUXNUMEZCVHl4RFFVRkRMRXRCUVVzc1EwRkJRU3hCUVVGQkxFbEJRVU1zUTBGQlN5eFJRVUZSTEVGQlFXSXNSVUZCV2p0RlFVTTFRaXhoUVVGaExFVkJRVVVzUTBGQlF5eERRVUZETEV0QlFVc3NRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJRenRGUVVNNVFpeG5Ra0ZCWjBJc1JVRkJSU3hQUVVGUk8wVkJRekZDTEV0QlFVc3NSVUZCUlN4TFFVRk5PMFZCUTJJc1RVRkJUU3hGUVVGRkxFTkJRVVU3UlVGRFZpeExRVUZMTEVWQlFVVXNTVUZCU3p0RlFVTmFMRTlCUVU4c1JVRkJSU3hKUVVGTExFZEJUbVU3TzBGRFlucENMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVW83UlhkR2JVVlFMRXRCUVVzc1JVRkJRU3hKUVVGRE8wVkJSMG9zVDBGQlR5eEZRVUZGTEV0QlFVMDdSVUZsWml4WlFVRnZRaXhGU25SRmFFSXNVVUZCVlR0RlNYVkZaQ3hMUVVGTExFVktOVVZFTEZOQlFWVTdSVTF0UTJ4Q0xGZEJRVFpDTEVWQlFVVXNUMEZCVlN4SE1VWTNReTlDTzBWM1JuZEdUQ3hKUVVGSkxFTkJRVU1zUzBGQlN5eEJRVUZCTEZkQlFWY3NRMEZCVkR0SlFVTllMRmxCUVc5Q0xFVkJRVVVzUTBGQlJTeEhRVVJhT3p0QmRrWjRSbkJDTEZWQlFWVTdRVUZEVkN3NFFrRkJPRUk3UVVGREwwSXNTMEZCU3p0QlFVVk1MRWxCUVVrc1EwRkJRenRGUVVOS0xHZENRVUZuUWl4RlluTkZSU3hMUVVGTE8wVmhja1YyUWl4VlFVRlZMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eEpRVUZKTEVOQlFVTXNjVUpCUVVrc1IwRkdjRUk3TzBGQlMwUXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJTanRGYzBaMVFsSXNVMEZCVXl4RmJrZGxReXhMUVVGTE8wVnRSMlJtTEUxQlFVMHNRVUZCUVN4RFFVRkRMRUZCUTB3c1NVRkJTU3hGUVVGRkxFbEJRVXM3UlVGRVlpeE5RVUZOTEVGQlFVRXNRMEZCUXl4QlFVVk1MRXRCUVVzc1JVRkJSU3hKUVVGTE8wVjBSbmhDWml4VlFVRlZMRVZCUVVVc1IwRkJTU3hIUVVaT08wVnRSVlZTTEVsQlFVa3NRMEZCUXl4SlFVRkpMRUZCUVVFc1QwRkJUeXhEUVVGU08wbEJRMUFzUzBGQlN5eEZRVUZGTEVsQlFVczdTVUZEV2l4UFFVRlBMRVZCUVVVc1JVRkJSenRKUVVOYUxFOUJRVThzUlVGQlJTeExRVUZOTEVkQlNGQTdPMEZ1UlVwWUxFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVbzdSWFZHYjBSRUxFdEJRVXNzUlVGQlFTeEpRVUZETzBWQlIwb3NUMEZCVHl4RlFVRkZMRXRCUVUwN1JVRmxaaXhaUVVGdlFpeEZTblJGYUVJc1VVRkJWVHRGU1hWRlpDeExRVUZMTEVWS05VVkVMRk5CUVZVc1IyNUdTMlE3UlhWR2VVVkRMRWxCUVVrc1EwRkJReXhIUVVGSExFRkJRVUVzVjBGQlZ5eERRVUZRTzBsQlExZ3NXVUZCYjBJc1JVRkJSU3hEUVVGRkxFZEJSRm83TzBGMlJuQkZjRUlzUzBGQlN5eERRVUZETzBWMVJpdERSaXhMUVVGTExFVkJRVUVzU1VGQlF6dEZRVWRLTEU5QlFVOHNSVUZCUlN4TFFVRk5PMFZCWldZc1dVRkJiMElzUlVwMFJXaENMRkZCUVZVN1JVbDFSV1FzUzBGQlN5eEZTalZGUkN4SlFVRlZMRWR1UmxWaU8wVjFSbTlGUVN4TFFVRkxMRUZCUVVFc1YwRkJWeXhEUVVGS08wbEJRMWdzV1VGQmIwSXNSVUZCUlN4RFFVRkZMRWRCUkZvN1JYWkdiRVZ1UWl4TFFVRkxMRU5CUVVNc1JVRkJSU3hEUVVGTU8wbEJRMFlzVlVGQlZTeEZRVUZGTEVsQlFVczdTVUZEYWtJc1QwRkJUeXhGUVVGRkxFTkJRVVVzUjBGR1VqdEZRVWxLTEV0QlFVc3NRMEZCUXl4RlFVRkZMRU5CUVV3N1NYVkdlVU5CTEV0QlFVc3NSVUZCUVN4SlFVRkRPMGxCUjBvc1QwRkJUeXhGUVVGRkxFdEJRVTA3U1VGbFppeFpRVUZ2UWl4RlNuUkZhRUlzVVVGQlZUdEpTWFZGWkN4TFFVRkxMRVZLTlVWRUxGTkJRVlU3U1c1R2EwSnNRaXhWUVVGVkxFVkJRVVVzU1VGQlN5eEhRVVprTzBsMVJqaEVSU3hMUVVGTExFTkJRVU1zUlVGQlJTeEJRVUZCTEZkQlFWY3NRMEZCVUR0TlFVTllMRmxCUVc5Q0xFVkJRVVVzUTBGQlJTeEhRVVJhTzBWMlJqRkVTaXhMUVVGTExFTkJRVU1zUlVGQlJTeEJRVUZCTEZkQlFWY3NRVUZCV0N4RlFVRlhMRVZCUVdwQ08wbEJRMmhDTEZsQlFWa3NSVUZCUlN4RFFVRkZMRWRCUkVNN1JVRkhiRUlzUzBGQlN5eERRVUZETEU5QlFVOHNRMEZCVER0SlFVTlFMRkZCUVZFc1JVRkJSU3hSUVVGVE8wbEJRMjVDTEZWQlFWVXNSVUZCUlN4TFFVRk5PMGxCUTJ4Q0xGRkJRVkVzUlVGQlJTeE5RVUZQTzBsQlEycENMR0ZCUVdFc1JVRkJSU3hSUVVGVExFZEJTbWhDTzBsQlRWSXNTMEZCU3l4RFFVRkRMRTlCUVU4c1EwRkJReXhIUVVGSExFTkJRV0k3VFVGRFNDeExRVUZMTEVWQlFVVXNTVUZCU3l4SFFVUlNPMFZCU1U0c1MwRkJTeXhEUVVGRExFMUJRVTBzUTBGQlREdEpRVU5PTEUxQlFVMHNSVUZCUlN4TFFVRk5MRWRCUkZBN1JVRkhSQ3hMUVVGTExFTkJRVU1zVDBGQlR5eEJRVUZCTEUxQlFVMHNRMEZCV2p0SlFVTmlMRTlCUVU4c1JVRkJSU3hGUVVGSE8wbEJRMW9zVFVGQlRTeEZRVUZETEV0QlFVMDdTVUZEWWl4TFFVRkxMRVZCUVVNc1NVRkJTenRKUVVOWUxGRkJRVkVzUlVGQlJTeFJRVUZUTzBsQlEyNUNMRWxCUVVrc1JVRkJSU3hEUVVGRk8wbEJRMUlzVFVGQlRTeEZRVUZGTEVOQlFVVTdTVUZEVml4VlFVRlZMRVZCUVVVc2RVTkJRV1VzUjBGUVlqdEZRVk5tTEV0QlFVc3NRMEZCUXl4RFFVRkRMRU5CUVV3N1NVRkRSQ3hMUVVGTExFVkJRVVVzUzBGQlRTeEhRVVJZT3p0QlFVdEtMRXRCUVVzc1EwRkJRenRGZFVaUFJpeExRVUZMTEVWQlFVRXNTVUZCUXp0RlFVZEtMRTlCUVU4c1JVRkJSU3hMUVVGTk8wVkJaV1lzV1VGQmIwSXNSVXAwUldoQ0xGRkJRVlU3UlVsMVJXUXNTMEZCU3l4RlNqVkZSQ3hKUVVGVkxFZHVSbXRFWWp0RmRVWTBRa0VzUzBGQlN5eEJRVUZCTEZkQlFWY3NRMEZCU2p0SlFVTllMRmxCUVc5Q0xFVkJRVVVzUTBGQlJTeEhRVVJhTzBWMlJqRkNia0lzUzBGQlN5eERRVUZETEVWQlFVVXNRMEZCVER0SlFVTkdMRlZCUVZVc1JVRkJSU3hKUVVGTE8wbEJRMnBDTEU5QlFVOHNSVUZCUlN4RFFVRkZMRWRCUmxJN1JVRkpTaXhMUVVGTExFTkJRVU1zUlVGQlJTeERRVUZNTzBsMVJrTkJMRXRCUVVzc1JVRkJRU3hKUVVGRE8wbEJSMG9zVDBGQlR5eEZRVUZGTEV0QlFVMDdTVUZsWml4WlFVRnZRaXhGU25SRmFFSXNVVUZCVlR0SlNYVkZaQ3hMUVVGTExFVktOVVZFTEZOQlFWVTdTVzVHTUVSc1FpeFZRVUZWTEVWQlFVVXNTVUZCU3l4SFFVWmtPMGwxUm5OQ1JTeExRVUZMTEVOQlFVTXNSVUZCUlN4QlFVRkJMRmRCUVZjc1EwRkJVRHROUVVOWUxGbEJRVzlDTEVWQlFVVXNRMEZCUlN4SFFVUmFPMFYyUm14Q1NpeExRVUZMTEVOQlFVTXNSVUZCUlN4QlFVRkJMRmRCUVZjc1FVRkJXQ3hGUVVGWExFVkJRV3BDTzBsQlEyaENMRmxCUVZrc1JVRkJSU3hEUVVGRkxFZEJSRU03UlVGSGJFSXNTMEZCU3l4RFFVRkRMRTlCUVU4c1EwRkJURHRKUVVOUUxGRkJRVkVzUlVGQlJTeFJRVUZUTzBsQlEyNUNMRlZCUVZVc1JVRkJSU3hMUVVGTk8wbEJRMnhDTEZGQlFWRXNSVUZCUlN4TlFVRlBPMGxCUTJwQ0xHRkJRV0VzUlVGQlJTeFJRVUZUTEVkQlNtaENPMGxCVFZJc1MwRkJTeXhEUVVGRExFOUJRVThzUTBGQlF5eEhRVUZITEVOQlFXSTdUVUZEU0N4TFFVRkxMRVZCUVVVc1NVRkJTeXhIUVVSU08wVkJTVTRzUzBGQlN5eERRVUZETEUxQlFVMHNRMEZCVER0SlFVTk9MRTFCUVUwc1JVRkJSU3hMUVVGTkxFZEJSRkE3UlVGSFJDeExRVUZMTEVOQlFVTXNUMEZCVHl4QlFVRkJMRTFCUVUwc1EwRkJXanRKUVVOaUxFOUJRVThzUlVGQlJTeEZRVUZITzBsQlExb3NUVUZCVFN4RlFVRkRMRXRCUVUwN1NVRkRZaXhMUVVGTExFVkJRVU1zU1VGQlN6dEpRVU5ZTEZGQlFWRXNSVUZCUlN4UlFVRlRPMGxCUTI1Q0xFbEJRVWtzUlVGQlJTeERRVUZGTzBsQlExSXNUVUZCVFN4RlFVRkZMRU5CUVVVN1NVRkRWaXhWUVVGVkxFVkJRVVVzZFVOQlFXVXNSMEZRWWp0RlFWTm1MRXRCUVVzc1EwRkJReXhEUVVGRExFTkJRVXc3U1VGRFJDeExRVUZMTEVWQlFVVXNTMEZCVFN4SFFVUllPenRCUlM5R1NpeGxRVUZsTEVOQlFVTTdSVUZEV2l4TlFVRk5MRVZCUVVVc1QwRkJVVHRGUVVOb1FpeFZRVUZWTEVWQlFVVXNTVUZCU3p0RlFVTnFRaXhMUVVGTExFVkJRVVVzU1VGQlN6dEZRVU5hTEU5QlFVOHNSVUZCUlN4UFFVRlJMRWRCU2tvN08wRkRTMlFzUlVGQlJTeEhRVUZITEVWQlFVVXNRMEZCU2p0RlFVTktMR2RDUVVGblFpeEZRVUZGTEUxQlFVODdSWE5EYVVONlFpeG5Ra0ZCWjBJc1JWaHlRa1VzSzBOQlFVTTdSVmR6UW01Q0xHZENRVUZuUWl4RlluWkRVaXgxUTBGQlR6dEZla0pQWml4TFFVRkxMRVZCUVVVc1NVRkJTenRGUVVOYUxGZEJRVmNzUld0RlUwY3NaVUZCWlN4RlFVRkZMRkZCUVZFc1JVRkJSU3hUUVVGVExFVkJRVVVzVDBGQlR5eEZRVUZGTEZWQlFWVTdSV3hGVW5aRkxGRkJRVkVzUlVGQlJTeFJRVUZUTzBWMVJYbENZaXhyUWtGQmIwSXNSWFpGZUVKTUxFZEJRVWNzUTBGQlF5eEpRVUZKTzBWMVJUUkNka0lzWlVGQmFVSXNSWFpGTlVKR0xFZEJRVWNzUTBGQlF5eEpRVUZKTzBWMVJYZERka0lzVlVGQldTeEZka1Y0UTBjc1IwRkJSeXhEUVVGRExFbEJRVWtzUjBGT2VFSTdSVUZSU2l4RlFVRkZMRWRCUVVjc1JVRkJSU3hCUVVGQkxFOUJRVThzUTBGQlRqdEpRVU5TTEU5QlFVOHNSVUZCUlN4SFFVRkpPMGxCUTJJc1RVRkJUU3hGUVVGRkxFbEJRVXM3U1hORmVVSmtMRkZCUVZFc1JYUkZlRUpaTEZGQlFWRTdTWE5GTkVKNFFpeEhRVUZWTEVWMFJUVkNaMElzU1VGQlNUdEpjMFUwUWpsQ0xFdEJRVlVzUlhSRk5VSnpRaXhMUVVGSk8wbHpSVFJDY0VNc1RVRkJWU3hGZEVVMVFqSkNMRU5CUVVNN1NYTkZORUowUXl4SlFVRlZMRVYwUlRWQ05rSXNRMEZCUXp0SmRVVnRRblJETEdsQ1FVRnZRaXhGZGtWc1Frd3NZVUZCVFN4RFFVRlJMR3RDUVVGSk8wbDFSWE5DYWtNc1kwRkJhVUlzUlhaRmRFSkdMR0ZCUVUwc1EwRkJVU3hyUWtGQlNUdEpkVVV3UW1wRExHRkJRV2RDTEVWMlJURkNSQ3hoUVVGTkxFTkJRVkVzYTBKQlFVazdTWFZGT0VKcVF5eFpRVUZsTEVWMlJUbENRU3hoUVVGTkxFTkJRVkVzYTBKQlFVazdTWFZGYTBOcVF5eFRRVUZaTEVWMlJXeERSeXhoUVVGTkxFTkJRVkVzYTBKQlFVazdTVUZEZEVNc1MwRkJTeXhGUVVGRkxFbEJRVXNzUjBGTVNEczdRVUZWV2l4UFFVRlBMRU5CUVVNN1JYVkZXVUVzYVVKQlFXOUNMRVYyUlZoTUxFOUJRVTg3UlhWRlpYUkNMR05CUVdsQ0xFVjJSV1pHTEU5QlFVODdSWFZGTWtKMFFpeFRRVUZaTEVWMlJUTkNSeXhQUVVGUE8wVjFSVmQwUWl4dFFrRkJiMElzUlhaRldFd3NUMEZCVHp0RmRVVmxkRUlzWjBKQlFXbENMRVYyUldaR0xFOUJRVTg3UlhWRmJVSjBRaXhsUVVGblFpeEZka1Z1UWtRc1QwRkJUenRGZFVWMVFuUkNMR05CUVdVc1JYWkZka0pCTEU5QlFVODdSWFZGTWtKMFFpeFhRVUZaTEVWMlJUTkNSeXhQUVVGUE8wVXlRelpPTlVJc1kwRkJZeXhGTTBNM1RrOHNUMEZCVHp0Rk1rTTJRekZDTEU5QlFVOHNSVUZCUlN4WFFVRlpPMFZCUTNKQ0xFOUJRVThzUlVGQlJTeFJRVUZUTzBWQlEyeENMRTlCUVU4c1JVRkJSU3hIUVVGSk8wVkJSMklzVDBGQlR5eEZRVUZGTEZsQlFXRTdSVUZEZEVJc1QwRkJUeXhGUVVGRkxGTkJRVlU3UlVGRGJrSXNUMEZCVHl4RlFVRkZMRmRCUVZrN1JVRkRja0lzVDBGQlR5eEZRVUZGTEVsQlFVczdSVFJDTVVOV0xHdENRVUZ2UWl4Rk5VSnZSbGdzVlVGQlZUdEZORUpvUm01Q0xHVkJRV2xDTEVVMVFtZEdVaXhWUVVGVk8wVTBRbkJGYmtJc1ZVRkJXU3hGTlVKdlJVZ3NWVUZCVlR0Rk5FSndSbTVDTEhGQ1FVRnZRaXhGTlVKcFJtUXNUVUZCVFR0Rk5FSTNSVm9zYTBKQlFXbENMRVUxUWpaRldDeE5RVUZOTzBVMFFtcEZXaXhoUVVGWkxFVTFRbWxGVGl4TlFVRk5PMFUwUW1wR1dpeHpRa0ZCYjBJc1JYWkZWRVlzUjBGQlJ6dEZkVVZoY2tJc2JVSkJRV2xDTEVWMlJXSkRMRWRCUVVjN1JYVkZlVUp5UWl4alFVRlpMRVYyUlhwQ1RTeEhRVUZITzBVeVEyZElNMElzYTBKQlFXdENMRVV6UTJoSVRTeEhRVUZITzBWMVJWTnlRaXhuUWtGQmIwSXNSVFZDTWt0YUxFdEJRVXM3UlRSQ2RrdGlMR0ZCUVdsQ0xFVTFRblZMVkN4TFFVRkxPMFUwUWpOS1lpeFJRVUZaTEVVMVFqSktTaXhMUVVGTE8wVTBRak5MWWl4MVFrRkJiMElzUlhaRlVrUXNWVUZCVlR0RmRVVlpOMElzYjBKQlFXbENMRVYyUlZwRkxGVkJRVlU3UlhWRlowSTNRaXh0UWtGQlowSXNSWFpGYUVKSExGVkJRVlU3UlhWRmIwSTNRaXhyUWtGQlpTeEZka1Z3UWtrc1ZVRkJWVHRGZFVWM1FqZENMR1ZCUVZrc1JYWkZlRUpQTEZWQlFWVTdSVEpEYlUxdVF5eGhRVUZoTEVWQmFFSkRMRXRCUVVzc1J6TkRka3hhT3p0QlFVOURMRTlCUVU4c1IwRkJSeXhOUVVGTkxFTkJRVlE3UlhWRlMxUXNaMEpCUVc5Q0xFVjJSVXBhTEVOQlFVTTdSWFZGVVZRc1lVRkJhVUlzUlhaRlVsUXNRMEZCUXp0RmRVVnZRbFFzVVVGQldTeEZka1Z3UWtvc1EwRkJRenRGZFVWSlZDeFpRVUZ2UWl4RmRrVktXaXhEUVVGRE8wVjFSVkZVTEZOQlFXbENMRVYyUlZKVUxFTkJRVU03UlhWRldWUXNVVUZCWjBJc1JYWkZXbElzUTBGQlF6dEZkVVZ2UWxRc1NVRkJXU3hGZGtWd1Frb3NRMEZCUXl4SFFVUkRPenRCUVV0cVFpeFZRVUZWTEVOQlFVTXNUMEZCVHl4RFFVRldPMFZCUTFBc1YwRkJWeXhGUVVGRkxITkNRVUYxUWp0RlFVTndReXhQUVVGUExFVkJRVVVzU1VGQlN6dEZRVU5rTEZOQlFWTXNSVUZCUlN4SlFVRkxPMFZCUTJoQ0xGRkJRVkVzUlVGQlJTeFJRVUZUTzBWdlJqUkNha0lzUzBGQlN5eEZRVUZCTEVsQlFVTTdSVUZIU2l4UFFVRlBMRVZCUVVVc1MwRkJUVHRGUVdWbUxGbEJRVzlDTEVWS2RFVm9RaXhSUVVGVk8wVkpkVVZrTEV0QlFVc3NSVW8xUlVRc1UwRkJWVHRGYUVZclFteENMRmxCUVZrc1JVRkJSU3hEUVVGRk8wVkJRMmhDTEV0QlFVc3NSVUZCUlN4SFFVRkpPMFZCUTFnc1RVRkJUU3hGUVVGSExFdEJRVlU3UlVGQmEwSXNaMEpCUVdkQ08wVkJRM0pFTEZWQlFWVXNSVUZCUlN4MVJVRkJaVHRGUVVNelFpeExRVUZMTEVWQlFVVXNTMEZCVFN4SFFWWk1PMFZ2Um5GRVNDeFZRVUZWTEVOQlFVTXNUMEZCVHl4QlFVRkJMRmRCUVZjc1EwRkJha0k3U1VGRFdDeFpRVUZ2UWl4RlFVRkZMRU5CUVVVc1IwRkVXanRGY0VZeFEyeENMRlZCUVZVc1EwRkJReXhQUVVGUExFTkJRVU1zVFVGQlRTeERRVUZzUWp0SlFVTk9MRkZCUVZFc1JVRkJSU3hSUVVGVE8wbEJRMjVDTEVkQlFVY3NSVUZCUlN4RFFVRkZMRWRCUmtFN1JVRkpVaXhWUVVGVkxFTkJRVU1zVDBGQlR5eERRVUZETEU5QlFVOHNRMEZCYkVJN1NVRkRVQ3hSUVVGUkxFVkJRVVVzVVVGQlV6dEpRVU51UWl4TlFVRk5MRVZCUVVVc1EwRkJSU3hIUVVaR08wVkJTVlFzVlVGQlZTeERRVUZETEU5QlFVOHNRMEZCUXl4SFFVRkhMRU5CUVd4Q08wbEJRMGdzVDBGQlR5eEZRVUZGTEVWQlFVYzdTVUZEV2l4SlFVRkpMRVZCUVVVc1EwRkJSVHRKUVVOU0xFZEJRVWNzUlVGQlJTeERRVUZGTzBsQlExQXNVVUZCVVN4RlFVRkZMRkZCUVZNN1NVRkRia0lzYVVKQlFXbENPMGxCUTJwQ0xFMUJRVTBzUlVGQlJTeEpRVUZMTzBsQlEySXNjVUpCUVhGQ08wbEJRM0pDTEV0QlFVc3NSVUZCUlN4SlFVRkxPMGxCUTFvc2IwSkJRVzlDTEVWQlZHaENPenRCUVdWUUxFMUJRVTBzUTBGQlF6dEZiMFpHU0N4TFFVRkxMRVZCUVVFc1NVRkJRenRGUVVkS0xFOUJRVThzUlVGQlJTeExRVUZOTzBWQlpXWXNXVUZCYjBJc1JVcDBSV2hDTEZGQlFWVTdSVWwxUldRc1MwRkJTeXhGU2pWRlJDeFRRVUZWTEVkb1JqSkVXanRGYjBadFFrUXNUVUZCVFN4QlFVRkJMRmRCUVZjc1EwRkJURHRKUVVOWUxGbEJRVzlDTEVWQlFVVXNRMEZCUlN4SFFVUmFPMFZ3Um1wQ2JrSXNUVUZCVFN4RFFVRkRMRVZCUVVVc1EwRkJUanRKUVVOR0xGVkJRVlVzUlVGQlJTeEpRVUZMTzBsQlEycENMRTlCUVU4c1JVRkJSU3hEUVVGRkxFZEJSbEk3UlVGSlNpeE5RVUZOTEVOQlFVTXNSVUZCUlN4RFFVRk9PMGx2UmxKQkxFdEJRVXNzUlVGQlFTeEpRVUZETzBsQlIwb3NUMEZCVHl4RlFVRkZMRXRCUVUwN1NVRmxaaXhaUVVGdlFpeEZTblJGYUVJc1VVRkJWVHRKU1hWRlpDeExRVUZMTEVWS05VVkVMRk5CUVZVN1NXaEdiVVZzUWl4VlFVRlZMRVZCUVVVc1NVRkJTeXhIUVVaa08wbHZSbUZGTEUxQlFVMHNRMEZCUXl4RlFVRkZMRUZCUVVFc1YwRkJWeXhEUVVGU08wMUJRMWdzV1VGQmIwSXNSVUZCUlN4RFFVRkZMRWRCUkZvN1JYQkdWRW9zVFVGQlRTeERRVUZETEVWQlFVVXNRVUZCUVN4WFFVRlhMRUZCUVZnc1JVRkJWeXhGUVVGc1FqdEpRVU5vUWl4WlFVRlpMRVZCUVVVc1EwRkJSU3hIUVVSRE8wVkJSMnhDTEUxQlFVMHNRMEZCUXl4UFFVRlBMRU5CUVU0N1NVRkRVQ3hSUVVGUkxFVkJRVVVzVVVGQlV6dEpRVU51UWl4VlFVRlZMRVZCUVVVc1MwRkJUVHRKUVVOc1FpeFJRVUZSTEVWQlFVVXNUVUZCVHp0SlFVTnFRaXhoUVVGaExFVkJRVVVzVVVGQlV5eEhRVXBvUWp0SlFVMVNMRTFCUVUwc1EwRkJReXhQUVVGUExFTkJRVU1zUjBGQlJ5eERRVUZrTzAxQlEwZ3NTMEZCU3l4RlFVRkZMRWxCUVVzc1IwRkVVanRGUVVsT0xFMUJRVTBzUTBGQlF5eE5RVUZOTEVOQlFVNDdTVUZEVGl4TlFVRk5MRVZCUVVVc1MwRkJUU3hIUVVSUU8wVkJSMFFzVFVGQlRTeERRVUZETEU5QlFVOHNRVUZCUVN4TlFVRk5MRU5CUVdJN1NVRkRZaXhQUVVGUExFVkJRVVVzUlVGQlJ6dEpRVU5hTEUxQlFVMHNSVUZCUXl4TFFVRk5PMGxCUTJJc1MwRkJTeXhGUVVGRExFbEJRVXM3U1VGRFdDeFJRVUZSTEVWQlFVVXNVVUZCVXp0SlFVTnVRaXhKUVVGSkxFVkJRVVVzUTBGQlJUdEpRVU5TTEUxQlFVMHNSVUZCUlN4RFFVRkZPMGxCUTFZc1ZVRkJWU3hGUVVGRkxIVkRRVUZsTEVkQlVHSTdSVUZUWml4TlFVRk5MRU5CUVVNc1EwRkJReXhEUVVGT08wbEJRMFFzUzBGQlN5eEZRVUZGTEV0QlFVMHNSMEZFV0RzN1FVRkxTaXhOUVVGTkxFTkJRVU03UlVGRFRpeE5RVUZOTEVWQlFVVXNRMEZCUlR0RlFVTldMRTlCUVU4c1JVRkJSU3hEUVVGRkxFZEJSa283TzBGQlMwUXNUVUZCVFN4RFFVRkRMRVZCUVVVc1EwRkJUanRGUVVOVUxGVkJRVlVzUlVGQlJTeEpRVUZMTzBWQlEycENMRTFCUVUwc1JVRkJSU3hEUVVGRk8wVkJRMVlzVDBGQlR5eEZRVUZGTEVOQlFVVTdSVUZEV0N4VlFVRlZMRVZCUVVVc1RVRkJUeXhIUVVwVU96dEJRVTFLTEUxQlFVMHNRMEZCUXl4RlFVRkZMRU5CUVU0N1JVRkRWQ3hSUVVGUkxFVkJRVVVzVFVGQlR6dEZRVU5xUWl4WlFVRlpMRVZCUVVVc1NVRkJTenRGUVVOdVFpeFZRVUZWTEVWQlFVVXNRMEZCUlR0RlFVTmtMR0ZCUVdFc1JVRkJSU3hKUVVGTE8wVkJRM0JDTEU5QlFVOHNSVUZCUlN4RFFVRkZMRWRCVEVRN08wRkJUMFFzVFVGQlRTeERRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkZMRU5CUVZRN1JVRkRXaXhoUVVGaExFVkJRVVVzUjBGQlJ5eERRVUZETEVkQlFVY3NRMEZCUXl4SFFVRkhMRU5CUVVNc1IwRkJSenRGUVVNNVFpeE5RVUZOTEVWQlFVVXNRMEZCUlR0RlFVTldMRlZCUVZVc1JVRkJSU3hOUVVGUE8wVkJRMjVDTEUxQlFVMHNSVUZCUlN4SFFVRkpMRWRCU2tNN08wRkJUV1FzVDBGQlR5eERRVUZETzBWQlFVVXNaMEpCUVdkQ0xFVkJRVVVzVDBGQlVTeEhRVUV6UWpzN1FVRkRWQ3huUWtGQlowSXNRMEZCUXp0RlFVRkZMR2RDUVVGblFpeEZRVUZGTEU5QlFWRXNSMEZCTTBJN08wRkJRMnhDTEdkQ1FVRm5RaXhEUVVGRE8wVkJRVVVzWjBKQlFXZENMRVZCUVVVc1QwRkJVVHRGUVVGRkxGTkJRVk1zUlVGQlJTeEhRVUZKTEVkQlFUVkRPenRCUVVOc1FpeGpRVUZqTEVOQlFVTTdSVUZCUlN4blFrRkJaMElzUlVGQlJTeFBRVUZSTzBWQlFVVXNVMEZCVXl4RlFVRkZMRXRCUVUwc1IwRkJPVU03TzBGQlEyaENMR1ZCUVdVc1EwRkJRenRGUVVGRkxHZENRVUZuUWl4RlFVRkZMRTlCUVZFc1IwRkJNMEk3TzBGQlJXcENMRkZCUVZFc1EwRkJRenRGYjBaNFJVd3NTMEZCU3l4RlFVRkJMRWxCUVVNN1JVRkhTaXhQUVVGUExFVkJRVVVzUzBGQlRUdEZRV1ZtTEZsQlFXOUNMRVZLZEVWb1FpeFJRVUZWTzBWSmRVVmtMRXRCUVVzc1JVbzFSVVFzVTBGQlZTeEhhRVpwU1ZZN1JXOUdia1JJTEZGQlFWRXNRVUZCUVN4WFFVRlhMRU5CUVZBN1NVRkRXQ3haUVVGdlFpeEZRVUZGTEVOQlFVVXNSMEZFV2pzN1FYQkdkVVJwUWl4VFFVRlRMRU5CUVVNc2EwSkJRV3RDTEVWQlFVVXNUVUZCVFN4RFFVRkRMR1ZCUVdVc1EwRkJjRU03UlVGRGFrUXNWVUZCVlN4RlFVRkZMRTlCUVVjN1JVRkRaaXhWUVVGVkxFVkJRVVVzY1VKQlFVazdSVUZEYUVJc1RVRkJUU3hGUVVGRkxEQkdRVUV3Ump0RlFVTnNSeXhWUVVGVkxFVkJRVVVzTkVaQlFUWkdMRWRCU25aRU96dEJRVTFJTEUxQlFVMHNRMEZCUXl4VFFVRlRMRU5CUVVNc2EwSkJRV3RDTEVWQlFVVXNUVUZCVFN4RFFVRkRMRTFCUVUwc1EwRkJReXhsUVVGbExFTkJRV3hFTzBWQlF5OUVMRlZCUVZVc1JVRkJSU3hYUVVGWkxFZEJSSGRET3p0QlFVZHlSQ3hKUVVGSkxFTkJRVU1zVTBGQlV5eERRVUZETEhkQ1FVRjNRaXhEUVVGa08wVkJRM0JETEV0QlFVc3NSVUZCUlN4SlFVRkxMRWRCUkhsQ096dEJRVWxzUXl4TlFVRk5MRU5CUVVNc1owSkJRV2RDTEVOQlFVNDdSVUZEY0VJc1lVRkJZU3hGUVVGRkxFZEJRVWs3UlVGRGJrSXNUVUZCVFN4RlFVRkZMR1ZCUVdkQ08wVkJRM2hDTEZWQlFWVXNSVUZCUlN4SFFVRkhMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVkQlNGUTdPMEZCUzJ4Q0xFMUJRVTBzUTBGQlF5eFZRVUZWTEVOQlFVNDdSVUZEWkN4VlFVRlZMRVZCUVVVc1RVRkJUenRGUVVOdVFpeFJRVUZSTEVWQlFVVXNVVUZCVXl4SFFVWktPenRCUVVsYUxFMUJRVTBzUTBGQlF5eGxRVUZsTEVOQlFVNDdSVUZEYmtJc1VVRkJVU3hGUVVGRkxGRkJRVk03UlVGRGJrSXNUVUZCVFN4RlFVRkZMRU5CUVVVN1JVRkRZaXhKUVVGSkxFVkJRVVVzUTBGQlJUdEZRVU5NTEV0QlFVc3NSVUZCUlN4TFFVRk5PMFZCUTJJc1MwRkJTeXhGUVVGRkxFbEJRVXM3UlVGRFdpeFRRVUZUTEVWQlFVVXNSMEZCU1N4SFFVNUxPenRCUVZGcVFpeE5RVUZOTEVOQlFVTXNZMEZCWXl4RFFVRk9PMFZCUlhSQ0xITkNRVUZ6UWl4RlFVRkZMRmRCUVZrN1JVRkRjRU1zWlVGQlpTeEZRVUZGTEZGQlFWTTdSVUZETVVJc1MwRkJTeXhGUVVGRkxFdEJRVWM3UlVGRFZpeFBRVUZQTEVWQlFVVXNTMEZCVFR0RlFVTm1MRmRCUVZjc1JVRkJSU3c0UkVGQkswUTdSVUZETlVVc1UwRkJVeXhGUVVGRkxGRkJRVk03UlVGRGNFSXNWMEZCVnl4RlFVRkZMRWxCUVVzN1JVRkRiRUlzVjBGQlZ5eEZRVUZGTEZGQlFWTTdSVUZEZEVJc1ZVRkJWU3hGUVVGRkxFMUJRVTg3UlVGRGJrSXNTVUZCU1N4RlFVRkZMRU5CUVVVc1IwRllaVHM3UVVGamFFSXNUVUZCVFN4RFFVRkRMRU5CUVVNc1EwRkJUanRGUVVOTUxHOUNRVUZ2UWp0RlFVTndRaXgxUWtGQmRVSTdSVUZGTTBJc2MwSkJRWE5DTEVWQlFVVXNWMEZCV1R0RlFVTndReXhsUVVGbExFVkJRVVVzVVVGQlV6dEZRVU14UWl4TFFVRkxMRVZCUVVVc1MwRkJSenRGUVVOV0xFOUJRVThzUlVGQlJTeExRVUZOTzBWQlEyWXNWMEZCVnl4RlFVRkZMRGhFUVVFclJEdEZRVU0xUlN4VFFVRlRMRVZCUVVVc1VVRkJVenRGUVVOd1FpeE5RVUZOTEVWQlFVVXNTVUZCU3p0RlFVTmlMRmRCUVZjc1JVRkJSU3hSUVVGVE8wVkJRM1JDTEdGQlFXRXNSVUZCUlN4SFFVRkpPMFZCUTI1Q0xGVkJRVlVzUlVGQlJTeEhRVUZKTzBWQlEyaENMR05CUVdNc1JVRkJSU3hIUVVGSk8wVkJRM0JDTEZsQlFWa3NSVUZCUlN4SFFVRkpPMFZCUTJ4Q0xHRkJRV0VzUlVGQlJTeEhRVUZKTzBWQlEyNUNMRmRCUVZjc1JVRkJSU3hIUVVGSk8wVkJRMnBDTEZWQlFWVXNSVUZCUlN4TlFVRlBPMFZCUTI1Q0xFdEJRVXNzUlVGQlJTeExRVUZOTzBWQlEySXNTVUZCU1N4RlFVRkZMRU5CUVVVc1IwRndRa1U3TzBGQmRVSklMRTFCUVUwc1EwRkJReXd5UWtGQk1rSXNRMEZCVGp0RlFVTXZRaXhYUVVGWExFVkJRVVVzU1VGQlN5eEhRVVJqT3p0QlFVYzNRaXhOUVVGTkxFTkJRVU1zZFVKQlFYVkNMRU5CUVU0N1JVRkRNMElzVjBGQlZ5eEZRVUZGTEVsQlFVc3NSMEZFVlRzN1FVRkhla0lzVFVGQlRTeERRVUZETEVkQlFVY3NRMEZCVGp0RlFVTlFMRTlCUVU4c1JVRkJSU3hMUVVGTkxFZEJSRkE3TzBGQlIzbERMRTFCUVUwc1EwRkJReXhyUWtGQmEwSXNSVUZCUlN4TlFVRk5MRU5CUVVNc2EwSkJRV3RDTEVOQlFVTXNRMEZCUXl4RFFVRndSRHRGUVVOdVJDeFZRVUZWTEVWQlFVVXNUVUZCVHp0RlFVTnVRaXhUUVVGVExFVkJRVVVzUzBGQlRUdEZRVU5xUWl4TFFVRkxMRVZCUVVVc1MwRkJUVHRGUVVOaUxGZEJRVmNzUlVGQlJTeDNRa0ZCU1N4RFFVRnhRaXhIUVVGSExFTkJRVU1zUjBGQlJ5eERRVUZETEVkQlFVYzdSVUZEYWtRc1YwRkJWeXhGUVVGRkxFMUJRVTg3UlVGRGNFSXNaVUZCWlN4RlFVRkZMRWxCUVVzN1JVRkhla0lzYzBKQlFYTkNMRVZCUVVVc1YwRkJXVHRGUVVOd1F5eGxRVUZsTEVWQlFVVXNVVUZCVXp0RlFVTXhRaXhMUVVGTExFVkJRVVVzUzBGQlJ6dEZRVU5XTEU5QlFVOHNSVUZCUlN4TFFVRk5PMFZCUTJZc1YwRkJWeXhGUVVGRkxEaEVRVUVyUkR0RlFVTTFSU3hUUVVGVExFVkJRVVVzVTBGQlZUdEZRVU55UWl4WFFVRlhMRVZCUVVVc1NVRkJTenRGUVVOc1FpeE5RVUZOTEVWQlFVVXNVMEZCVlR0RlFVTnNRaXhYUVVGWExFVkJRVVVzVTBGQlZUdEZRVU4yUWl4VlFVRlZMRVZCUVVVc1RVRkJUenRGUVVOdVFpeGxRVUZsTEVWQlFVVXNTVUZCU3p0RlFVTjBRaXhYUVVGWExFVkJRVVVzTmtKQlFVa3NRMEZCTUVJc1IwRkJSeXhEUVVGRExFZEJRVWNzUTBGQlF5eEhRVUZITzBWQlEzUkVMRWxCUVVrc1JVRkJSU3hEUVVGRkxFZEJja0lyUXpzN1FVRjFRbXBFTEUxQlFVMHNRMEZCUXl4clFrRkJhMElzUTBGQlRqdEZRVU4wUWl4TlFVRk5MRVZCUVVVc1MwRkJUU3hIUVVSVE96dEJRVWN6UWl4bFFVRmxMRU5CUVVNN1JVRkRXaXhuUWtGQlowSXNSVUZCUlN4UFFVRlJMRWRCUkdJN08wRkJSMnBDTEdkQ1FVRm5RaXhEUVVGRE8wVkJRMklzWjBKQlFXZENMRVZCUVVVc1QwRkJVU3hIUVVSYU96dEJRVWRzUWl4aFFVRmhMRU5CUVVNN1JVRkRWaXhuUWtGQlowSXNSVUZCUlN4UFFVRlJPMFZCUXpGQ0xGTkJRVk1zUlVGQlJTeExRVUZOTEVkQlJrNDdPMEZCU1dZc1owSkJRV2RDTEVOQlFVTTdSVUZEWWl4blFrRkJaMElzUlVGQlJTeFBRVUZSTzBWQlF6RkNMRk5CUVZNc1JVRkJSU3hMUVVGTkxFZEJSa2c3TzBGQlNXeENMRTlCUVU4c1EwRkJRenRGUVVOS0xHZENRVUZuUWl4RlFVRkZMRTlCUVZFc1IwRkVja0k3TzBGQlNWUXNVVUZCVVN4RFFVRkRPMFZ2Um5CTlRDeExRVUZMTEVWQlFVRXNTVUZCUXp0RlFVZEtMRTlCUVU4c1JVRkJSU3hMUVVGTk8wVkJaV1lzV1VGQmIwSXNSVXAwUldoQ0xGRkJRVlU3UlVsMVJXUXNTMEZCU3l4RlNqVkZSQ3hUUVVGVkxFZG9SalpRVmp0RmIwWXZTMGdzVVVGQlVTeEJRVUZCTEZkQlFWY3NRMEZCVUR0SlFVTllMRmxCUVc5Q0xFVkJRVVVzUTBGQlJTeEhRVVJhT3p0QmJrWnVSbkJDTEVsQlFVa3NRMEZCUXp0RlFVTkVMRWxCUVVrc1JVRkJSU3hKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEZOQlFWTXNSVUZCUlN4VFFVRlRMRU5CUVVNc1NVRkJTU3hGUVVGRkxFdEJRVXNzUjBGRU9VTWlMQW9KSW01aGJXVnpJam9nVzEwS2ZRPT0gKi8iLCJAY2hhcnNldCBcIlVURi04XCI7XG5cbkBpZiAkYm9yZGVyLWJveC1zaXppbmcgPT0gdHJ1ZSB7XG4gIGh0bWwgeyAvLyBodHRwOi8vYml0Lmx5LzFxazJ0VlJcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICB9XG5cbiAgKiB7XG4gICAgJixcbiAgICAmOjphZnRlcixcbiAgICAmOjpiZWZvcmUge1xuICAgICAgYm94LXNpemluZzogaW5oZXJpdDtcbiAgICB9XG4gIH1cbn1cbiIsIi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBUaGlzIGZpbGUgY29udGFpbnMgYWxsIGFwcGxpY2F0aW9uLXdpZGUgU2FzcyB2YXJpYWJsZXMuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5cblxuXG5cbi8vLyBSZWd1bGFyIGZvbnQgZmFtaWx5XG4vLy8gQHR5cGUgTGlzdFxuJHRleHQtZm9udC1zdGFjazogJ09wZW4gU2FucycsICdIZWx2ZXRpY2EgTmV1ZSBMaWdodCcsICdIZWx2ZXRpY2EgTmV1ZScsICdIZWx2ZXRpY2EnLCAnQXJpYWwnLCBzYW5zLXNlcmlmICFkZWZhdWx0O1xuXG4vLy8gQ29kZSAobW9ub3NwYWNlKSBmb250IGZhbWlseVxuLy8vIEB0eXBlIExpc3RcbiRjb2RlLWZvbnQtc3RhY2s6ICdDb3VyaWVyIE5ldycsICdEZWphVnUgU2FucyBNb25vJywgJ0JpdHN0cmVhbSBWZXJhIFNhbnMgTW9ubycsICdNb25hY28nLCBtb25vc3BhY2UgIWRlZmF1bHQ7XG5cblxuXG5cblxuLy8vIENvcHkgdGV4dCBjb2xvclxuLy8vIEB0eXBlIENvbG9yXG4kdGV4dC1jb2xvcjogIzIyMiAhZGVmYXVsdDtcblxuLy8vIE1haW4gYnJhbmQgY29sb3Jcbi8vLyBAdHlwZSBDb2xvclxuJGJyYW5kLWNvbG9yOiAjRTUwMDUwICFkZWZhdWx0O1xuXG4vLy8gTGlnaHQgZ3JleVxuLy8vIEB0eXBlIENvbG9yXG4kbGlnaHQtZ3JleTogI0VERURFRCAhZGVmYXVsdDtcblxuLy8vIE1lZGl1bSBncmV5XG4vLy8gQHR5cGUgQ29sb3JcbiRtaWQtZ3JleTogIzk5OSAhZGVmYXVsdDtcblxuLy8vIERhcmsgZ3JleVxuLy8vIEB0eXBlIENvbG9yXG4kZGFyay1ncmV5OiAjNDQ0ICFkZWZhdWx0O1xuXG5cblxuXG5cbi8vLyBDb250YWluZXIncyBtYXhpbXVtIHdpZHRoXG4vLy8gQmVsb3cgdGhhdCBpcyAxMDAlXG4vLy8gQHR5cGUgTGVuZ3RoXG4kbWF4LXdpZHRoOiA5NjBweCAhZ2xvYmFsO1xuXG5cblxuXG5cbi8vLyBCcmVha3BvaW50cyBtYXBcbi8vLyBAcHJvcCB7U3RyaW5nfSBrZXlzIC0gS2V5cyBhcmUgaWRlbnRpZmllcnMgbWFwcGVkIHRvIGEgZ2l2ZW4gbGVuZ3RoXG4vLy8gQHByb3Age01hcH0gdmFsdWVzIC0gVmFsdWVzIGFyZSBhY3R1YWwgYnJlYWtwb2ludHMgZXhwcmVzc2VkIGluIHBpeGVsc1xuLy8vIEBzZWUge21peGlufSByZXNwb25kLXRvXG4kYnJlYWtwb2ludHM6IChcbiAgJ3NtYWxsJzogKG1pbi13aWR0aDogMzIwcHgpLFxuICAnbWVkaXVtJzogKG1pbi13aWR0aDogNzY4cHgpLFxuICAnbGFyZ2UnOiAobWluLXdpZHRoOiAxMDI0cHgpLFxuKSAhZGVmYXVsdDtcblxuXG5cblxuXG5cbi8vLyBSZWxhdGl2ZSBvciBhYnNvbHV0ZSBVUkwgd2hlcmUgYWxsIGFzc2V0cyBhcmUgc2VydmVkIGZyb21cbi8vLyBAdHlwZSBTdHJpbmdcbi8vLyBAZXhhbXBsZSBzY3NzIC0gV2hlbiB1c2luZyBhIENETlxuLy8vICAgJGJhc2UtdXJsOiAnaHR0cDovL2Nkbi5leGFtcGxlLmNvbS9hc3NldHMvJztcbiRiYXNlLXVybDogJy9hc3NldHMvJyAhZGVmYXVsdDtcblxuLyokYmFja2dyb3VuZC1jb2xvcjogcmdiKDIzMSwgMjMxLCAyMjYpOyovXG4kYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XG4iLCIvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gVGhpcyBmaWxlIGNvbnRhaW5zIHZlcnkgYmFzaWMgc3R5bGVzLlxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuLyoqXG4gKiBTZXQgdXAgYSBkZWNlbnQgYm94IG1vZGVsIG9uIHRoZSByb290IGVsZW1lbnRcbiAqL1xuaHRtbCB7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG59XG5cbi8qKlxuICogTWFrZSBhbGwgZWxlbWVudHMgZnJvbSB0aGUgRE9NIGluaGVyaXQgZnJvbSB0aGUgcGFyZW50IGJveC1zaXppbmdcbiAqIFNpbmNlIGAqYCBoYXMgYSBzcGVjaWZpY2l0eSBvZiAwLCBpdCBkb2VzIG5vdCBvdmVycmlkZSB0aGUgYGh0bWxgIHZhbHVlXG4gKiBtYWtpbmcgYWxsIGVsZW1lbnRzIGluaGVyaXRpbmcgZnJvbSB0aGUgcm9vdCBib3gtc2l6aW5nIHZhbHVlXG4gKiBTZWU6IGh0dHBzOi8vY3NzLXRyaWNrcy5jb20vaW5oZXJpdGluZy1ib3gtc2l6aW5nLXByb2JhYmx5LXNsaWdodGx5LWJldHRlci1iZXN0LXByYWN0aWNlL1xuICovXG4qLCAqOjpiZWZvcmUsICo6OmFmdGVyIHtcbiAgYm94LXNpemluZzogaW5oZXJpdDtcbn0gXG5cbi8qKlxuICogQmFzaWMgc3R5bGVzIGZvciBsaW5rc1xuICovXG5hIHtcbiAgY29sb3I6ICRicmFuZC1jb2xvcjtcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuXG4gIEBpbmNsdWRlIG9uLWV2ZW50IHtcbiAgICBjb2xvcjogJHRleHQtY29sb3I7XG4gICAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7XG4gIH1cbn1cblxuaHRtbCB7XG4gICAgY29sb3I6ICMyMjI7XG4gICAgZm9udC1zaXplOiAxZW07XG4gICAgbGluZS1oZWlnaHQ6IDEuNDtcbn1cblxuOjotbW96LXNlbGVjdGlvbiB7XG4gICAgYmFja2dyb3VuZDogI2IzZDRmYztcbiAgICB0ZXh0LXNoYWRvdzogbm9uZTtcbn1cblxuOjpzZWxlY3Rpb24ge1xuICAgIGJhY2tncm91bmQ6ICNiM2Q0ZmM7XG4gICAgdGV4dC1zaGFkb3c6IG5vbmU7XG59XG5cbmhyIHtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICBoZWlnaHQ6IDFweDtcbiAgICBib3JkZXI6IDA7XG4gICAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICNjY2M7XG4gICAgbWFyZ2luOiAxZW0gMDtcbiAgICBwYWRkaW5nOiAwO1xufVxuXG5hdWRpbyxcbmNhbnZhcyxcbmlmcmFtZSxcbmltZyxcbnN2ZyxcbnZpZGVvIHtcbiAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xufVxuXG5maWVsZHNldCB7XG4gICAgYm9yZGVyOiAwO1xuICAgIG1hcmdpbjogMDtcbiAgICBwYWRkaW5nOiAwO1xufVxuXG50ZXh0YXJlYSB7XG4gICAgcmVzaXplOiB2ZXJ0aWNhbDtcbn1cbiIsIi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBUaGlzIGZpbGUgY29udGFpbnMgYWxsIGFwcGxpY2F0aW9uLXdpZGUgU2FzcyBtaXhpbnMuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4vLy8gRXZlbnQgd3JhcHBlclxuLy8vIEBhdXRob3IgSGFycnkgUm9iZXJ0c1xuLy8vIEBwYXJhbSB7Qm9vbH0gJHNlbGYgW2ZhbHNlXSAtIFdoZXRoZXIgb3Igbm90IHRvIGluY2x1ZGUgY3VycmVudCBzZWxlY3RvclxuLy8vIEBsaW5rIGh0dHBzOi8vdHdpdHRlci5jb20vY3Nzd2l6YXJkcnkvc3RhdHVzLzQ3ODkzODUzMDM0MjAwNjc4NCBPcmlnaW5hbCB0d2VldCBmcm9tIEhhcnJ5IFJvYmVydHNcbkBtaXhpbiBvbi1ldmVudCgkc2VsZjogZmFsc2UpIHtcbiAgQGlmICRzZWxmIHtcbiAgICAmLFxuICAgICY6aG92ZXIsXG4gICAgJjphY3RpdmUsXG4gICAgJjpmb2N1cyB7XG4gICAgICBAY29udGVudDtcbiAgICB9XG4gIH0gQGVsc2Uge1xuICAgICY6aG92ZXIsXG4gICAgJjphY3RpdmUsXG4gICAgJjpmb2N1cyB7XG4gICAgICBAY29udGVudDtcbiAgICB9XG4gIH1cbn1cblxuLy8vIE1ha2UgYSBjb250ZXh0IGJhc2VkIHNlbGVjdG9yIGEgbGl0dGxlIG1vcmUgZnJpZW5kbHlcbi8vLyBAYXV0aG9yIEh1Z28gR2lyYXVkZWxcbi8vLyBAcGFyYW0ge1N0cmluZ30gJGNvbnRleHRcbkBtaXhpbiB3aGVuLWluc2lkZSgkY29udGV4dCkge1xuICAjeyRjb250ZXh0fSAmIHtcbiAgICBAY29udGVudDtcbiAgfVxufVxuXG4vLy8gUmVzcG9uc2l2ZSBtYW5hZ2VyXG4vLy8gQHBhcmFtIHtTdHJpbmd9ICRicmVha3BvaW50IC0gQnJlYWtwb2ludFxuLy8vIEByZXF1aXJlcyAkYnJlYWtwb2ludHNcbi8vLyBAbGluayBodHRwOi8vc2Fzcy1ndWlkZWxpbi5lcy8jYnJlYWtwb2ludC1tYW5hZ2VyIFNhc3MgR3VpZGVsaW5lcyAtIEJyZWFrcG9pbnQgTWFuYWdlclxuQG1peGluIHJlc3BvbmQtdG8oJGJyZWFrcG9pbnQpIHtcbiAgJHF1ZXJ5OiBtYXAtZ2V0KCRicmVha3BvaW50cywgJGJyZWFrcG9pbnQpO1xuICBcbiAgQGlmIG5vdCAkcXVlcnkge1xuICAgIEBlcnJvciAnTm8gdmFsdWUgZm91bmQgZm9yIGAjeyRicmVha3BvaW50fWAuIFBsZWFzZSBtYWtlIHN1cmUgaXQgaXMgZGVmaW5lZCBpbiBgJGJyZWFrcG9pbnRzYCBtYXAuJztcbiAgfVxuXG4gIEBtZWRpYSAje2lmKHR5cGUtb2YoJHF1ZXJ5KSA9PSAnc3RyaW5nJywgdW5xdW90ZSgkcXVlcnkpLCBpbnNwZWN0KCRxdWVyeSkpfSB7XG4gICAgQGNvbnRlbnQ7XG4gIH1cbn1cbiIsIi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBUaGlzIGZpbGUgY29udGFpbnMgYWxsIEBmb250LWZhY2UgZGVjbGFyYXRpb25zLCBpZiBhbnkuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuQGZvbnQtZmFjZSB7IGZvbnQtZmFtaWx5OiBCZWF2ZXI7IHNyYzogdXJsKCdmb250cy9iZWF2ZXIudHRmJyk7IH1cbiIsIi8qKlxuICogQmFzaWMgdHlwb2dyYXBoeSBzdHlsZSBmb3IgY29weSB0ZXh0XG4gKi9cbmJvZHkge1xuICBjb2xvcjogJHRleHQtY29sb3I7XG4gIGZvbnQ6IG5vcm1hbCAxMjUlIC8gMS40ICR0ZXh0LWZvbnQtc3RhY2s7XG59XG4iLCIvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gVGhpcyBmaWxlIGNvbnRhaW5zIENTUyBoZWxwZXIgY2xhc3Nlcy5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbi8qKlxuICogQ2xlYXIgaW5uZXIgZmxvYXRzXG4gKi9cbi5jbGVhcmZpeDo6YWZ0ZXIge1xuICBjbGVhcjogYm90aDtcbiAgY29udGVudDogJyc7XG4gIGRpc3BsYXk6IHRhYmxlO1xufVxuXG4uY2xlYXJmaXg6YmVmb3JlLFxuLmNsZWFyZml4OmFmdGVyIHtcbiAgICBjb250ZW50OiBcIiBcIjtcbiAgICBkaXNwbGF5OiB0YWJsZTtcbn1cblxuLmNsZWFyZml4OmFmdGVyIHtcbiAgICBjbGVhcjogYm90aDtcbn1cblxuLmNsZWFyZml4IHtcbiAgICAqem9vbTogMTtcbn1cblxuLyoqXG4gKiBNYWluIGNvbnRlbnQgY29udGFpbmVyc1xuICogMS4gTWFrZSB0aGUgY29udGFpbmVyIGZ1bGwtd2lkdGggd2l0aCBhIG1heGltdW0gd2lkdGhcbiAqIDIuIENlbnRlciBpdCBpbiB0aGUgdmlld3BvcnRcbiAqIDMuIExlYXZlIHNvbWUgc3BhY2Ugb24gdGhlIGVkZ2VzLCBlc3BlY2lhbGx5IHZhbHVhYmxlIG9uIHNtYWxsIHNjcmVlbnNcbiAqL1xuLmNvbnRhaW5lciB7XG4gIG1heC13aWR0aDogJG1heC13aWR0aDsgLyogMSAqL1xuICBtYXJnaW4tbGVmdDogYXV0bzsgLyogMiAqL1xuICBtYXJnaW4tcmlnaHQ6IGF1dG87IC8qIDIgKi9cbiAgcGFkZGluZy1sZWZ0OiAyMHB4OyAvKiAzICovXG4gIHBhZGRpbmctcmlnaHQ6IDIwcHg7IC8qIDMgKi9cbiAgd2lkdGg6IDEwMCU7IC8qIDEgKi9cbiB9XG5cbi8qKlxuICogSGlkZSB0ZXh0IHdoaWxlIG1ha2luZyBpdCByZWFkYWJsZSBmb3Igc2NyZWVuIHJlYWRlcnNcbiAqIDEuIE5lZWRlZCBpbiBXZWJLaXQtYmFzZWQgYnJvd3NlcnMgYmVjYXVzZSBvZiBhbiBpbXBsZW1lbnRhdGlvbiBidWc7XG4gKiAgICBTZWU6IGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NTcxNDZcbiAqL1xuLmhpZGUtdGV4dCB7XG4gIG92ZXJmbG93OiBoaWRkZW47XG4gIHBhZGRpbmc6IDA7IC8qIDEgKi9cbiAgdGV4dC1pbmRlbnQ6IDEwMSU7XG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XG59XG5cbi8qKlxuICogSGlkZSBlbGVtZW50IHdoaWxlIG1ha2luZyBpdCByZWFkYWJsZSBmb3Igc2NyZWVuIHJlYWRlcnNcbiAqIFNoYW1lbGVzc2x5IGJvcnJvd2VkIGZyb20gSFRNTDVCb2lsZXJwbGF0ZTpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9oNWJwL2h0bWw1LWJvaWxlcnBsYXRlL2Jsb2IvbWFzdGVyL3NyYy9jc3MvbWFpbi5jc3MjTDExOS1MMTMzXG4gKi9cbi52aXN1YWxseS1oaWRkZW4geyBcbiAgYm9yZGVyOiAwO1xuICBjbGlwOiByZWN0KDAgMCAwIDApO1xuICBoZWlnaHQ6IDFweDtcbiAgbWFyZ2luOiAtMXB4O1xuICBvdmVyZmxvdzogaGlkZGVuO1xuICBwYWRkaW5nOiAwO1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHdpZHRoOiAxcHg7XG59XG5cbi5oaWRkZW4ge1xuICAgIGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDtcbiAgICB2aXNpYmlsaXR5OiBoaWRkZW47XG59XG5cbi52aXN1YWxseWhpZGRlbiB7XG4gICAgYm9yZGVyOiAwO1xuICAgIGNsaXA6IHJlY3QoMCAwIDAgMCk7XG4gICAgaGVpZ2h0OiAxcHg7XG4gICAgbWFyZ2luOiAtMXB4O1xuICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgcGFkZGluZzogMDtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgd2lkdGg6IDFweDtcbn1cblxuLnZpc3VhbGx5aGlkZGVuLmZvY3VzYWJsZTphY3RpdmUsXG4udmlzdWFsbHloaWRkZW4uZm9jdXNhYmxlOmZvY3VzIHtcbiAgICBjbGlwOiBhdXRvO1xuICAgIGhlaWdodDogYXV0bztcbiAgICBtYXJnaW46IDA7XG4gICAgb3ZlcmZsb3c6IHZpc2libGU7XG4gICAgcG9zaXRpb246IHN0YXRpYztcbiAgICB3aWR0aDogYXV0bztcbn1cblxuLmludmlzaWJsZSB7XG4gICAgdmlzaWJpbGl0eTogaGlkZGVuO1xufVxuIiwiQG1lZGlhIHByaW50IHtcbiAgICAqLFxuICAgICo6YmVmb3JlLFxuICAgICo6YWZ0ZXIge1xuICAgICAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudCAhaW1wb3J0YW50O1xuICAgICAgICBjb2xvcjogIzAwMCAhaW1wb3J0YW50O1xuICAgICAgICBib3gtc2hhZG93OiBub25lICFpbXBvcnRhbnQ7XG4gICAgICAgIHRleHQtc2hhZG93OiBub25lICFpbXBvcnRhbnQ7XG4gICAgfVxuXG4gICAgYSxcbiAgICBhOnZpc2l0ZWQge1xuICAgICAgICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTtcbiAgICB9XG5cbiAgICBhW2hyZWZdOmFmdGVyIHtcbiAgICAgICAgY29udGVudDogXCIgKFwiIGF0dHIoaHJlZikgXCIpXCI7XG4gICAgfVxuXG4gICAgYWJiclt0aXRsZV06YWZ0ZXIge1xuICAgICAgICBjb250ZW50OiBcIiAoXCIgYXR0cih0aXRsZSkgXCIpXCI7XG4gICAgfVxuXG4gICAgYVtocmVmXj1cIiNcIl06YWZ0ZXIsXG4gICAgYVtocmVmXj1cImphdmFzY3JpcHQ6XCJdOmFmdGVyIHtcbiAgICAgICAgY29udGVudDogXCJcIjtcbiAgICB9XG5cbiAgICBwcmUsXG4gICAgYmxvY2txdW90ZSB7XG4gICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICM5OTk7XG4gICAgICAgIHBhZ2UtYnJlYWstaW5zaWRlOiBhdm9pZDtcbiAgICB9XG5cbiAgICB0aGVhZCB7XG4gICAgICAgIGRpc3BsYXk6IHRhYmxlLWhlYWRlci1ncm91cDtcbiAgICB9XG5cbiAgICB0cixcbiAgICBpbWcge1xuICAgICAgICBwYWdlLWJyZWFrLWluc2lkZTogYXZvaWQ7XG4gICAgfVxuXG4gICAgaW1nIHtcbiAgICAgICAgbWF4LXdpZHRoOiAxMDAlICFpbXBvcnRhbnQ7XG4gICAgfVxuXG4gICAgcCxcbiAgICBoMixcbiAgICBoMyB7XG4gICAgICAgIG9ycGhhbnM6IDM7XG4gICAgICAgIHdpZG93czogMztcbiAgICB9XG5cbiAgICBoMixcbiAgICBoMyB7XG4gICAgICAgIHBhZ2UtYnJlYWstYWZ0ZXI6IGF2b2lkO1xuICAgIH1cbn1cbiIsIi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBUaGlzIGZpbGUgY29udGFpbnMgYWxsIHN0eWxlcyByZWxhdGVkIHRvIHRoZSBoZWFkZXIgb2YgdGhlIHNpdGUvYXBwbGljYXRpb24uXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4jaGVhZGVyLWNvbnRhaW5lclxue1xuXHRAaW5jbHVkZSBvdXRlci1jb250YWluZXI7XG59XG5cbiNsb2dvLWNvbnRhaW5lclxue1xuXHRiYWNrZ3JvdW5kLWNvbG9yOiAjRkZGRkZGOyB3aWR0aDogYXV0bzsgaGVpZ2h0OiBhdXRvOyBcblx0Lypwb3NpdGlvbjogYWJzb2x1dGU7IGxlZnQ6IDIwcHg7IHRvcDogMHB4OyovXG5cdGZvbnQtZmFtaWx5OiBCZWF2ZXI7XG5cdG9wYWNpdHk6IDAuOTtcblx0aW1nIHtcblx0XHRtYXJnaW46IDA7XG5cdFx0cGFkZGluZzogMDtcblx0fVxuXHRoMSB7XG5cdFx0Zm9udC1zaXplOiAzMi40cHg7XG5cdFx0cGFkZGluZzogMDtcblx0XHRtYXJnaW46IDAgMHB4O1xuXHR9XG5cdHAge1xuXHRcdHBhZGRpbmc6IDA7XG5cdFx0bWFyZ2luOiAwIDJweDtcblx0fVxuXHRAaW5jbHVkZSBzcGFuLWNvbHVtbnMoMyBvZiAxMik7XG59XG4jaGVhZGVyLWJhbm5lclxue1xuXHRiYWNrZ3JvdW5kOiB1cmwoaW1nL2thc2hhbmEucG5nKTtcblx0aGVpZ2h0OiAyNzBweDtcbn1cbiIsIkBjaGFyc2V0IFwiVVRGLThcIjtcblxuLy8vIE1ha2VzIGFuIGVsZW1lbnQgYSBvdXRlciBjb250YWluZXIgYnkgY2VudGVyaW5nIGl0IGluIHRoZSB2aWV3cG9ydCwgY2xlYXJpbmcgaXRzIGZsb2F0cywgYW5kIHNldHRpbmcgaXRzIGBtYXgtd2lkdGhgLlxuLy8vIEFsdGhvdWdoIG9wdGlvbmFsLCB1c2luZyBgb3V0ZXItY29udGFpbmVyYCBpcyByZWNvbW1lbmRlZC4gVGhlIG1peGluIGNhbiBiZSBjYWxsZWQgb24gbW9yZSB0aGFuIG9uZSBlbGVtZW50IHBlciBwYWdlLCBhcyBsb25nIGFzIHRoZXkgYXJlIG5vdCBuZXN0ZWQuXG4vLy9cbi8vLyBAcGFyYW0ge051bWJlciBbdW5pdF19ICRsb2NhbC1tYXgtd2lkdGggWyRtYXgtd2lkdGhdXG4vLy8gICBNYXggd2lkdGggdG8gYmUgYXBwbGllZCB0byB0aGUgZWxlbWVudC4gQ2FuIGJlIGEgcGVyY2VudGFnZSBvciBhIG1lYXN1cmUuXG4vLy9cbi8vLyBAZXhhbXBsZSBzY3NzIC0gVXNhZ2Vcbi8vLyAgIC5lbGVtZW50IHtcbi8vLyAgICAgQGluY2x1ZGUgb3V0ZXItY29udGFpbmVyKDEwMCUpO1xuLy8vICAgfVxuLy8vXG4vLy8gQGV4YW1wbGUgY3NzIC0gQ1NTIE91dHB1dFxuLy8vICAgLmVsZW1lbnQge1xuLy8vICAgICAqem9vbTogMTtcbi8vLyAgICAgbWF4LXdpZHRoOiAxMDAlO1xuLy8vICAgICBtYXJnaW4tbGVmdDogYXV0bztcbi8vLyAgICAgbWFyZ2luLXJpZ2h0OiBhdXRvO1xuLy8vICAgfVxuLy8vXG4vLy8gICAuZWxlbWVudDpiZWZvcmUsIC5lbGVtZW50OmFmdGVyIHtcbi8vLyAgICAgY29udGVudDogXCIgXCI7XG4vLy8gICAgIGRpc3BsYXk6IHRhYmxlO1xuLy8vICAgfVxuLy8vXG4vLy8gICAuZWxlbWVudDphZnRlciB7XG4vLy8gICAgIGNsZWFyOiBib3RoO1xuLy8vICAgfVxuXG5AbWl4aW4gb3V0ZXItY29udGFpbmVyKCRsb2NhbC1tYXgtd2lkdGg6ICRtYXgtd2lkdGgpIHtcbiAgQGluY2x1ZGUgY2xlYXJmaXg7XG4gIG1heC13aWR0aDogJGxvY2FsLW1heC13aWR0aDtcbiAgbWFyZ2luOiB7XG4gICAgbGVmdDogYXV0bztcbiAgICByaWdodDogYXV0bztcbiAgfVxufVxuIiwiQGNoYXJzZXQgXCJVVEYtOFwiO1xuXG4vLy8gUHJvdmlkZXMgYW4gZWFzeSB3YXkgdG8gaW5jbHVkZSBhIGNsZWFyZml4IGZvciBjb250YWluaW5nIGZsb2F0cy5cbi8vL1xuLy8vIEBsaW5rIGh0dHA6Ly9jc3Ntb2pvLmNvbS9sYXRlc3RfbmV3X2NsZWFyZml4X3NvX2Zhci9cbi8vL1xuLy8vIEBleGFtcGxlIHNjc3MgLSBVc2FnZVxuLy8vICAgLmVsZW1lbnQge1xuLy8vICAgICBAaW5jbHVkZSBjbGVhcmZpeDtcbi8vLyAgIH1cbi8vL1xuLy8vIEBleGFtcGxlIGNzcyAtIENTUyBPdXRwdXRcbi8vLyAgIC5lbGVtZW50OjphZnRlciB7XG4vLy8gICAgIGNsZWFyOiBib3RoO1xuLy8vICAgICBjb250ZW50OiBcIlwiO1xuLy8vICAgICBkaXNwbGF5OiB0YWJsZTtcbi8vLyAgIH1cblxuQG1peGluIGNsZWFyZml4IHtcbiAgJjo6YWZ0ZXIge1xuICAgIGNsZWFyOiBib3RoO1xuICAgIGNvbnRlbnQ6IFwiXCI7XG4gICAgZGlzcGxheTogdGFibGU7XG4gIH1cbn1cbiIsIkBjaGFyc2V0IFwiVVRGLThcIjtcblxuLy8vIFNwZWNpZmllcyB0aGUgbnVtYmVyIG9mIGNvbHVtbnMgYW4gZWxlbWVudCBzaG91bGQgc3Bhbi4gSWYgdGhlIHNlbGVjdG9yIGlzIG5lc3RlZCB0aGUgbnVtYmVyIG9mIGNvbHVtbnMgb2YgaXRzIHBhcmVudCBlbGVtZW50IHNob3VsZCBiZSBwYXNzZWQgYXMgYW4gYXJndW1lbnQgYXMgd2VsbC5cbi8vL1xuLy8vIEBwYXJhbSB7TGlzdH0gJHNwYW5cbi8vLyAgIEEgbGlzdCBjb250YWluaW5nIGAkY29sdW1uc2AsIHRoZSB1bml0bGVzcyBudW1iZXIgb2YgY29sdW1ucyB0aGUgZWxlbWVudCBzcGFucyAocmVxdWlyZWQpLCBhbmQgYCRjb250YWluZXItY29sdW1uc2AsIHRoZSBudW1iZXIgb2YgY29sdW1ucyB0aGUgcGFyZW50IGVsZW1lbnQgc3BhbnMgKG9wdGlvbmFsKS5cbi8vL1xuLy8vICAgSWYgb25seSBvbmUgdmFsdWUgaXMgcGFzc2VkLCBpdCBpcyBhc3N1bWVkIHRoYXQgaXQncyBgJGNvbHVtbnNgIGFuZCB0aGF0IHRoYXQgYCRjb250YWluZXItY29sdW1uc2AgaXMgZXF1YWwgdG8gYCRncmlkLWNvbHVtbnNgLCB0aGUgdG90YWwgbnVtYmVyIG9mIGNvbHVtbnMgaW4gdGhlIGdyaWQuXG4vLy9cbi8vLyAgIFRoZSB2YWx1ZXMgY2FuIGJlIHNlcGFyYXRlZCB3aXRoIGFueSBzdHJpbmcgc3VjaCBhcyBgb2ZgLCBgL2AsIGV0Yy5cbi8vL1xuLy8vICAgYCRjb2x1bW5zYCBhbHNvIGFjY2VwdHMgZGVjaW1hbHMgZm9yIHdoZW4gaXQncyBuZWNlc3NhcnkgdG8gYnJlYWsgb3V0IG9mIHRoZSBzdGFuZGFyZCBncmlkLiBFLmcuIFBhc3NpbmcgYDIuNGAgaW4gYSBzdGFuZGFyZCAxMiBjb2x1bW4gZ3JpZCB3aWxsIGRpdmlkZSB0aGUgcm93IGludG8gNSBjb2x1bW5zLlxuLy8vXG4vLy8gQHBhcmFtIHtTdHJpbmd9ICRkaXNwbGF5IFtibG9ja11cbi8vLyAgIFNldHMgdGhlIGRpc3BsYXkgcHJvcGVydHkgb2YgdGhlIGVsZW1lbnQuIEJ5IGRlZmF1bHQgaXQgc2V0cyB0aGUgZGlzcGxheSBwcm9wZXJ0IG9mIHRoZSBlbGVtZW50IHRvIGBibG9ja2AuXG4vLy9cbi8vLyAgIElmIHBhc3NlZCBgYmxvY2stY29sbGFwc2VgLCBpdCBhbHNvIHJlbW92ZXMgdGhlIG1hcmdpbiBndXR0ZXIgYnkgYWRkaW5nIGl0IHRvIHRoZSBlbGVtZW50IHdpZHRoLlxuLy8vXG4vLy8gICBJZiBwYXNzZWQgYHRhYmxlYCwgaXQgc2V0cyB0aGUgZGlzcGxheSBwcm9wZXJ0eSB0byBgdGFibGUtY2VsbGAgYW5kIGNhbGN1bGF0ZXMgdGhlIHdpZHRoIG9mIHRoZSBlbGVtZW50IHdpdGhvdXQgdGFraW5nIGd1dHRlcnMgaW50byBjb25zaWRlcmF0aW9uLiBUaGUgcmVzdWx0IGRvZXMgbm90IGFsaWduIHdpdGggdGhlIGJsb2NrLWJhc2VkIGdyaWQuXG4vLy9cbi8vLyBAZXhhbXBsZSBzY3NzIC0gVXNhZ2Vcbi8vLyAgIC5lbGVtZW50IHtcbi8vLyAgICAgQGluY2x1ZGUgc3Bhbi1jb2x1bW5zKDYpO1xuLy8vXG4vLy8gICAgLm5lc3RlZC1lbGVtZW50IHtcbi8vLyAgICAgIEBpbmNsdWRlIHNwYW4tY29sdW1ucygyIG9mIDYpO1xuLy8vICAgIH1cbi8vLyAgfVxuLy8vXG4vLy8gQGV4YW1wbGUgY3NzIC0gQ1NTIE91dHB1dFxuLy8vICAgLmVsZW1lbnQge1xuLy8vICAgICBkaXNwbGF5OiBibG9jaztcbi8vLyAgICAgZmxvYXQ6IGxlZnQ7XG4vLy8gICAgIG1hcmdpbi1yaWdodDogMi4zNTc2NSU7XG4vLy8gICAgIHdpZHRoOiA0OC44MjExNyU7XG4vLy8gICB9XG4vLy9cbi8vLyAgIC5lbGVtZW50Omxhc3QtY2hpbGQge1xuLy8vICAgICBtYXJnaW4tcmlnaHQ6IDA7XG4vLy8gICB9XG4vLy9cbi8vLyAgIC5lbGVtZW50IC5uZXN0ZWQtZWxlbWVudCB7XG4vLy8gICAgIGRpc3BsYXk6IGJsb2NrO1xuLy8vICAgICBmbG9hdDogbGVmdDtcbi8vLyAgICAgbWFyZ2luLXJpZ2h0OiA0LjgyOTE2JTtcbi8vLyAgICAgd2lkdGg6IDMwLjExMzg5JTtcbi8vLyAgIH1cbi8vL1xuLy8vICAgLmVsZW1lbnQgLm5lc3RlZC1lbGVtZW50Omxhc3QtY2hpbGQge1xuLy8vICAgICBtYXJnaW4tcmlnaHQ6IDA7XG4vLy8gICB9XG5cbkBtaXhpbiBzcGFuLWNvbHVtbnMoJHNwYW46ICRjb2x1bW5zIG9mICRjb250YWluZXItY29sdW1ucywgJGRpc3BsYXk6IGJsb2NrKSB7XG4gICRjb2x1bW5zOiBudGgoJHNwYW4sIDEpO1xuICAkY29udGFpbmVyLWNvbHVtbnM6IGNvbnRhaW5lci1zcGFuKCRzcGFuKTtcblxuICAkcGFyZW50LWNvbHVtbnM6IGdldC1wYXJlbnQtY29sdW1ucygkY29udGFpbmVyLWNvbHVtbnMpICFnbG9iYWw7XG5cbiAgJGRpcmVjdGlvbjogZ2V0LWRpcmVjdGlvbigkbGF5b3V0LWRpcmVjdGlvbiwgJGRlZmF1bHQtbGF5b3V0LWRpcmVjdGlvbik7XG4gICRvcHBvc2l0ZS1kaXJlY3Rpb246IGdldC1vcHBvc2l0ZS1kaXJlY3Rpb24oJGRpcmVjdGlvbik7XG5cbiAgJGRpc3BsYXktdGFibGU6IGlzLWRpc3BsYXktdGFibGUoJGNvbnRhaW5lci1kaXNwbGF5LXRhYmxlLCAkZGlzcGxheSk7XG5cbiAgQGlmICRkaXNwbGF5LXRhYmxlICB7XG4gICAgZGlzcGxheTogdGFibGUtY2VsbDtcbiAgICB3aWR0aDogcGVyY2VudGFnZSgkY29sdW1ucyAvICRjb250YWluZXItY29sdW1ucyk7XG4gIH0gQGVsc2Uge1xuICAgIGZsb2F0OiAjeyRvcHBvc2l0ZS1kaXJlY3Rpb259O1xuXG4gICAgQGlmICRkaXNwbGF5ICE9IG5vLWRpc3BsYXkge1xuICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgfVxuXG4gICAgQGlmICRkaXNwbGF5ID09IGNvbGxhcHNlIHtcbiAgICAgIEBpbmNsdWRlIC1uZWF0LXdhcm4oXCJUaGUgJ2NvbGxhcHNlJyBhcmd1bWVudCB3aWxsIGJlIGRlcHJlY2F0ZWQuIFVzZSAnYmxvY2stY29sbGFwc2UnIGluc3RlYWQuXCIpO1xuICAgIH1cblxuICAgIEBpZiAkZGlzcGxheSA9PSBjb2xsYXBzZSBvciAkZGlzcGxheSA9PSBibG9jay1jb2xsYXBzZSB7XG4gICAgICB3aWR0aDogZmxleC1ncmlkKCRjb2x1bW5zLCAkY29udGFpbmVyLWNvbHVtbnMpICsgZmxleC1ndXR0ZXIoJGNvbnRhaW5lci1jb2x1bW5zKTtcblxuICAgICAgJjpsYXN0LWNoaWxkIHtcbiAgICAgICAgd2lkdGg6IGZsZXgtZ3JpZCgkY29sdW1ucywgJGNvbnRhaW5lci1jb2x1bW5zKTtcbiAgICAgIH1cblxuICAgIH0gQGVsc2Uge1xuICAgICAgbWFyZ2luLSN7JGRpcmVjdGlvbn06IGZsZXgtZ3V0dGVyKCRjb250YWluZXItY29sdW1ucyk7XG4gICAgICB3aWR0aDogZmxleC1ncmlkKCRjb2x1bW5zLCAkY29udGFpbmVyLWNvbHVtbnMpO1xuXG4gICAgICAmOmxhc3QtY2hpbGQge1xuICAgICAgICBtYXJnaW4tI3skZGlyZWN0aW9ufTogMDtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiIsIiRwYXJlbnQtY29sdW1uczogJGdyaWQtY29sdW1ucyAhZGVmYXVsdDtcbiRmZy1jb2x1bW46ICRjb2x1bW47XG4kZmctZ3V0dGVyOiAkZ3V0dGVyO1xuJGZnLW1heC1jb2x1bW5zOiAkZ3JpZC1jb2x1bW5zO1xuJGNvbnRhaW5lci1kaXNwbGF5LXRhYmxlOiBmYWxzZSAhZGVmYXVsdDtcbiRsYXlvdXQtZGlyZWN0aW9uOiBMVFIgIWRlZmF1bHQ7XG5cbkBmdW5jdGlvbiBmbGV4LWdyaWQoJGNvbHVtbnMsICRjb250YWluZXItY29sdW1uczogJGZnLW1heC1jb2x1bW5zKSB7XG4gICR3aWR0aDogJGNvbHVtbnMgKiAkZmctY29sdW1uICsgKCRjb2x1bW5zIC0gMSkgKiAkZmctZ3V0dGVyO1xuICAkY29udGFpbmVyLXdpZHRoOiAkY29udGFpbmVyLWNvbHVtbnMgKiAkZmctY29sdW1uICsgKCRjb250YWluZXItY29sdW1ucyAtIDEpICogJGZnLWd1dHRlcjtcbiAgQHJldHVybiBwZXJjZW50YWdlKCR3aWR0aCAvICRjb250YWluZXItd2lkdGgpO1xufVxuXG5AZnVuY3Rpb24gZmxleC1ndXR0ZXIoJGNvbnRhaW5lci1jb2x1bW5zOiAkZmctbWF4LWNvbHVtbnMsICRndXR0ZXI6ICRmZy1ndXR0ZXIpIHtcbiAgJGNvbnRhaW5lci13aWR0aDogJGNvbnRhaW5lci1jb2x1bW5zICogJGZnLWNvbHVtbiArICgkY29udGFpbmVyLWNvbHVtbnMgLSAxKSAqICRmZy1ndXR0ZXI7XG4gIEByZXR1cm4gcGVyY2VudGFnZSgkZ3V0dGVyIC8gJGNvbnRhaW5lci13aWR0aCk7XG59XG5cbkBmdW5jdGlvbiBncmlkLXdpZHRoKCRuKSB7XG4gIEByZXR1cm4gJG4gKiAkZ3ctY29sdW1uICsgKCRuIC0gMSkgKiAkZ3ctZ3V0dGVyO1xufVxuXG5AZnVuY3Rpb24gZ2V0LXBhcmVudC1jb2x1bW5zKCRjb2x1bW5zKSB7XG4gIEBpZiAkY29sdW1ucyAhPSAkZ3JpZC1jb2x1bW5zIHtcbiAgICAkcGFyZW50LWNvbHVtbnM6ICRjb2x1bW5zICFnbG9iYWw7XG4gIH0gQGVsc2Uge1xuICAgICRwYXJlbnQtY29sdW1uczogJGdyaWQtY29sdW1ucyAhZ2xvYmFsO1xuICB9XG5cbiAgQHJldHVybiAkcGFyZW50LWNvbHVtbnM7XG59XG5cbkBmdW5jdGlvbiBpcy1kaXNwbGF5LXRhYmxlKCRjb250YWluZXItaXMtZGlzcGxheS10YWJsZSwgJGRpc3BsYXkpIHtcbiAgQHJldHVybiAkY29udGFpbmVyLWlzLWRpc3BsYXktdGFibGUgPT0gdHJ1ZSBvciAkZGlzcGxheSA9PSB0YWJsZTtcbn1cbiIsIi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBUaGlzIGZpbGUgY29udGFpbnMgYWxsIHN0eWxlcyByZWxhdGVkIHRvIHRoZSBmb290ZXIgb2YgdGhlIHNpdGUvYXBwbGljYXRpb24uXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5ib2R5IGZvb3RlciB7XG5cdGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCh0byBib3R0b20sICMxODE4MTggMCUsICMzNDM0MzQgMTAwJSk7IC8qIFczQyAqL1xuXHRjb2xvcjogd2hpdGU7XG5cdHBhZGRpbmc6IDIwcHggMDtcblx0dGV4dC1hbGlnbjogY2VudGVyO1xufVxuIiwiLm5hdi1jb250YWluZXIge1xuXHRAaW5jbHVkZSBvdXRlci1jb250YWluZXI7XG59XG5cbmhlYWRlciBuYXYge1xuXHRiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQodG8gYm90dG9tLCAjN2Q3ZTdkIDAlLCMwZTBlMGUgMTAwJSk7IC8qIFczQyAqL1xuXHR3aWR0aDogMTAwJTtcblx0ZGlzcGxheTogaW5saW5lLWJsb2NrO1xuXHRhIHtcblx0XHRkaXNwbGF5OmJsb2NrO1xuXHRcdGNvbG9yOndoaXRlO1xuXHRcdGZvbnQtd2VpZ2h0OmJvbGQ7XG5cdFx0Jjpob3ZlciB7XG5cdFx0XHR0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTtcblx0XHR9XG5cdFx0Jjpob3ZlciwgJjp2aXNpdGVkIHtcblx0XHRcdGNvbG9yOndoaXRlO1xuXHRcdH1cblx0fVxuXHR1bCB7XG5cdFx0bGlzdC1zdHlsZS10eXBlOiBub25lO1xuXHRcdGRpc3BsYXk6IGlubGluZS1ibG9jaztcblx0XHRtYXJnaW46IDA7XG5cdFx0cGFkZGluZzogMDtcblx0fVxuXHRsaSB7XG5cdFx0ZmxvYXQ6IGxlZnQ7XG5cdFx0cGFkZGluZzogMC4zZW0gMC42ZW07XG5cdFx0Y29sb3I6IHdoaXRlO1xuXHRcdGJvcmRlci1sZWZ0OiAxcHggc29saWQgIzY3NjA2MDtcblx0XHRib3JkZXItcmlnaHQ6IDFweCBzb2xpZCAjMjMxRTFFO1xuXHRcdGZvbnQtZmFtaWx5OiBhcmlhbDtcblx0XHRmb250LXdlaWdodDogYm9sZDtcblx0XHRmb250LXNpemU6IDEuMWVtO1xuXHRcdCY6Zmlyc3QtY2hpbGQge1xuXHRcdFx0Ym9yZGVyLWxlZnQ6IG5vbmU7XG5cdFx0fVxuXHRcdCY6bGFzdC1jaGlsZCB7XG5cdFx0XHRib3JkZXItcmlnaHQ6IG5vbmU7XG5cdFx0fVxuXHR9XG59XG5cbmZvb3RlciBuYXYge1xuXHRkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG5cdGEge1xuXHRcdGNvbG9yOndoaXRlO1xuXHRcdCY6aG92ZXIge1xuXHRcdFx0dGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7XG5cdFx0fVxuXHRcdCY6aG92ZXIsICY6dmlzaXRlZCB7XG5cdFx0XHRjb2xvcjp3aGl0ZTtcblx0XHR9XG5cdH1cblx0dWwge1xuXHRcdGxpc3Qtc3R5bGUtdHlwZTogbm9uZTtcblx0XHRtYXJnaW46IDA7XG5cdFx0cGFkZGluZzogMDtcblx0fVxuXHRsaSB7XG5cdFx0ZmxvYXQ6IGxlZnQ7XG5cdFx0cGFkZGluZzogMC4zZW0gMC42ZW07XG5cdFx0Y29sb3I6IHdoaXRlO1xuXHRcdGZvbnQtZmFtaWx5OiBhcmlhbDtcblx0fVx0XG59XG4iLCJmb3JtIHtcblx0d2lkdGg6IDEwMCU7XG59XG4jc2VhcmNoIGlucHV0W3R5cGU9XCJ0ZXh0XCJdIHtcblx0Ym9yZGVyLXJhZGl1czogMC41ZXggMCAwIDAuNWV4O1xuXHRib3JkZXI6IDA7XG5cdG1hcmdpbjogMDtcblx0LW1vei1ib3gtc2hhZG93OiBpbnNldCAtNXB4IC01cHggNXB4IDVweCAjYWFhO1xuXHQtd2Via2l0LWJveC1zaGFkb3c6IGluc2V0IC01cHggLTVweCA1cHggNXB4ICNhYWE7XG5cdGJveC1zaGFkb3c6IGluc2V0IDAuNWV4IDAuNWV4IDAuMjVleCAwZXggI2FhYTtcblx0ZmxvYXQ6IGxlZnQ7XG5cdHBhZGRpbmc6IDEwcHg7XG59XG4jc2VhcmNoIGlucHV0W3R5cGU9XCJzdWJtaXRcIl0geyBcblx0Ym9yZGVyLXJhZGl1czogMCAwLjVleCAwLjVleCAwO1xuXHRiYWNrZ3JvdW5kLWNvbG9yOiAjQUQxRTFFO1xuXHRjb2xvcjogd2hpdGU7XG5cdGJvcmRlcjogMDtcblx0ZmxvYXQ6IGxlZnQ7XG5cdHBhZGRpbmc6IDEwcHg7XG59XG5cbiIsIm1haW4gYXNpZGUge1xuXHRAaW5jbHVkZSBzcGFuLWNvbHVtbnMoNCBvZiAxMik7XG5cdEBpbmNsdWRlIHNoaWZ0KDEgb2YgMTIpO1xufVxuIiwiQGNoYXJzZXQgXCJVVEYtOFwiO1xuXG4vLy8gVHJhbnNsYXRlcyBhbiBlbGVtZW50IGhvcml6b250YWxseSBieSBhIG51bWJlciBvZiBjb2x1bW5zLiBQb3NpdGl2ZSBhcmd1bWVudHMgc2hpZnQgdGhlIGVsZW1lbnQgdG8gdGhlIGFjdGl2ZSBsYXlvdXQgZGlyZWN0aW9uLCB3aGlsZSBuZWdhdGl2ZSBvbmVzIHNoaWZ0IGl0IHRvIHRoZSBvcHBvc2l0ZSBkaXJlY3Rpb24uXG4vLy9cbi8vLyBAcGFyYW0ge051bWJlciAodW5pdGxlc3MpfSAkbi1jb2x1bW5zIFsxXVxuLy8vICAgTnVtYmVyIG9mIGNvbHVtbnMgYnkgd2hpY2ggdGhlIGVsZW1lbnQgc2hpZnRzLlxuLy8vXG4vLy8gQGV4YW1wbGUgc2NzcyAtIFVzYWdlXG4vLy8gICAuZWxlbWVudCB7XG4vLy8gICAgIEBpbmNsdWRlIHNoaWZ0KC0zKTtcbi8vLyAgIH1cbi8vL1xuLy8vIEBleGFtcGxlIGNzcyAtIENTUyBvdXRwdXRcbi8vLyAgIC5lbGVtZW50IHtcbi8vLyAgICAgbWFyZ2luLWxlZnQ6IC0yNS41ODk0MSU7XG4vLy8gICB9XG5cbkBtaXhpbiBzaGlmdCgkbi1jb2x1bW5zOiAxKSB7XG4gIEBpbmNsdWRlIHNoaWZ0LWluLWNvbnRleHQoJG4tY29sdW1ucyk7XG59XG5cbi8vLyBUcmFuc2xhdGVzIGFuIGVsZW1lbnQgaG9yaXpvbnRhbGx5IGJ5IGEgbnVtYmVyIG9mIGNvbHVtbnMsIGluIGEgc3BlY2lmaWMgbmVzdGluZyBjb250ZXh0LlxuLy8vXG4vLy8gQHBhcmFtIHtMaXN0fSAkc2hpZnRcbi8vLyAgIEEgbGlzdCBjb250YWluaW5nIHRoZSBudW1iZXIgb2YgY29sdW1ucyB0byBzaGlmdCAoYCRjb2x1bW5zYCkgYW5kIHRoZSBudW1iZXIgb2YgY29sdW1ucyBvZiB0aGUgcGFyZW50IGVsZW1lbnQgKGAkY29udGFpbmVyLWNvbHVtbnNgKS5cbi8vL1xuLy8vICAgVGhlIHR3byB2YWx1ZXMgY2FuIGJlIHNlcGFyYXRlZCB3aXRoIGFueSBzdHJpbmcgc3VjaCBhcyBgb2ZgLCBgL2AsIGV0Yy5cbi8vL1xuLy8vIEBleGFtcGxlIHNjc3MgLSBVc2FnZVxuLy8vICAgLmVsZW1lbnQge1xuLy8vICAgICBAaW5jbHVkZSBzaGlmdCgtMyBvZiA2KTtcbi8vLyAgIH1cbi8vL1xuLy8vIEBleGFtcGxlIGNzcyAtIENTUyBvdXRwdXRcbi8vLyAgIC5lbGVtZW50IHtcbi8vLyAgICAgbWFyZ2luLWxlZnQ6IC01Mi40MTQ1OCU7XG4vLy8gICB9XG5cbkBtaXhpbiBzaGlmdC1pbi1jb250ZXh0KCRzaGlmdDogJGNvbHVtbnMgb2YgJGNvbnRhaW5lci1jb2x1bW5zKSB7XG4gICRuLWNvbHVtbnM6IG50aCgkc2hpZnQsIDEpO1xuICAkcGFyZW50LWNvbHVtbnM6IGNvbnRhaW5lci1zaGlmdCgkc2hpZnQpICFnbG9iYWw7XG5cbiAgJGRpcmVjdGlvbjogZ2V0LWRpcmVjdGlvbigkbGF5b3V0LWRpcmVjdGlvbiwgJGRlZmF1bHQtbGF5b3V0LWRpcmVjdGlvbik7XG4gICRvcHBvc2l0ZS1kaXJlY3Rpb246IGdldC1vcHBvc2l0ZS1kaXJlY3Rpb24oJGRpcmVjdGlvbik7XG5cbiAgbWFyZ2luLSN7JG9wcG9zaXRlLWRpcmVjdGlvbn06ICRuLWNvbHVtbnMgKiBmbGV4LWdyaWQoMSwgJHBhcmVudC1jb2x1bW5zKSArICRuLWNvbHVtbnMgKiBmbGV4LWd1dHRlcigkcGFyZW50LWNvbHVtbnMpO1xuXG4gIC8vIFJlc2V0IG5lc3RpbmcgY29udGV4dFxuICAkcGFyZW50LWNvbHVtbnM6ICRncmlkLWNvbHVtbnMgIWdsb2JhbDtcbn1cbiIsIi8qaHRtbCB7Ki9cblx0LypiYWNrZ3JvdW5kLWNvbG9yOiAjRjZGNkY3OyovXG4vKn0qL1xuXG5ib2R5IHtcblx0YmFja2dyb3VuZC1jb2xvcjogJGJhY2tncm91bmQtY29sb3I7XG5cdGJveC1zaGFkb3c6IDAgMCAxMHB4IHJnYmEoNzYsIDc2LCA3NiwgMC43KTtcbn1cblxuYm9keSBtYWluIHtcblx0QGluY2x1ZGUgb3V0ZXItY29udGFpbmVyO1xuXHRtYXJnaW4tdG9wOiAxcHg7XG59XG5cbiNhZHMge1xuXHRpbWcge1xuXHRcdEBpbmNsdWRlIHNwYW4tY29sdW1ucyg0IG9mIDEyKTtcblx0fVxufVxuXG4jbmV3cyB7XG5cdEBpbmNsdWRlIHNwYW4tY29sdW1ucygxMik7XG5cdHVsIHtcblx0XHRsaXN0LXN0eWxlOiBub25lO1xuXHRcdHBhZGRpbmc6IDA7XG5cdH1cblx0bGkge1xuXHRcdEBpbmNsdWRlIHNwYW4tY29sdW1ucyg0IG9mIDEyKTtcblx0XHRtYXJnaW4tdG9wOiAzMHB4O1xuXHR9XG5cdGxpOm50aC1jaGlsZCgzbikge1xuXHRcdG1hcmdpbi1yaWdodDogMDtcblx0fVxuXHRhcnRpY2xlIHtcblx0XHRwb3NpdGlvbjogcmVsYXRpdmU7XG5cdFx0bWF4LWhlaWdodDogNDAwcHg7XG5cdFx0b3ZlcmZsb3c6IGhpZGRlbjtcblx0XHR0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcblxuXHRcdGltZyB7XG5cdFx0XHR3aWR0aDogMTAwJTtcblx0XHR9XG5cdH1cblx0aGVhZGVyIHtcblx0XHRoZWlnaHQ6IDIwMHB4O1xuXHR9XG5cdHNlY3Rpb246YWZ0ZXIge1xuXHRcdGNvbnRlbnQ6IFwiXCI7XG5cdFx0aGVpZ2h0OjIwMHB4O1xuXHRcdHdpZHRoOjEwMCU7XG5cdFx0cG9zaXRpb246IGFic29sdXRlO1xuXHRcdGxlZnQ6IDA7XG5cdFx0Ym90dG9tOiAwO1xuXHRcdGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCh0cmFuc3BhcmVudCA1MCUsICRiYWNrZ3JvdW5kLWNvbG9yKTtcblx0fVxuXHRhIHtcblx0XHRjb2xvcjogYmxhY2s7XG5cdH1cbn1cblxuLm5ld3Mge1xuXHRAaW5jbHVkZSBzcGFuLWNvbHVtbnMoMTIpO1xuXHR1bCB7XG5cdFx0bGlzdC1zdHlsZTogbm9uZTtcblx0XHRwYWRkaW5nOiAwO1xuXHR9XG5cdGxpIHtcblx0XHRAaW5jbHVkZSBzcGFuLWNvbHVtbnMoNCBvZiAxMik7XG5cdFx0bWFyZ2luLXRvcDogMzBweDtcblx0fVxuXHRsaTpudGgtY2hpbGQoM24pIHtcblx0XHRtYXJnaW4tcmlnaHQ6IDA7XG5cdH1cblx0YXJ0aWNsZSB7XG5cdFx0cG9zaXRpb246IHJlbGF0aXZlO1xuXHRcdG1heC1oZWlnaHQ6IDQwMHB4O1xuXHRcdG92ZXJmbG93OiBoaWRkZW47XG5cdFx0dGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XG5cblx0XHRpbWcge1xuXHRcdFx0d2lkdGg6IDEwMCU7XG5cdFx0fVxuXHR9XG5cdGhlYWRlciB7XG5cdFx0aGVpZ2h0OiAyMDBweDtcblx0fVxuXHRzZWN0aW9uOmFmdGVyIHtcblx0XHRjb250ZW50OiBcIlwiO1xuXHRcdGhlaWdodDoyMDBweDtcblx0XHR3aWR0aDoxMDAlO1xuXHRcdHBvc2l0aW9uOiBhYnNvbHV0ZTtcblx0XHRsZWZ0OiAwO1xuXHRcdGJvdHRvbTogMDtcblx0XHRiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQodHJhbnNwYXJlbnQgNTAlLCAkYmFja2dyb3VuZC1jb2xvcik7XG5cdH1cblx0YSB7XG5cdFx0Y29sb3I6IGJsYWNrO1xuXHR9XG59XG5cbiIsIi5icm93c2VydXBncmFkZSB7XG4gICAgbWFyZ2luOiAwLjJlbSAwO1xuICAgIGJhY2tncm91bmQ6ICNjY2M7XG4gICAgY29sb3I6ICMwMDA7XG4gICAgcGFkZGluZzogMC4yZW0gMDtcbn1cbiIsIi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBUaGlzIGZpbGUgY29udGFpbnMgc3R5bGVzIHRoYXQgYXJlIHNwZWNpZmljIHRvIHRoZSBob21lIHBhZ2UuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5vbCB7XG5cdD4gbGkge1xuXHRcdGJhY2tncm91bmQtY29sb3I6IEY0RjVGNztcblx0XHRAaW5jbHVkZSBiYWNrZ3JvdW5kLWltYWdlKCBsaW5lYXItZ3JhZGllbnQodG8gbGVmdCwgI0ZGRiwgI0Y0RjVGNykgKTtcblx0XHRmbG9hdDogbGVmdDtcblx0XHRmb250LWZhbWlseTogJGx1Y2lkYS1ncmFuZGU7XG5cdFx0cG9zaXRpb246IHJlbGF0aXZlO1xuXHRcdEBpbmNsdWRlIHRyYW5zaXRpb24oIGFsbCAwLjhzICk7XG5cblx0XHQmOjphZnRlciB7XG5cdFx0XHRjb250ZW50OiBcIiBcIjtcblx0XHRcdGhlaWdodDogMjNweDtcblx0XHRcdEBpbmNsdWRlIHBvc2l0aW9uKCBhYnNvbHV0ZSwgMTBweCAtMTNweCAwIDAgKTtcblx0XHRcdEBpbmNsdWRlIHRyYW5zZm9ybSggcm90YXRlKDQ1ZGVnKSBza2V3KDIwZGVnLCAzMGRlZykgKTtcblx0XHRcdHdpZHRoOiAyM3B4O1xuXHRcdH1cblx0fVxufVxuXG4ucGFyZW50IHtcbiAgQGluY2x1ZGUgYWxpZ24taXRlbXMoc3RyZXRjaCk7XG4gIEBpbmNsdWRlIGRpc3BsYXkoZmxleCk7XG4gIEBpbmNsdWRlIGZsZXgtZGlyZWN0aW9uKHJvdyk7XG4gIEBpbmNsdWRlIGp1c3RpZnktY29udGVudChmbGV4LXN0YXJ0KTtcbn1cblxuLnBhcmVudCA+IC5jaGlsZCB7XG4gIEBpbmNsdWRlIGZsZXgoMSk7XG59XG5cbiNtYWluLW5ld3Mge1xuXHRhcnRpY2xlIHtcblx0XHRmb250LWZhbWlseTogQWRlbGxlLCBHZW9yZ2lhLCBzZXJpZjtcblx0XHRwYWRkaW5nOiAxMHB4O1xuXHRcdGZvbnQtc2l6ZTogMjBweDtcblx0XHRwb3NpdGlvbjogcmVsYXRpdmU7XG5cdFx0QGluY2x1ZGUgc3Bhbi1jb2x1bW5zKDYgb2YgMTIpO1xuXHRcdG1hcmdpbi1yaWdodDogMDtcblx0XHR3aWR0aDogNTAlO1xuXHRcdGhlaWdodDogKCRtYXgtd2lkdGggLyAyKSAqICg5IC8gMTYpOyAvKiAxNjo5IHJhdGlvICovXG5cdFx0YmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KDEzNWRlZywgcmdiYSgjNDE3NzExLCAwLjcpLCByZ2JhKCNkYzQyMjUsIDAuNykpO1xuXHRcdGNvbG9yOiB3aGl0ZTtcblx0XHRoZWFkZXIge1xuXHRcdFx0cG9zaXRpb246IGFic29sdXRlO1xuXHRcdFx0dG9wOiAwO1xuXHRcdH1cblx0XHRzZWN0aW9uIHtcblx0XHRcdHBvc2l0aW9uOiBhYnNvbHV0ZTtcblx0XHRcdGJvdHRvbTogMDtcblx0XHR9XG5cdFx0aW1nIHtcblx0XHRcdHotaW5kZXg6IC0xO1xuXHRcdFx0bGVmdDogMDtcblx0XHRcdHRvcDogMDtcblx0XHRcdHBvc2l0aW9uOiBhYnNvbHV0ZTtcblx0XHRcdC8qbWFyZ2luOiBhdXRvOyovXG5cdFx0XHRoZWlnaHQ6IDEwMCU7XG5cdFx0XHQvKm1heC1oZWlnaHQ6IDEwMCU7Ki9cblx0XHRcdHdpZHRoOiAxMDAlO1xuXHRcdFx0LyptYXgtd2lkdGg6IDEwMCU7Ki9cblx0XHR9XG5cdH1cbn1cblxuXG4jc2hvd3Mge1xuXHRAaW5jbHVkZSBzcGFuLWNvbHVtbnMoOSBvZiAxMik7XG5cdHVsIHtcblx0XHRsaXN0LXN0eWxlOiBub25lO1xuXHRcdHBhZGRpbmc6IDA7XG5cdH1cblx0bGkge1xuXHRcdEBpbmNsdWRlIHNwYW4tY29sdW1ucygzIG9mIDkpO1xuXHRcdG1hcmdpbi10b3A6IDMwcHg7XG5cdH1cblx0bGk6bnRoLWNoaWxkKDNuKSB7XG5cdFx0bWFyZ2luLXJpZ2h0OiAwO1xuXHR9XG5cdGFydGljbGUge1xuXHRcdHBvc2l0aW9uOiByZWxhdGl2ZTtcblx0XHRtYXgtaGVpZ2h0OiA0MDBweDtcblx0XHRvdmVyZmxvdzogaGlkZGVuO1xuXHRcdHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xuXG5cdFx0aW1nIHtcblx0XHRcdHdpZHRoOiAxMDAlO1xuXHRcdH1cblx0fVxuXHRoZWFkZXIge1xuXHRcdGhlaWdodDogMjAwcHg7XG5cdH1cblx0c2VjdGlvbjphZnRlciB7XG5cdFx0Y29udGVudDogXCJcIjtcblx0XHRoZWlnaHQ6MjAwcHg7XG5cdFx0d2lkdGg6MTAwJTtcblx0XHRwb3NpdGlvbjogYWJzb2x1dGU7XG5cdFx0bGVmdDogMDtcblx0XHRib3R0b206IDA7XG5cdFx0YmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KHRyYW5zcGFyZW50IDUwJSwgJGJhY2tncm91bmQtY29sb3IpO1xuXHR9XG5cdGEge1xuXHRcdGNvbG9yOiBibGFjaztcblx0fVxufVxuXG4jc2hvd3Mge1xuXHRtYXJnaW46IDA7XG5cdHBhZGRpbmc6IDA7XG59XG5cbiNzaG93cyB1bCB7XG5cdGxpc3Qtc3R5bGU6IG5vbmU7XG5cdG1hcmdpbjogMDtcblx0cGFkZGluZzogMDtcblx0dGV4dC1hbGlnbjogY2VudGVyO1xufVxuI3Nob3dzIGxpIHtcblx0b3ZlcmZsb3c6IGhpZGRlbjtcblx0bWFyZ2luLXJpZ2h0OiAxMHB4O1xuXHRtYXJnaW4tdG9wOiAwO1xuXHRtYXJnaW4tYm90dG9tOiAxMHB4O1xuXHRwYWRkaW5nOiAwO1xufVxuI3Nob3dzIGxpIGgzIHtcblx0Ym9yZGVyLXJhZGl1czogMHB4IDBweCA1cHggNXB4O1xuXHRtYXJnaW46IDA7XG5cdHRleHQtYWxpZ246IGNlbnRlcjtcdFxuXHRoZWlnaHQ6IDE1JTtcbn1cbiNtZWppYm8geyBiYWNrZ3JvdW5kLWNvbG9yOiAjQ0QyMEJFOyB9XG4jc2FudGEtcm9ja3NhbGlhIHsgYmFja2dyb3VuZC1jb2xvcjogI0Y5QTQzMzsgfVxuI3RpdHVsYXJlcy1zcG9ydCB7IGJhY2tncm91bmQtY29sb3I6ICM3OEM4MkM7IGZvbnQtc2l6ZTogMWVtOyB9XG4jc29uaWNvLWphcmRpbiB7IGJhY2tncm91bmQtY29sb3I6ICMzODlCQzk7IGZvbnQtc2l6ZTogMC44ZW07IH1cbiNzb25hbmRvLWRpYXJpbyB7IGJhY2tncm91bmQtY29sb3I6ICNCQzMwMTc7IH1cblxuI3VzdHJlYW0ge1xuXHRAaW5jbHVkZSBzcGFuLWNvbHVtbnMoMyBvZiAxMik7XG59XG5cbi5vbGQtbmV3cyAudmlld3MtZmllbGQtdGl0bGUsICNzaG93cyAudGV4dC1jb250YWluZXIge1xuICAgIGJhY2tncm91bmQ6IHJnYigzNywgMzAsIDI4KTtcbiAgICBiYWNrZ3JvdW5kOiByZ2JhKDM3LCAzMCwgMjgsIDAuOSk7XG4gICAgZmlsdGVyOiBwcm9naWQ6RFhJbWFnZVRyYW5zZm9ybS5NaWNyb3NvZnQuZ3JhZGllbnQoc3RhcnRDb2xvcnN0cj0jRTUyNTFFMUMsIGVuZENvbG9yc3RyPSNFNTI1MUUxQyk7XG4gICAgLW1zLWZpbHRlcjogXCJwcm9naWQ6RFhJbWFnZVRyYW5zZm9ybS5NaWNyb3NvZnQuZ3JhZGllbnQoc3RhcnRDb2xvcnN0cj0jRTUyNTFFMUMsIGVuZENvbG9yc3RyPSNFNTI1MUUxQylcIjtcbn1cbi5pZTYtOCAub2xkLW5ld3MgLnZpZXdzLWZpZWxkLXRpdGxlLCAuaWU2LTggI3Nob3dzIC50ZXh0LWNvbnRhaW5lciB7XG4gICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XG59XG4uaWU2IC5vbGQtbmV3cyAudmlld3MtZmllbGQtZmllbGQtaW1hZ2Uge1xuICAgIGZsb2F0OiBsZWZ0O1xufVxuXG4jc2hvd3MgLm91dGVyLWNvbnRhaW5lciB7XG4gICAgYm9yZGVyLXJhZGl1czogNXB4O1xuICAgIGJvcmRlcjogMXB4IHNvbGlkIGJsYWNrO1xuICAgIGJveC1zaGFkb3c6IDBweCAxMHB4IDEwcHggI2NjYztcbn1cbiNzaG93cyAuY29udGFpbmVyIHtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xufVxuI3Nob3dzIC50ZXh0LWNvbnRhaW5lciB7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIGJvdHRvbTogMDtcblx0bGVmdDogMDtcbiAgICBjb2xvcjogd2hpdGU7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgZm9udC1zaXplOiAxZW07XG59XG4jc2hvd3MgLmZpZWxkLWNvbnRlbnQge1xuXG4td2Via2l0LWZvbnQtc21vb3RoaW5nOiBhbnRpYWxpYXNlZDtcbmJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XG5jb2xvcjogcmdiKDI1NSwgMjU1LCAyNTUpO1xuZGlzcGxheTogYmxvY2s7XG5mb250LWZhbWlseTogJ1RyZWJ1Y2hldCBNUycsICdIZWx2ZXRpY2EgTmV1ZScsIEFyaWFsLCBIZWx2ZXRpY2EsIHNhbnMtc2VyaWY7XG5mb250LXNpemU6IDEzLjAwOHB4O1xuZm9udC13ZWlnaHQ6IGJvbGQ7XG5saW5lLWhlaWdodDogMTkuNTEycHg7XG50ZXh0LWFsaWduOiBjZW50ZXI7XG56b29tOiAxO1xufVxuXG4jc2hvd3MgcCB7XG4gICAgLyptYXJnaW4tdG9wOiAwZW07Ki9cbiAgICAvKm1hcmdpbi1ib3R0b206IDBlbTsqL1xuXG4td2Via2l0LWZvbnQtc21vb3RoaW5nOiBhbnRpYWxpYXNlZDtcbmJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XG5jb2xvcjogcmdiKDI1NSwgMjU1LCAyNTUpO1xuZGlzcGxheTogYmxvY2s7XG5mb250LWZhbWlseTogJ1RyZWJ1Y2hldCBNUycsICdIZWx2ZXRpY2EgTmV1ZScsIEFyaWFsLCBIZWx2ZXRpY2EsIHNhbnMtc2VyaWY7XG5mb250LXNpemU6IDEzLjAwOHB4O1xuaGVpZ2h0OiAxOXB4O1xubGluZS1oZWlnaHQ6IDE5LjUxMnB4O1xubWFyZ2luLWJvdHRvbTogMHB4O1xubWFyZ2luLXRvcDogMHB4O1xucGFkZGluZy1ib3R0b206IDBweDtcbnBhZGRpbmctbGVmdDogMHB4O1xucGFkZGluZy1yaWdodDogMHB4O1xucGFkZGluZy10b3A6IDBweDtcbnRleHQtYWxpZ246IGNlbnRlcjtcbndpZHRoOiAxNjFweDtcbnpvb206IDE7XG59XG5cbiNzaG93cyAudmlld3MtZmllbGQtZmllbGQtc2NoZWR1bGUge1xuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xufVxuI3Nob3dzIC52aWV3cy1maWVsZC1maWVsZC1kYXlzIHtcbiAgICBmb250LXdlaWdodDogYm9sZDtcbn1cbiNzaG93cyBpbWcge1xuICAgIGRpc3BsYXk6IGJsb2NrO1xufVxuI3Nob3dzIC52aWV3cy1maWVsZC10aXRsZSwgI3Nob3dzIC52aWV3cy1maWVsZC10aXRsZSBhIHtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgZm9udC1zaXplOiAxLjJlbTtcbiAgICBjb2xvcjogYmxhY2s7XG4gICAgdGV4dC1zaGFkb3c6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC45KSAwcHggM3B4IDNweDtcbiAgICBmb250LXdlaWdodDogYm9sZGVyO1xuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcblxuXG5cdC13ZWJraXQtZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkO1xuXHRib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlO1xuXHRjb2xvcjogcmdiKDAsIDAsIDApO1xuXHRkaXNwbGF5OiBibG9jaztcblx0Zm9udC1mYW1pbHk6ICdUcmVidWNoZXQgTVMnLCAnSGVsdmV0aWNhIE5ldWUnLCBBcmlhbCwgSGVsdmV0aWNhLCBzYW5zLXNlcmlmO1xuXHRmb250LXNpemU6IDE1LjYwOTZweDtcblx0Zm9udC13ZWlnaHQ6IGJvbGQ7XG5cdGhlaWdodDogMjMuNDA2MnB4O1xuXHRsaW5lLWhlaWdodDogMjMuNDE0NHB4O1xuXHR0ZXh0LWFsaWduOiBjZW50ZXI7XG5cdHRleHQtZGVjb3JhdGlvbjogbm9uZTtcblx0dGV4dC1zaGFkb3c6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC45MDE5NjEpIDBweCAzcHggM3B4O1xuXHR6b29tOiAxO1xufVxuI3Nob3dzIC52aWV3cy1maWVsZC10aXRsZSB7XG4gICAgaGVpZ2h0OiAxLjVlbTtcbn1cbiNzb25hbmRvLWRpYXJpbyB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI0JFMzExNztcbn1cbiNzYW50YS1yb2Nrc2FsaWEge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNGOUE0MzM7XG59XG4jc291bmQtZ2FyZGVuIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMzg5QkNBO1xuICAgIGZvbnQtc2l6ZTogMC45ZW07XG59XG4jdGl0dWxhcmVzLXNwb3J0IHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNzhDODJDO1xuICAgIGZvbnQtc2l6ZTogMS4xZW07XG59XG4jbWVqaWJvIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjQ0UyMUJGO1xufVxuXG4jc2lkZWJhciB7XG5cdEBpbmNsdWRlIHNwYW4tY29sdW1ucygzIG9mIDEyKTtcbn1cblxuIiwiLy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovL1xuLy8gQmFja2dyb3VuZC1pbWFnZSBwcm9wZXJ0eSBmb3IgYWRkaW5nIG11bHRpcGxlIGJhY2tncm91bmQgaW1hZ2VzIHdpdGhcbi8vIGdyYWRpZW50cywgb3IgZm9yIHN0cmluZ2luZyBtdWx0aXBsZSBncmFkaWVudHMgdG9nZXRoZXIuXG4vLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8vXG5cbkBtaXhpbiBiYWNrZ3JvdW5kLWltYWdlKCRpbWFnZXMuLi4pIHtcbiAgJHdlYmtpdC1pbWFnZXM6ICgpO1xuICAkc3BlYy1pbWFnZXM6ICgpO1xuXG4gIEBlYWNoICRpbWFnZSBpbiAkaW1hZ2VzIHtcbiAgICAkd2Via2l0LWltYWdlOiAoKTtcbiAgICAkc3BlYy1pbWFnZTogKCk7XG5cbiAgICBAaWYgKHR5cGUtb2YoJGltYWdlKSA9PSBzdHJpbmcpIHtcbiAgICAgICR1cmwtc3RyOiAgICAgICBzdHItc2xpY2UoJGltYWdlLCAxLCAzKTtcbiAgICAgICRncmFkaWVudC10eXBlOiBzdHItc2xpY2UoJGltYWdlLCAxLCA2KTtcblxuICAgICAgQGlmICR1cmwtc3RyID09IFwidXJsXCIge1xuICAgICAgICAkd2Via2l0LWltYWdlOiAkaW1hZ2U7XG4gICAgICAgICRzcGVjLWltYWdlOiAgICRpbWFnZTtcbiAgICAgIH1cblxuICAgICAgQGVsc2UgaWYgJGdyYWRpZW50LXR5cGUgPT0gXCJsaW5lYXJcIiB7XG4gICAgICAgICRncmFkaWVudHM6IF9saW5lYXItZ3JhZGllbnQtcGFyc2VyKCRpbWFnZSk7XG4gICAgICAgICR3ZWJraXQtaW1hZ2U6ICBtYXAtZ2V0KCRncmFkaWVudHMsIHdlYmtpdC1pbWFnZSk7XG4gICAgICAgICRzcGVjLWltYWdlOiAgICBtYXAtZ2V0KCRncmFkaWVudHMsIHNwZWMtaW1hZ2UpO1xuICAgICAgfVxuXG4gICAgICBAZWxzZSBpZiAkZ3JhZGllbnQtdHlwZSA9PSBcInJhZGlhbFwiIHtcbiAgICAgICAgJGdyYWRpZW50czogX3JhZGlhbC1ncmFkaWVudC1wYXJzZXIoJGltYWdlKTtcbiAgICAgICAgJHdlYmtpdC1pbWFnZTogbWFwLWdldCgkZ3JhZGllbnRzLCB3ZWJraXQtaW1hZ2UpO1xuICAgICAgICAkc3BlYy1pbWFnZTogICBtYXAtZ2V0KCRncmFkaWVudHMsIHNwZWMtaW1hZ2UpO1xuICAgICAgfVxuICAgIH1cblxuICAgICR3ZWJraXQtaW1hZ2VzOiBhcHBlbmQoJHdlYmtpdC1pbWFnZXMsICR3ZWJraXQtaW1hZ2UsIGNvbW1hKTtcbiAgICAkc3BlYy1pbWFnZXM6ICAgYXBwZW5kKCRzcGVjLWltYWdlcywgICAkc3BlYy1pbWFnZSwgICBjb21tYSk7XG4gIH1cblxuICBiYWNrZ3JvdW5kLWltYWdlOiAkd2Via2l0LWltYWdlcztcbiAgYmFja2dyb3VuZC1pbWFnZTogJHNwZWMtaW1hZ2VzO1xufVxuIiwiLy8gUHJpdmF0ZSBmdW5jdGlvbiBmb3IgbGluZWFyLWdyYWRpZW50LXBhcnNlclxuQGZ1bmN0aW9uIF9saW5lYXItc2lkZS1jb3JuZXItcGFyc2VyKCRpbWFnZSwgJGZpcnN0LXZhbCwgJHByZWZpeCwgJHN1ZmZpeCwgJGhhcy1tdWx0aXBsZS12YWxzKSB7XG4gICR2YWwtMTogc3RyLXNsaWNlKCRmaXJzdC12YWwsIDEsICRoYXMtbXVsdGlwbGUtdmFscyAtIDEpO1xuICAkdmFsLTI6IHN0ci1zbGljZSgkZmlyc3QtdmFsLCAkaGFzLW11bHRpcGxlLXZhbHMgKyAxLCBzdHItbGVuZ3RoKCRmaXJzdC12YWwpKTtcbiAgJHZhbC0zOiBudWxsO1xuICAkaGFzLXZhbC0zOiBzdHItaW5kZXgoJHZhbC0yLCBcIiBcIik7XG5cbiAgQGlmICRoYXMtdmFsLTMge1xuICAgICR2YWwtMzogc3RyLXNsaWNlKCR2YWwtMiwgJGhhcy12YWwtMyArIDEsIHN0ci1sZW5ndGgoJHZhbC0yKSk7XG4gICAgJHZhbC0yOiBzdHItc2xpY2UoJHZhbC0yLCAxLCAkaGFzLXZhbC0zIC0gMSk7XG4gIH1cblxuICAkcG9zOiBfcG9zaXRpb24tZmxpcHBlcigkdmFsLTEpIF9wb3NpdGlvbi1mbGlwcGVyKCR2YWwtMikgX3Bvc2l0aW9uLWZsaXBwZXIoJHZhbC0zKTtcbiAgJHBvczogdW5xdW90ZSgkcG9zICsgXCJcIik7XG5cbiAgLy8gVXNlIG9sZCBzcGVjIGZvciB3ZWJraXRcbiAgQGlmICR2YWwtMSA9PSBcInRvXCIge1xuICAgIEByZXR1cm4gKFxuICAgICAgd2Via2l0LWltYWdlOiAtd2Via2l0LSArICRwcmVmaXggKyAkcG9zICsgJHN1ZmZpeCxcbiAgICAgIHNwZWMtaW1hZ2U6ICRpbWFnZVxuICAgICk7XG4gIH1cblxuICAvLyBCcmluZyB0aGUgY29kZSB1cCB0byBzcGVjXG4gIEBlbHNlIHtcbiAgICBAcmV0dXJuIChcbiAgICAgIHdlYmtpdC1pbWFnZTogLXdlYmtpdC0gKyAkaW1hZ2UsXG4gICAgICBzcGVjLWltYWdlOiAkcHJlZml4ICsgXCJ0byBcIiArICRwb3MgKyAkc3VmZml4XG4gICAgKTtcbiAgfVxufVxuIiwiQGZ1bmN0aW9uIF9saW5lYXItZ3JhZGllbnQtcGFyc2VyKCRpbWFnZSkge1xuICAkaW1hZ2U6IHVucXVvdGUoJGltYWdlKTtcbiAgJGdyYWRpZW50czogKCk7XG4gICRzdGFydDogc3RyLWluZGV4KCRpbWFnZSwgXCIoXCIpO1xuICAkZW5kOiBzdHItaW5kZXgoJGltYWdlLCBcIixcIik7XG4gICRmaXJzdC12YWw6IHN0ci1zbGljZSgkaW1hZ2UsICRzdGFydCArIDEsICRlbmQgLSAxKTtcblxuICAkcHJlZml4OiBzdHItc2xpY2UoJGltYWdlLCAxLCAkc3RhcnQpO1xuICAkc3VmZml4OiBzdHItc2xpY2UoJGltYWdlLCAkZW5kLCBzdHItbGVuZ3RoKCRpbWFnZSkpO1xuXG4gICRoYXMtbXVsdGlwbGUtdmFsczogc3RyLWluZGV4KCRmaXJzdC12YWwsIFwiIFwiKTtcbiAgJGhhcy1zaW5nbGUtcG9zaXRpb246IHVucXVvdGUoX3Bvc2l0aW9uLWZsaXBwZXIoJGZpcnN0LXZhbCkgKyBcIlwiKTtcbiAgJGhhcy1hbmdsZTogaXMtbnVtYmVyKHN0ci1zbGljZSgkZmlyc3QtdmFsLCAxLCAxKSk7XG5cbiAgQGlmICRoYXMtbXVsdGlwbGUtdmFscyB7XG4gICAgJGdyYWRpZW50czogX2xpbmVhci1zaWRlLWNvcm5lci1wYXJzZXIoJGltYWdlLCAkZmlyc3QtdmFsLCAkcHJlZml4LCAkc3VmZml4LCAkaGFzLW11bHRpcGxlLXZhbHMpO1xuICB9XG5cbiAgQGVsc2UgaWYgJGhhcy1zaW5nbGUtcG9zaXRpb24gIT0gXCJcIiB7XG4gICAgJHBvczogdW5xdW90ZSgkaGFzLXNpbmdsZS1wb3NpdGlvbiArIFwiXCIpO1xuXG4gICAgJGdyYWRpZW50czogKFxuICAgICAgd2Via2l0LWltYWdlOiAtd2Via2l0LSArICRpbWFnZSxcbiAgICAgIHNwZWMtaW1hZ2U6ICRwcmVmaXggKyBcInRvIFwiICsgJHBvcyArICRzdWZmaXhcbiAgICApO1xuICB9XG5cbiAgQGVsc2UgaWYgJGhhcy1hbmdsZSB7XG4gICAgLy8gUm90YXRlIGRlZ3JlZSBmb3Igd2Via2l0XG4gICAgJGdyYWRpZW50czogX2xpbmVhci1hbmdsZS1wYXJzZXIoJGltYWdlLCAkZmlyc3QtdmFsLCAkcHJlZml4LCAkc3VmZml4KTtcbiAgfVxuXG4gIEBlbHNlIHtcbiAgICAkZ3JhZGllbnRzOiAoXG4gICAgICB3ZWJraXQtaW1hZ2U6IC13ZWJraXQtICsgJGltYWdlLFxuICAgICAgc3BlYy1pbWFnZTogJGltYWdlXG4gICAgKTtcbiAgfVxuXG4gIEByZXR1cm4gJGdyYWRpZW50cztcbn1cbiIsIkBjaGFyc2V0IFwiVVRGLThcIjtcblxuLy8vIEdlb3JnaWEgZm9udCBzdGFjay5cbi8vL1xuLy8vIEB0eXBlIExpc3RcblxuJGdlb3JnaWE6IFwiR2VvcmdpYVwiLCBcIkNhbWJyaWFcIiwgXCJUaW1lcyBOZXcgUm9tYW5cIiwgXCJUaW1lc1wiLCBzZXJpZjtcblxuLy8vIEhlbHZldGljYSBmb250IHN0YWNrLlxuLy8vXG4vLy8gQHR5cGUgTGlzdFxuXG4kaGVsdmV0aWNhOiBcIkhlbHZldGljYSBOZXVlXCIsIFwiSGVsdmV0aWNhXCIsIFwiUm9ib3RvXCIsIFwiQXJpYWxcIiwgc2Fucy1zZXJpZjtcblxuLy8vIEx1Y2lkYSBHcmFuZGUgZm9udCBzdGFjay5cbi8vL1xuLy8vIEB0eXBlIExpc3RcblxuJGx1Y2lkYS1ncmFuZGU6IFwiTHVjaWRhIEdyYW5kZVwiLCBcIlRhaG9tYVwiLCBcIlZlcmRhbmFcIiwgXCJBcmlhbFwiLCBzYW5zLXNlcmlmO1xuXG4vLy8gTW9ub3NwYWNlIGZvbnQgc3RhY2suXG4vLy9cbi8vLyBAdHlwZSBMaXN0XG5cbiRtb25vc3BhY2U6IFwiQml0c3RyZWFtIFZlcmEgU2FucyBNb25vXCIsIFwiQ29uc29sYXNcIiwgXCJDb3VyaWVyXCIsIG1vbm9zcGFjZTtcblxuLy8vIFZlcmRhbmEgZm9udCBzdGFjay5cbi8vL1xuLy8vIEB0eXBlIExpc3RcblxuJHZlcmRhbmE6IFwiVmVyZGFuYVwiLCBcIkdlbmV2YVwiLCBzYW5zLXNlcmlmO1xuIiwiQGNoYXJzZXQgXCJVVEYtOFwiO1xuXG4vLy8gQSBtaXhpbiBmb3IgZ2VuZXJhdGluZyB2ZW5kb3IgcHJlZml4ZXMgb24gbm9uLXN0YW5kYXJkaXplZCBwcm9wZXJ0aWVzLlxuLy8vXG4vLy8gQHBhcmFtIHtTdHJpbmd9ICRwcm9wZXJ0eVxuLy8vICAgUHJvcGVydHkgdG8gcHJlZml4XG4vLy9cbi8vLyBAcGFyYW0geyp9ICR2YWx1ZVxuLy8vICAgVmFsdWUgdG8gdXNlXG4vLy9cbi8vLyBAcGFyYW0ge0xpc3R9ICRwcmVmaXhlc1xuLy8vICAgUHJlZml4ZXMgdG8gZGVmaW5lXG4vLy9cbi8vLyBAZXhhbXBsZSBzY3NzIC0gVXNhZ2Vcbi8vLyAgIC5lbGVtZW50IHtcbi8vLyAgICAgQGluY2x1ZGUgcHJlZml4ZXIoYm9yZGVyLXJhZGl1cywgMTBweCwgd2Via2l0IG1zIHNwZWMpO1xuLy8vICAgfVxuLy8vXG4vLy8gQGV4YW1wbGUgY3NzIC0gQ1NTIE91dHB1dFxuLy8vICAgLmVsZW1lbnQge1xuLy8vICAgICAtd2Via2l0LWJvcmRlci1yYWRpdXM6IDEwcHg7XG4vLy8gICAgIC1tb3otYm9yZGVyLXJhZGl1czogMTBweDtcbi8vLyAgICAgYm9yZGVyLXJhZGl1czogMTBweDtcbi8vLyAgIH1cbi8vL1xuLy8vIEByZXF1aXJlIHt2YXJpYWJsZX0gJHByZWZpeC1mb3Itd2Via2l0XG4vLy8gQHJlcXVpcmUge3ZhcmlhYmxlfSAkcHJlZml4LWZvci1tb3ppbGxhXG4vLy8gQHJlcXVpcmUge3ZhcmlhYmxlfSAkcHJlZml4LWZvci1taWNyb3NvZnRcbi8vLyBAcmVxdWlyZSB7dmFyaWFibGV9ICRwcmVmaXgtZm9yLW9wZXJhXG4vLy8gQHJlcXVpcmUge3ZhcmlhYmxlfSAkcHJlZml4LWZvci1zcGVjXG5cbkBtaXhpbiBwcmVmaXhlcigkcHJvcGVydHksICR2YWx1ZSwgJHByZWZpeGVzKSB7XG4gIEBlYWNoICRwcmVmaXggaW4gJHByZWZpeGVzIHtcbiAgICBAaWYgJHByZWZpeCA9PSB3ZWJraXQge1xuICAgICAgQGlmICRwcmVmaXgtZm9yLXdlYmtpdCB7XG4gICAgICAgIC13ZWJraXQtI3skcHJvcGVydHl9OiAkdmFsdWU7XG4gICAgICB9XG4gICAgfSBAZWxzZSBpZiAkcHJlZml4ID09IG1veiB7XG4gICAgICBAaWYgJHByZWZpeC1mb3ItbW96aWxsYSB7XG4gICAgICAgIC1tb3otI3skcHJvcGVydHl9OiAkdmFsdWU7XG4gICAgICB9XG4gICAgfSBAZWxzZSBpZiAkcHJlZml4ID09IG1zIHtcbiAgICAgIEBpZiAkcHJlZml4LWZvci1taWNyb3NvZnQge1xuICAgICAgICAtbXMtI3skcHJvcGVydHl9OiAkdmFsdWU7XG4gICAgICB9XG4gICAgfSBAZWxzZSBpZiAkcHJlZml4ID09IG8ge1xuICAgICAgQGlmICRwcmVmaXgtZm9yLW9wZXJhIHtcbiAgICAgICAgLW8tI3skcHJvcGVydHl9OiAkdmFsdWU7XG4gICAgICB9XG4gICAgfSBAZWxzZSBpZiAkcHJlZml4ID09IHNwZWMge1xuICAgICAgQGlmICRwcmVmaXgtZm9yLXNwZWMge1xuICAgICAgICAjeyRwcm9wZXJ0eX06ICR2YWx1ZTtcbiAgICAgIH1cbiAgICB9IEBlbHNlICB7XG4gICAgICBAd2FybiBcIlVucmVjb2duaXplZCBwcmVmaXg6ICN7JHByZWZpeH1cIjtcbiAgICB9XG4gIH1cbn1cblxuQG1peGluIGRpc2FibGUtcHJlZml4LWZvci1hbGwoKSB7XG4gICRwcmVmaXgtZm9yLXdlYmtpdDogICAgZmFsc2UgIWdsb2JhbDtcbiAgJHByZWZpeC1mb3ItbW96aWxsYTogICBmYWxzZSAhZ2xvYmFsO1xuICAkcHJlZml4LWZvci1taWNyb3NvZnQ6IGZhbHNlICFnbG9iYWw7XG4gICRwcmVmaXgtZm9yLW9wZXJhOiAgICAgZmFsc2UgIWdsb2JhbDtcbiAgJHByZWZpeC1mb3Itc3BlYzogICAgICBmYWxzZSAhZ2xvYmFsO1xufVxuIiwiQGNoYXJzZXQgXCJVVEYtOFwiO1xuXG4vLy8gUHJvdmlkZXMgYSBxdWljayBtZXRob2QgZm9yIHNldHRpbmcgYW4gZWxlbWVudOKAmXMgcG9zaXRpb24uIFVzZSBhIGBudWxsYCB2YWx1ZSB0byDigJxza2lw4oCdIGEgc2lkZS5cbi8vL1xuLy8vIEBwYXJhbSB7UG9zaXRpb259ICRwb3NpdGlvbiBbcmVsYXRpdmVdXG4vLy8gICBBIENTUyBwb3NpdGlvbiB2YWx1ZVxuLy8vXG4vLy8gQHBhcmFtIHtBcmdsaXN0fSAkY29vcmRpbmF0ZXMgW251bGwgbnVsbCBudWxsIG51bGxdXG4vLy8gICBMaXN0IG9mIHZhbHVlcyB0aGF0IGNvcnJlc3BvbmQgdG8gdGhlIDQtdmFsdWUgc3ludGF4IGZvciB0aGUgZWRnZXMgb2YgYSBib3hcbi8vL1xuLy8vIEBleGFtcGxlIHNjc3MgLSBVc2FnZVxuLy8vICAgLmVsZW1lbnQge1xuLy8vICAgICBAaW5jbHVkZSBwb3NpdGlvbihhYnNvbHV0ZSwgMCBudWxsIG51bGwgMTBlbSk7XG4vLy8gICB9XG4vLy9cbi8vLyBAZXhhbXBsZSBjc3MgLSBDU1MgT3V0cHV0XG4vLy8gICAuZWxlbWVudCB7XG4vLy8gICAgIGxlZnQ6IDEwZW07XG4vLy8gICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbi8vLyAgICAgdG9wOiAwO1xuLy8vICAgfVxuLy8vXG4vLy8gQHJlcXVpcmUge2Z1bmN0aW9ufSBpcy1sZW5ndGhcbi8vLyBAcmVxdWlyZSB7ZnVuY3Rpb259IHVucGFja1xuXG5AbWl4aW4gcG9zaXRpb24oJHBvc2l0aW9uOiByZWxhdGl2ZSwgJGNvb3JkaW5hdGVzOiBudWxsIG51bGwgbnVsbCBudWxsKSB7XG4gIEBpZiB0eXBlLW9mKCRwb3NpdGlvbikgPT0gbGlzdCB7XG4gICAgJGNvb3JkaW5hdGVzOiAkcG9zaXRpb247XG4gICAgJHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgfVxuXG4gICRjb29yZGluYXRlczogdW5wYWNrKCRjb29yZGluYXRlcyk7XG5cbiAgJG9mZnNldHM6IChcbiAgICB0b3A6ICAgIG50aCgkY29vcmRpbmF0ZXMsIDEpLFxuICAgIHJpZ2h0OiAgbnRoKCRjb29yZGluYXRlcywgMiksXG4gICAgYm90dG9tOiBudGgoJGNvb3JkaW5hdGVzLCAzKSxcbiAgICBsZWZ0OiAgIG50aCgkY29vcmRpbmF0ZXMsIDQpXG4gICk7XG5cbiAgcG9zaXRpb246ICRwb3NpdGlvbjtcblxuICBAZWFjaCAkb2Zmc2V0LCAkdmFsdWUgaW4gJG9mZnNldHMge1xuICAgIEBpZiBpcy1sZW5ndGgoJHZhbHVlKSB7XG4gICAgICAjeyRvZmZzZXR9OiAkdmFsdWU7XG4gICAgfVxuICB9XG59XG4iLCIvLyBDU1MzIEZsZXhpYmxlIEJveCBNb2RlbCBhbmQgcHJvcGVydHkgZGVmYXVsdHNcblxuLy8gQ3VzdG9tIHNob3J0aGFuZCBub3RhdGlvbiBmb3IgZmxleGJveFxuQG1peGluIGJveCgkb3JpZW50OiBpbmxpbmUtYXhpcywgJHBhY2s6IHN0YXJ0LCAkYWxpZ246IHN0cmV0Y2gpIHtcbiAgQGluY2x1ZGUgZGlzcGxheS1ib3g7XG4gIEBpbmNsdWRlIGJveC1vcmllbnQoJG9yaWVudCk7XG4gIEBpbmNsdWRlIGJveC1wYWNrKCRwYWNrKTtcbiAgQGluY2x1ZGUgYm94LWFsaWduKCRhbGlnbik7XG59XG5cbkBtaXhpbiBkaXNwbGF5LWJveCB7XG4gIGRpc3BsYXk6IC13ZWJraXQtYm94O1xuICBkaXNwbGF5OiAtbW96LWJveDtcbiAgZGlzcGxheTogLW1zLWZsZXhib3g7IC8vIElFIDEwXG4gIGRpc3BsYXk6IGJveDtcbn1cblxuQG1peGluIGJveC1vcmllbnQoJG9yaWVudDogaW5saW5lLWF4aXMpIHtcbi8vIGhvcml6b250YWx8dmVydGljYWx8aW5saW5lLWF4aXN8YmxvY2stYXhpc3xpbmhlcml0XG4gIEBpbmNsdWRlIHByZWZpeGVyKGJveC1vcmllbnQsICRvcmllbnQsIHdlYmtpdCBtb3ogc3BlYyk7XG59XG5cbkBtaXhpbiBib3gtcGFjaygkcGFjazogc3RhcnQpIHtcbi8vIHN0YXJ0fGVuZHxjZW50ZXJ8anVzdGlmeVxuICBAaW5jbHVkZSBwcmVmaXhlcihib3gtcGFjaywgJHBhY2ssIHdlYmtpdCBtb3ogc3BlYyk7XG4gIC1tcy1mbGV4LXBhY2s6ICRwYWNrOyAvLyBJRSAxMFxufVxuXG5AbWl4aW4gYm94LWFsaWduKCRhbGlnbjogc3RyZXRjaCkge1xuLy8gc3RhcnR8ZW5kfGNlbnRlcnxiYXNlbGluZXxzdHJldGNoXG4gIEBpbmNsdWRlIHByZWZpeGVyKGJveC1hbGlnbiwgJGFsaWduLCB3ZWJraXQgbW96IHNwZWMpO1xuICAtbXMtZmxleC1hbGlnbjogJGFsaWduOyAvLyBJRSAxMFxufVxuXG5AbWl4aW4gYm94LWRpcmVjdGlvbigkZGlyZWN0aW9uOiBub3JtYWwpIHtcbi8vIG5vcm1hbHxyZXZlcnNlfGluaGVyaXRcbiAgQGluY2x1ZGUgcHJlZml4ZXIoYm94LWRpcmVjdGlvbiwgJGRpcmVjdGlvbiwgd2Via2l0IG1veiBzcGVjKTtcbiAgLW1zLWZsZXgtZGlyZWN0aW9uOiAkZGlyZWN0aW9uOyAvLyBJRSAxMFxufVxuXG5AbWl4aW4gYm94LWxpbmVzKCRsaW5lczogc2luZ2xlKSB7XG4vLyBzaW5nbGV8bXVsdGlwbGVcbiAgQGluY2x1ZGUgcHJlZml4ZXIoYm94LWxpbmVzLCAkbGluZXMsIHdlYmtpdCBtb3ogc3BlYyk7XG59XG5cbkBtaXhpbiBib3gtb3JkaW5hbC1ncm91cCgkaW50OiAxKSB7XG4gIEBpbmNsdWRlIHByZWZpeGVyKGJveC1vcmRpbmFsLWdyb3VwLCAkaW50LCB3ZWJraXQgbW96IHNwZWMpO1xuICAtbXMtZmxleC1vcmRlcjogJGludDsgLy8gSUUgMTBcbn1cblxuQG1peGluIGJveC1mbGV4KCR2YWx1ZTogMCkge1xuICBAaW5jbHVkZSBwcmVmaXhlcihib3gtZmxleCwgJHZhbHVlLCB3ZWJraXQgbW96IHNwZWMpO1xuICAtbXMtZmxleDogJHZhbHVlOyAvLyBJRSAxMFxufVxuXG5AbWl4aW4gYm94LWZsZXgtZ3JvdXAoJGludDogMSkge1xuICBAaW5jbHVkZSBwcmVmaXhlcihib3gtZmxleC1ncm91cCwgJGludCwgd2Via2l0IG1veiBzcGVjKTtcbn1cblxuLy8gQ1NTMyBGbGV4aWJsZSBCb3ggTW9kZWwgYW5kIHByb3BlcnR5IGRlZmF1bHRzXG4vLyBVbmlmaWVkIGF0dHJpYnV0ZXMgZm9yIDIwMDksIDIwMTEsIGFuZCAyMDEyIGZsYXZvdXJzLlxuXG4vLyAyMDA5IC0gZGlzcGxheSAoYm94IHwgaW5saW5lLWJveClcbi8vIDIwMTEgLSBkaXNwbGF5IChmbGV4Ym94IHwgaW5saW5lLWZsZXhib3gpXG4vLyAyMDEyIC0gZGlzcGxheSAoZmxleCB8IGlubGluZS1mbGV4KVxuQG1peGluIGRpc3BsYXkoJHZhbHVlKSB7XG4vLyBmbGV4IHwgaW5saW5lLWZsZXhcbiAgQGlmICR2YWx1ZSA9PSBcImZsZXhcIiB7XG4gICAgLy8gMjAwOVxuICAgIGRpc3BsYXk6IC13ZWJraXQtYm94O1xuICAgIGRpc3BsYXk6IC1tb3otYm94O1xuICAgIGRpc3BsYXk6IGJveDtcblxuICAgIC8vIDIwMTJcbiAgICBkaXNwbGF5OiAtd2Via2l0LWZsZXg7XG4gICAgZGlzcGxheTogLW1vei1mbGV4O1xuICAgIGRpc3BsYXk6IC1tcy1mbGV4Ym94OyAvLyAyMDExIChJRSAxMClcbiAgICBkaXNwbGF5OiBmbGV4O1xuICB9IEBlbHNlIGlmICR2YWx1ZSA9PSBcImlubGluZS1mbGV4XCIge1xuICAgIGRpc3BsYXk6IC13ZWJraXQtaW5saW5lLWJveDtcbiAgICBkaXNwbGF5OiAtbW96LWlubGluZS1ib3g7XG4gICAgZGlzcGxheTogaW5saW5lLWJveDtcblxuICAgIGRpc3BsYXk6IC13ZWJraXQtaW5saW5lLWZsZXg7XG4gICAgZGlzcGxheTogLW1vei1pbmxpbmUtZmxleDtcbiAgICBkaXNwbGF5OiAtbXMtaW5saW5lLWZsZXhib3g7XG4gICAgZGlzcGxheTogaW5saW5lLWZsZXg7XG4gIH0gQGVsc2Uge1xuICAgIGRpc3BsYXk6ICR2YWx1ZTtcbiAgfVxufVxuXG4vLyAyMDA5IC0gYm94LWZsZXggKGludGVnZXIpXG4vLyAyMDExIC0gZmxleCAoZGVjaW1hbCB8IHdpZHRoIGRlY2ltYWwpXG4vLyAyMDEyIC0gZmxleCAoaW50ZWdlciBpbnRlZ2VyIHdpZHRoKVxuQG1peGluIGZsZXgoJHZhbHVlKSB7XG5cbiAgLy8gR3JhYiBmbGV4LWdyb3cgZm9yIG9sZGVyIGJyb3dzZXJzLlxuICAkZmxleC1ncm93OiBudGgoJHZhbHVlLCAxKTtcblxuICAvLyAyMDA5XG4gIEBpbmNsdWRlIHByZWZpeGVyKGJveC1mbGV4LCAkZmxleC1ncm93LCB3ZWJraXQgbW96IHNwZWMpO1xuXG4gIC8vIDIwMTEgKElFIDEwKSwgMjAxMlxuICBAaW5jbHVkZSBwcmVmaXhlcihmbGV4LCAkdmFsdWUsIHdlYmtpdCBtb3ogbXMgc3BlYyk7XG59XG5cbi8vIDIwMDkgLSBib3gtb3JpZW50ICggaG9yaXpvbnRhbCB8IHZlcnRpY2FsIHwgaW5saW5lLWF4aXMgfCBibG9jay1heGlzKVxuLy8gICAgICAtIGJveC1kaXJlY3Rpb24gKG5vcm1hbCB8IHJldmVyc2UpXG4vLyAyMDExIC0gZmxleC1kaXJlY3Rpb24gKHJvdyB8IHJvdy1yZXZlcnNlIHwgY29sdW1uIHwgY29sdW1uLXJldmVyc2UpXG4vLyAyMDEyIC0gZmxleC1kaXJlY3Rpb24gKHJvdyB8IHJvdy1yZXZlcnNlIHwgY29sdW1uIHwgY29sdW1uLXJldmVyc2UpXG5AbWl4aW4gZmxleC1kaXJlY3Rpb24oJHZhbHVlOiByb3cpIHtcblxuICAvLyBBbHQgdmFsdWVzLlxuICAkdmFsdWUtMjAwOTogJHZhbHVlO1xuICAkdmFsdWUtMjAxMTogJHZhbHVlO1xuICAkZGlyZWN0aW9uOiBub3JtYWw7XG5cbiAgQGlmICR2YWx1ZSA9PSByb3cge1xuICAgICR2YWx1ZS0yMDA5OiBob3Jpem9udGFsO1xuICB9IEBlbHNlIGlmICR2YWx1ZSA9PSBcInJvdy1yZXZlcnNlXCIge1xuICAgICR2YWx1ZS0yMDA5OiBob3Jpem9udGFsO1xuICAgICRkaXJlY3Rpb246IHJldmVyc2U7XG4gIH0gQGVsc2UgaWYgJHZhbHVlID09IGNvbHVtbiB7XG4gICAgJHZhbHVlLTIwMDk6IHZlcnRpY2FsO1xuICB9IEBlbHNlIGlmICR2YWx1ZSA9PSBcImNvbHVtbi1yZXZlcnNlXCIge1xuICAgICR2YWx1ZS0yMDA5OiB2ZXJ0aWNhbDtcbiAgICAkZGlyZWN0aW9uOiByZXZlcnNlO1xuICB9XG5cbiAgLy8gMjAwOVxuICBAaW5jbHVkZSBwcmVmaXhlcihib3gtb3JpZW50LCAkdmFsdWUtMjAwOSwgd2Via2l0IG1veiBzcGVjKTtcbiAgQGluY2x1ZGUgcHJlZml4ZXIoYm94LWRpcmVjdGlvbiwgJGRpcmVjdGlvbiwgd2Via2l0IG1veiBzcGVjKTtcblxuICAvLyAyMDEyXG4gIEBpbmNsdWRlIHByZWZpeGVyKGZsZXgtZGlyZWN0aW9uLCAkdmFsdWUsIHdlYmtpdCBtb3ogc3BlYyk7XG5cbiAgLy8gMjAxMSAoSUUgMTApXG4gIC1tcy1mbGV4LWRpcmVjdGlvbjogJHZhbHVlO1xufVxuXG4vLyAyMDA5IC0gYm94LWxpbmVzIChzaW5nbGUgfCBtdWx0aXBsZSlcbi8vIDIwMTEgLSBmbGV4LXdyYXAgKG5vd3JhcCB8IHdyYXAgfCB3cmFwLXJldmVyc2UpXG4vLyAyMDEyIC0gZmxleC13cmFwIChub3dyYXAgfCB3cmFwIHwgd3JhcC1yZXZlcnNlKVxuQG1peGluIGZsZXgtd3JhcCgkdmFsdWU6IG5vd3JhcCkge1xuICAvLyBBbHQgdmFsdWVzXG4gICRhbHQtdmFsdWU6ICR2YWx1ZTtcbiAgQGlmICR2YWx1ZSA9PSBub3dyYXAge1xuICAgICRhbHQtdmFsdWU6IHNpbmdsZTtcbiAgfSBAZWxzZSBpZiAkdmFsdWUgPT0gd3JhcCB7XG4gICAgJGFsdC12YWx1ZTogbXVsdGlwbGU7XG4gIH0gQGVsc2UgaWYgJHZhbHVlID09IFwid3JhcC1yZXZlcnNlXCIge1xuICAgICRhbHQtdmFsdWU6IG11bHRpcGxlO1xuICB9XG5cbiAgQGluY2x1ZGUgcHJlZml4ZXIoYm94LWxpbmVzLCAkYWx0LXZhbHVlLCB3ZWJraXQgbW96IHNwZWMpO1xuICBAaW5jbHVkZSBwcmVmaXhlcihmbGV4LXdyYXAsICR2YWx1ZSwgd2Via2l0IG1veiBtcyBzcGVjKTtcbn1cblxuLy8gMjAwOSAtIFRPRE86IHBhcnNlIHZhbHVlcyBpbnRvIGZsZXgtZGlyZWN0aW9uL2ZsZXgtd3JhcFxuLy8gMjAxMSAtIFRPRE86IHBhcnNlIHZhbHVlcyBpbnRvIGZsZXgtZGlyZWN0aW9uL2ZsZXgtd3JhcFxuLy8gMjAxMiAtIGZsZXgtZmxvdyAoZmxleC1kaXJlY3Rpb24gfHwgZmxleC13cmFwKVxuQG1peGluIGZsZXgtZmxvdygkdmFsdWUpIHtcbiAgQGluY2x1ZGUgcHJlZml4ZXIoZmxleC1mbG93LCAkdmFsdWUsIHdlYmtpdCBtb3ogc3BlYyk7XG59XG5cbi8vIDIwMDkgLSBib3gtb3JkaW5hbC1ncm91cCAoaW50ZWdlcilcbi8vIDIwMTEgLSBmbGV4LW9yZGVyIChpbnRlZ2VyKVxuLy8gMjAxMiAtIG9yZGVyIChpbnRlZ2VyKVxuQG1peGluIG9yZGVyKCRpbnQ6IDApIHtcbiAgLy8gMjAwOVxuICBAaW5jbHVkZSBwcmVmaXhlcihib3gtb3JkaW5hbC1ncm91cCwgJGludCwgd2Via2l0IG1veiBzcGVjKTtcblxuICAvLyAyMDEyXG4gIEBpbmNsdWRlIHByZWZpeGVyKG9yZGVyLCAkaW50LCB3ZWJraXQgbW96IHNwZWMpO1xuXG4gIC8vIDIwMTEgKElFIDEwKVxuICAtbXMtZmxleC1vcmRlcjogJGludDtcbn1cblxuLy8gMjAxMiAtIGZsZXgtZ3JvdyAobnVtYmVyKVxuQG1peGluIGZsZXgtZ3JvdygkbnVtYmVyOiAwKSB7XG4gIEBpbmNsdWRlIHByZWZpeGVyKGZsZXgtZ3JvdywgJG51bWJlciwgd2Via2l0IG1veiBzcGVjKTtcbiAgLW1zLWZsZXgtcG9zaXRpdmU6ICRudW1iZXI7XG59XG5cbi8vIDIwMTIgLSBmbGV4LXNocmluayAobnVtYmVyKVxuQG1peGluIGZsZXgtc2hyaW5rKCRudW1iZXI6IDEpIHtcbiAgQGluY2x1ZGUgcHJlZml4ZXIoZmxleC1zaHJpbmssICRudW1iZXIsIHdlYmtpdCBtb3ogc3BlYyk7XG4gIC1tcy1mbGV4LW5lZ2F0aXZlOiAkbnVtYmVyO1xufVxuXG4vLyAyMDEyIC0gZmxleC1iYXNpcyAobnVtYmVyKVxuQG1peGluIGZsZXgtYmFzaXMoJHdpZHRoOiBhdXRvKSB7XG4gIEBpbmNsdWRlIHByZWZpeGVyKGZsZXgtYmFzaXMsICR3aWR0aCwgd2Via2l0IG1veiBzcGVjKTtcbiAgLW1zLWZsZXgtcHJlZmVycmVkLXNpemU6ICR3aWR0aDtcbn1cblxuLy8gMjAwOSAtIGJveC1wYWNrIChzdGFydCB8IGVuZCB8IGNlbnRlciB8IGp1c3RpZnkpXG4vLyAyMDExIC0gZmxleC1wYWNrIChzdGFydCB8IGVuZCB8IGNlbnRlciB8IGp1c3RpZnkpXG4vLyAyMDEyIC0ganVzdGlmeS1jb250ZW50IChmbGV4LXN0YXJ0IHwgZmxleC1lbmQgfCBjZW50ZXIgfCBzcGFjZS1iZXR3ZWVuIHwgc3BhY2UtYXJvdW5kKVxuQG1peGluIGp1c3RpZnktY29udGVudCgkdmFsdWU6IGZsZXgtc3RhcnQpIHtcblxuICAvLyBBbHQgdmFsdWVzLlxuICAkYWx0LXZhbHVlOiAkdmFsdWU7XG4gIEBpZiAkdmFsdWUgPT0gXCJmbGV4LXN0YXJ0XCIge1xuICAgICRhbHQtdmFsdWU6IHN0YXJ0O1xuICB9IEBlbHNlIGlmICR2YWx1ZSA9PSBcImZsZXgtZW5kXCIge1xuICAgICRhbHQtdmFsdWU6IGVuZDtcbiAgfSBAZWxzZSBpZiAkdmFsdWUgPT0gXCJzcGFjZS1iZXR3ZWVuXCIge1xuICAgICRhbHQtdmFsdWU6IGp1c3RpZnk7XG4gIH0gQGVsc2UgaWYgJHZhbHVlID09IFwic3BhY2UtYXJvdW5kXCIge1xuICAgICRhbHQtdmFsdWU6IGRpc3RyaWJ1dGU7XG4gIH1cblxuICAvLyAyMDA5XG4gIEBpbmNsdWRlIHByZWZpeGVyKGJveC1wYWNrLCAkYWx0LXZhbHVlLCB3ZWJraXQgbW96IHNwZWMpO1xuXG4gIC8vIDIwMTJcbiAgQGluY2x1ZGUgcHJlZml4ZXIoanVzdGlmeS1jb250ZW50LCAkdmFsdWUsIHdlYmtpdCBtb3ogbXMgbyBzcGVjKTtcblxuICAvLyAyMDExIChJRSAxMClcbiAgLW1zLWZsZXgtcGFjazogJGFsdC12YWx1ZTtcbn1cblxuLy8gMjAwOSAtIGJveC1hbGlnbiAoc3RhcnQgfCBlbmQgfCBjZW50ZXIgfCBiYXNlbGluZSB8IHN0cmV0Y2gpXG4vLyAyMDExIC0gZmxleC1hbGlnbiAoc3RhcnQgfCBlbmQgfCBjZW50ZXIgfCBiYXNlbGluZSB8IHN0cmV0Y2gpXG4vLyAyMDEyIC0gYWxpZ24taXRlbXMgKGZsZXgtc3RhcnQgfCBmbGV4LWVuZCB8IGNlbnRlciB8IGJhc2VsaW5lIHwgc3RyZXRjaClcbkBtaXhpbiBhbGlnbi1pdGVtcygkdmFsdWU6IHN0cmV0Y2gpIHtcblxuICAkYWx0LXZhbHVlOiAkdmFsdWU7XG5cbiAgQGlmICR2YWx1ZSA9PSBcImZsZXgtc3RhcnRcIiB7XG4gICAgJGFsdC12YWx1ZTogc3RhcnQ7XG4gIH0gQGVsc2UgaWYgJHZhbHVlID09IFwiZmxleC1lbmRcIiB7XG4gICAgJGFsdC12YWx1ZTogZW5kO1xuICB9XG5cbiAgLy8gMjAwOVxuICBAaW5jbHVkZSBwcmVmaXhlcihib3gtYWxpZ24sICRhbHQtdmFsdWUsIHdlYmtpdCBtb3ogc3BlYyk7XG5cbiAgLy8gMjAxMlxuICBAaW5jbHVkZSBwcmVmaXhlcihhbGlnbi1pdGVtcywgJHZhbHVlLCB3ZWJraXQgbW96IG1zIG8gc3BlYyk7XG5cbiAgLy8gMjAxMSAoSUUgMTApXG4gIC1tcy1mbGV4LWFsaWduOiAkYWx0LXZhbHVlO1xufVxuXG4vLyAyMDExIC0gZmxleC1pdGVtLWFsaWduIChhdXRvIHwgc3RhcnQgfCBlbmQgfCBjZW50ZXIgfCBiYXNlbGluZSB8IHN0cmV0Y2gpXG4vLyAyMDEyIC0gYWxpZ24tc2VsZiAoYXV0byB8IGZsZXgtc3RhcnQgfCBmbGV4LWVuZCB8IGNlbnRlciB8IGJhc2VsaW5lIHwgc3RyZXRjaClcbkBtaXhpbiBhbGlnbi1zZWxmKCR2YWx1ZTogYXV0bykge1xuXG4gICR2YWx1ZS0yMDExOiAkdmFsdWU7XG4gIEBpZiAkdmFsdWUgPT0gXCJmbGV4LXN0YXJ0XCIge1xuICAgICR2YWx1ZS0yMDExOiBzdGFydDtcbiAgfSBAZWxzZSBpZiAkdmFsdWUgPT0gXCJmbGV4LWVuZFwiIHtcbiAgICAkdmFsdWUtMjAxMTogZW5kO1xuICB9XG5cbiAgLy8gMjAxMlxuICBAaW5jbHVkZSBwcmVmaXhlcihhbGlnbi1zZWxmLCAkdmFsdWUsIHdlYmtpdCBtb3ogc3BlYyk7XG5cbiAgLy8gMjAxMSAoSUUgMTApXG4gIC1tcy1mbGV4LWl0ZW0tYWxpZ246ICR2YWx1ZS0yMDExO1xufVxuXG4vLyAyMDExIC0gZmxleC1saW5lLXBhY2sgKHN0YXJ0IHwgZW5kIHwgY2VudGVyIHwganVzdGlmeSB8IGRpc3RyaWJ1dGUgfCBzdHJldGNoKVxuLy8gMjAxMiAtIGFsaWduLWNvbnRlbnQgKGZsZXgtc3RhcnQgfCBmbGV4LWVuZCB8IGNlbnRlciB8IHNwYWNlLWJldHdlZW4gfCBzcGFjZS1hcm91bmQgfCBzdHJldGNoKVxuQG1peGluIGFsaWduLWNvbnRlbnQoJHZhbHVlOiBzdHJldGNoKSB7XG5cbiAgJHZhbHVlLTIwMTE6ICR2YWx1ZTtcbiAgQGlmICR2YWx1ZSA9PSBcImZsZXgtc3RhcnRcIiB7XG4gICAgJHZhbHVlLTIwMTE6IHN0YXJ0O1xuICB9IEBlbHNlIGlmICR2YWx1ZSA9PSBcImZsZXgtZW5kXCIge1xuICAgICR2YWx1ZS0yMDExOiBlbmQ7XG4gIH0gQGVsc2UgaWYgJHZhbHVlID09IFwic3BhY2UtYmV0d2VlblwiIHtcbiAgICAkdmFsdWUtMjAxMToganVzdGlmeTtcbiAgfSBAZWxzZSBpZiAkdmFsdWUgPT0gXCJzcGFjZS1hcm91bmRcIiB7XG4gICAgJHZhbHVlLTIwMTE6IGRpc3RyaWJ1dGU7XG4gIH1cblxuICAvLyAyMDEyXG4gIEBpbmNsdWRlIHByZWZpeGVyKGFsaWduLWNvbnRlbnQsICR2YWx1ZSwgd2Via2l0IG1veiBzcGVjKTtcblxuICAvLyAyMDExIChJRSAxMClcbiAgLW1zLWZsZXgtbGluZS1wYWNrOiAkdmFsdWUtMjAxMTtcbn1cbiIsIi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBXaGVuIGhhdmluZyBzZXZlcmFsIHRoZW1lcywgdGhpcyBmaWxlIGNvbnRhaW5zIGV2ZXJ5dGhpbmcgcmVsYXRlZCB0byB0aGVcbi8vIGRlZmF1bHQgb25lLlxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuYm9keSB7XG4gICAgZm9udDogMTZweC8yNnB4IEhlbHZldGljYSwgSGVsdmV0aWNhIE5ldWUsIEFyaWFsO1xufVxuIl19 */